{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Raspberry Pi Controlled Experiment (PiE)","text":""},{"location":"#getting-started","title":"Getting started","text":"<p>Follow the install instruction and then control the PiE server with the web interface.</p>"},{"location":"#build-options","title":"Build Options","text":"<ol> <li>Video recording. Use the PiE server to record video. All that is needed is a Raspberry Pi and a Pi camera.</li> <li>Behavior Box. Use the PiE server to record video, control IR and white lights, and log the temperature/humidity.</li> <li>On the scope video recording. Use the PiE server to trigger video recording from a microscope and to log eevents (including microscope frame) to a file.</li> <li>Full treadmill system. Use the PiE server to record synchronized video on a scope (option 3) while controlling a motorized treadmill.</li> </ol>"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>This repository is a work in progess. It is functioning in my hands and fingers but may not in yours. Please email robert.cudmore [at] gmail.com with questions or better yet, open an issue. If this code is used in any way, please be a good scientist/colleague and give me credit. If you see utility in this system and would like to see it customized for a particular experiment, contact me and we can collaborate.</p>"},{"location":"about/","title":"About","text":"<p>The PiE server was designed, coded, and is maintained by Robert Cudmore.</p>"},{"location":"about/#history","title":"History","text":"<p>This project is evolving from 2016 to present. It began as more than three different projects, one for video recording, one for the home-cage/behavior box, and another for the treadmill. The functionality of all these projects have been merged into the current PiE server.</p>"},{"location":"about/#open-source","title":"Open Source","text":"<p>The PiE server only exists because of the massive amount of hard-work, creativity, and expertise that has been put in to creating and maintaining a multiplicity of open-source software projects.</p> <p>\"Genius is one percent inspiration, ninety-nine percent perspiration\"    --- Thomas Edison</p> <p>\"Successful Projects Are The Result Of 99% Hard Work, 1% Innovation\u201d    --- Linus Torvalds</p>"},{"location":"about/#raspberry-pi","title":"Raspberry Pi","text":"<ul> <li>Raspberry Pi Foundation - Design, manufacture, and distribute the Raspberry Pi</li> <li>Raspian - The operating system that runs on the Raspberry Pi</li> <li>Raspberry GPIO - To control and interact with the real world</li> <li>Pigpio - A more precise deamon based GPIO interface</li> <li>PiCamera - Python package to control the Raspberry Pi camera</li> </ul>"},{"location":"about/#server","title":"Server","text":"<ul> <li>Debian - Operating system</li> <li>NGINX - Web server for load balancing, microservices, and API gateways</li> <li>uwsgi - Web standard for NGINX to talk to Python</li> </ul>"},{"location":"about/#python-back-end","title":"Python (back-end)","text":"<ul> <li>Flask - Web microframework</li> <li>Socketio - Bidirectional communication between web browser and Python</li> <li>SciPy - Scientific computing ecosystem</li> <li>NumPy - Scientific computing for Python</li> <li>Pandas - Data analysis library</li> <li>Matplotlib - Plotting</li> <li>Tifffile - General purpose Tiff file library</li> <li>Redis - Database</li> <li>Celery - Distributed task queue</li> </ul>"},{"location":"about/#javascript-front-end","title":"Javascript (front-end)","text":"<ul> <li>Angular - Superheroic Javascript framework</li> <li>JQuery - Fast, small, and feature-rich JavaScript library</li> <li>D3 - Data driven documents</li> <li>Leaflet - Interactive maps</li> <li>Plotly - Modern analytics for the data era</li> <li>Bootstrap - Worlds most popular HTML/CSS/JS Toolkit</li> </ul>"},{"location":"about/#containers","title":"Containers","text":"<ul> <li>Docker - Software containers are the future</li> </ul>"},{"location":"about/#programming-microcontrollers","title":"Programming microcontrollers","text":"<ul> <li>PlatformIO - An open source ecosystem for IoT development</li> </ul>"},{"location":"about/#documentation","title":"Documentation","text":"<ul> <li>Jekyll - Static site generator (Main Map Manager documentation)</li> <li>mkDocs - Static site generator (This Website) using the Material theme.</li> <li>Sphinx - To create documentation (PyMapManager API Documentation)</li> </ul>"},{"location":"about/#distribution","title":"Distribution","text":"<ul> <li>Git - Fast version control</li> <li>Github - Software development platform for online storage/sharing/computation</li> <li>PyPi - Python package index for online distribution</li> <li>Travis - Test and Deploy with Confidence</li> </ul>"},{"location":"about/#online-help","title":"Online help","text":"<ul> <li>Stack Overflow - Where Developers Learn, Share, &amp; Build</li> </ul>"},{"location":"commander/","title":"Commander","text":"<p>Commander is a web server to control any number of PiE servers running on different computers. The commander can be run on Linux, macOS, and Microsoft windows.</p>"},{"location":"commander/#requirements","title":"Requirements","text":"<p>Commander requires Python 3.7.2 or greater.</p>"},{"location":"commander/#install","title":"Install","text":""},{"location":"commander/#macos-and-linux","title":"macOS and Linux","text":"<pre><code># either download\ngit clone https://github.com/cudmore/pie\n\n# or if you do not have git\n# browse to the PiE GitHub repository and manually download the .zip\n# uncompress the .zip and continue\n\n# install\ncd ~/pie/commander\n./install-commander\n\n# run the commander \n./commander run\n</code></pre>"},{"location":"commander/#microsoft-windows","title":"Microsoft Windows","text":"<pre><code># either download\ngit clone https://github.com/cudmore/pie\n\n# or if you do not have git\n# browse to the PiE GitHub repository and manually download the .zip\n# uncompress the .zip and continue\n\n# make sure you are suing Python 3.7.2\npython --version\n\n# install\ncd pie\ncd commander_app\npython -m pip install -r requirements.txt\n\n# run the commander\npython commander.py\n</code></pre>"},{"location":"commander/#browse","title":"Browse","text":"<p>Once installed and running and assuming there are no errors, the commander interface can be browsed at <code>http://[IP]:8000</code> where [IP] is the IP address of your computer.</p> <pre><code>http://[IP]:8000\n</code></pre> <p>When running locally, use 'localhost' in place of [IP], like this</p> <pre><code>http://localhost:8000\n</code></pre>"},{"location":"commander/#starting-and-stopping-commander-server-linux-only","title":"Starting and stopping commander server (Linux only)","text":"<p>The commander server is designed to run in the background and can be controlled using the <code>~/pie/commander_app/commander</code> command.</p> <pre><code>cd ~/pie/commander_app\n\n./commander start       - start the background commander server\n./commander stop        - stop the backgorund commander server\n./commander restart     - restart the background commander server\n./commander status      - get the status of the background commander server\n./commander enable      - start the background commander server at boot\n./commander disable     - do not start the background commander server at boot\n====================\n./commander run         - run commander on command line\n</code></pre> <p>If you run into trouble with the commander, run it on the command line to see the output with <code>./commander run</code>.</p>"},{"location":"commander/#web-interface","title":"Web interface","text":""},{"location":"commander/#editing-ip-addresses","title":"Editing IP addresses","text":"<p>In the config section, turn on 'edit ip' checkbox. Enter a valid IP and hit enter. If the IP is for a running PiE server (no port number needed), the red (bad connection) will be replaced with the current status of the specified PiE server. See 'Server Swarm' below.</p>"},{"location":"commander/#warnings-and-errors","title":"Warnings and errors","text":"<p>When a PiE server is connected, the corresponding row in 'Server Swarm' will be filled in and active. When there is a connection error, the first column will appear red and all other controls will be inactive.</p> <p>When the drive space remaining goes below 5 GB, the 'File' column will be displayed in red. Currently, there is no interface to set this trip-point, 5 GB is  hard-coded in the commander index.html. Feel free to change it yourself.</p>"},{"location":"commander/#server-swarm","title":"Server swarm","text":"<p>Here, the commander is controlling 8 PiE servers. Server 3 (hc3) is recording, server 7 has a connection error, and server 8 (hc8) is streaming. Click image to enlarge.</p> <p> </p>"},{"location":"commander/#swarm-status","title":"Swarm status","text":"<p>The swarm status is a clearinghouse of information for each PiE server. This includes buttons to restart the PiE server and reboot the raspberry Pi. Click image to enlarge.</p> <p> </p>"},{"location":"commander/#video-wall","title":"Video wall","text":""},{"location":"commander/#commander-sync","title":"Commander sync","text":"<p>The commander sync will sychronize files from any number of PiE servers to the computer running the commander.</p> <p>todo: ADD IMAGE</p>"},{"location":"commander/#advanced-usage","title":"Advanced usage","text":"<p>When the commander is run it will create a 'commander_config' folder in your User folder. In this configuration folder is a configuration json file to control the commander.</p> <p>Here, you can control the PiE servers in the commander (can also be set in the web interface). You can also control the destination folder for downloaded files by specifying 'localFolder'. Make sure 'localFolder' is a full path to a folder on your computer. Something like '/Users/cudmore/commander_data'. Finally, make sure the download folder actually exists!</p> <p>Once this json configuration file is changed, restart the commander and reload the web-page with 'ctrl+r' for a full refresh. If you make errors in editing the json file, you will see them in the commander logs on the command prompt or in 'commander_config/commander.log'.</p> <pre><code>{\n    \"localFolder\": \"\",\n    \"serverList\": [\n        {\n            \"ip\": \"192.168.1.4\",\n            \"password\": \"\",\n            \"username\": \"\"\n        },\n        {\n            \"ip\": \"192.168.1.15\",\n            \"password\": \"\",\n            \"username\": \"\"\n        },\n        {\n            \"ip\": \"192.168.1.3\",\n            \"password\": \"\",\n            \"username\": \"\"\n        },\n\n        {\n            \"ip\": \"10.16.81.33\",\n            \"password\": \"\",\n            \"username\": \"\"\n        },\n        {\n            \"ip\": \"10.16.81.34\",\n            \"password\": \"\",\n            \"username\": \"\"\n        },\n        {\n            \"ip\": \"10.16.81.35\",\n            \"password\": \"\",\n            \"username\": \"\"\n        },\n        {\n            \"ip\": \"10.16.81.36\",\n            \"password\": \"\",\n            \"username\": \"\"\n        },\n        {\n            \"ip\": \"10.16.81.37\",\n            \"password\": \"\",\n            \"username\": \"\"\n        },\n        {\n            \"ip\": \"10.16.81.38\",\n            \"password\": \"\",\n            \"username\": \"\"\n        },\n        {\n            \"ip\": \"10.16.81.39\",\n            \"password\": \"\",\n            \"username\": \"\"\n        },\n        {\n            \"ip\": \"10.16.81.41\",\n            \"password\": \"\",\n            \"username\": \"\"\n        }\n\n\n    ],\n    \"sshTimeout\": 2\n}\n</code></pre>"},{"location":"commander/#troubleshooting","title":"Troubleshooting","text":""},{"location":"commander/#run-the-commander-manually","title":"Run the commander manually","text":"<p><code>./install-commander</code> installs a python virtual env in ~/pie/commander_app/commander_env. The commander server needs to be run in this environment.</p> <pre><code># activate virtual environment in commander_env\ncd ~/pie/commander_app\nsource commander_env/bin/activate\n\n# command prompt should now start with '(commander_env)'.\n\n# run the commander server manually\npython commander.py\n</code></pre>"},{"location":"file-server/","title":"File Server","text":"<p>This is a recipe for configuring a Raspberry Pi as a file-server. Once configured as a file-server, files on the Raspberry Pi can be easily opened/edited/copied from a remote computer. This is useful for copying recorded video off the Raspberry Pi to another (remote) computer for archiving and analysis.</p> <p>If you are working on a Windows machine, you need to use Samba. If you are working on macOS you want to use AFP but can also use Samba.</p>"},{"location":"file-server/#2023-install-netatalk-afp","title":"2023 Install netatalk (AFP)","text":"<p>Following this tutorial.</p> <p>Install netatalk</p> <pre><code>sudo apt install netatalk\n</code></pre> <p>Then configure netatalk.</p> <p>The <code>nano</code> command will run a little text editor inside the terminal. Use the up/down arrows to position the cursor (not the mouse)</p> <pre><code>sudo nano /etc/netatalk/afp.conf\n</code></pre> <p>and copy/paste this at the end of the file</p> <pre><code>[$h]\n    path = /home\n    home name = $h\n</code></pre> <p>Exit nano with keyboard <code>ctrl x</code></p> <p>Restart netatalk with</p> <pre><code>sudo systemctl restart netatalk\n</code></pre> <p>To test this out, on a macOS computer select the main menu <code>Go ... Connect to server ...</code> and type <code>afp:\\\\</code> followed by the IP address of your PI. In this example we are using <code>192.168.1.17</code> but your IP is most probably different.</p> <pre><code>afp:\\\\192.168.1.17\n</code></pre> <p>You should see your Pi mount onto your desktop or finder and you can start browsing files.</p>"},{"location":"file-server/#2023-install-samba-smb","title":"2023 Install SAMBA (SMB)","text":"<p>Following this tutorial.</p> <p>Install samba</p> <pre><code>sudo apt-get install samba samba-common-bin\n</code></pre> <p>Make a folder to hold video (the PiE server requires this)</p> <pre><code>mkdir /home/pi/shared\n</code></pre> <p>Edit the smb configuration file with <code>nano</code>. You can move the cursor with up/down arow keys (not the mouse)</p> <pre><code>sudo nano /etc/samba/smb.conf\n</code></pre> <p>Copy and paste the following to the end of the file</p> <pre><code>[video]\npath = /home/pi/video\nwriteable=Yes\ncreate mask=0777\ndirectory mask=0777\npublic=no\n</code></pre> <p>Set a samba password</p> <pre><code>sudo smbpasswd -a pi\n</code></pre> <p>Restart samba</p> <pre><code>sudo systemctl restart smbd\n</code></pre> <p>To test this out, on a macOS computer select the main menu <code>Go ... Connect to server ...</code> and type <code>smb:\\\\</code> followed by the IP address of your PI. In this example we are using <code>192.168.1.17</code> but your IP is most probably different.</p> <pre><code>smb:\\\\192.168.1.17\n</code></pre> <p>Your Pi is now a samba file server !!! You could put your IT department out of business...</p>"},{"location":"file-server/#old-samba-smb","title":"Old, Samba (SMB)","text":"<p>This is a recipe to make a Raspberry Pi a Samba (SMB) file-server that can be accessed from both Windows and macOS.</p>"},{"location":"file-server/#1-install-samba","title":"1) Install Samba","text":"<pre><code>sudo apt-get install samba samba-common-bin\n</code></pre>"},{"location":"file-server/#2-edit-etcsambasmbconf","title":"2) Edit <code>/etc/samba/smb.conf</code>","text":"<pre><code>sudo pico /etc/samba/smb.conf\n</code></pre> <p>When using the <code>pico</code> editor, <code>ctrl+x</code> to save and quit, <code>ctrl+w</code> to search, <code>ctrl+v</code> to page down. Remember, the <code>pico</code> editor does not respond to mouse clicks, you need to move the cursor around with arrow keys.</p>"},{"location":"file-server/#3-add-the-following-to-the-end-of-the-smbconf-file","title":"3) Add the following to the end of the <code>smb.conf</code> file.","text":"<p>In the Pico editor, move the cursor to the end of the file and copy and paste the following.</p> <pre><code>[video]\nComment = Pi video shared folder\nPath = /home/pi/video\nBrowseable = yes\nWriteable = yes\nonly guest = no\ncreate mask = 0777\ndirectory mask = 0777\nPublic = yes\nGuest ok = no\n\n[home]\nComment = Pi shared folder\nPath = /home/pi\nBrowseable = yes\nWriteable = yes\nonly guest = no\ncreate mask = 0777\ndirectory mask = 0777\nPublic = yes\nGuest ok = no\n</code></pre>"},{"location":"file-server/#4-create-a-samba-password","title":"4) Create a Samba password","text":"<pre><code>sudo smbpasswd -a pi\n</code></pre>"},{"location":"file-server/#5-restart-samba","title":"5) Restart Samba","text":"<pre><code>sudo /etc/init.d/samba restart\n</code></pre>"},{"location":"file-server/#6-test-the-server-from-another-machine-on-the-network","title":"6) Test the server from another machine on the network.","text":"<p>On a Windows machine, mount the Raspberry Pi Samba file-server with <code>smb:\\\\[piIP]</code> where [piIP] is the IP address of your pi. Do this by clicking the 'Start' menu and then typing <code>smb:\\\\[piIP]</code>.</p>"},{"location":"file-server/#old-apple-file-protocol-afp","title":"Old, Apple-File-Protocol (AFP)","text":"<p>This is a recipe to make a Raspberry Pi an Apple-File-Protocol (AFP) file-server that can be accessed from macOS.</p>"},{"location":"file-server/#1-install-netatalk","title":"1) Install netatalk","text":"<pre><code>sudo apt-get install netatalk\n</code></pre> <p>Once netatalk is installed, the Raspberry Pi will show up in the macOS Finder 'Shared' section. The Pi can be mounted in the macOS Finder by going to <code>Go - Connect To Server...</code> and entering <code>afp://[piIP]</code> where [piIP] is the IP address of your Pi.</p>"},{"location":"file-server/#2-changing-the-default-name-of-a-pi-in-netatalk","title":"2) Changing the default name of a Pi in netatalk","text":"<p>When a Pi is mounted in macOS using AFP, it will mount as <code>Home Directory</code>. If you have multiple Raspberry Pi computers they all mount with the same 'Home Directory' name which can be confusing. Thus, you want to change the 'mount point' name of each Raspberry Pi. For more information, see this blog post to change the name of the mount point from 'Home Directory'. Or just follow along ...</p> <p>Stop netatalk</p> <pre><code>sudo /etc/init.d/netatalk stop\n</code></pre> <p>Edit the netatalk config file</p> <pre><code>sudo pico /etc/netatalk/AppleVolumes.default\n</code></pre> <p>When using the <code>pico</code> editor, <code>ctrl+x</code> to save and quit, <code>ctrl+w</code> to search, <code>ctrl+v</code> to page down. Remember, the <code>pico</code> editor does not respond to mouse clicks, you need to move the cursor around with arrow keys.</p> <p>Scroll to the bottom of the file and change this one line where 'the_name_you_want' should be the name you want the given Raspberry Pi to mount as. The '#' is used as a comment and is ignored.</p> <pre><code># By default all users have access to their home directories.\n#~/                     \"Home Directory\"\n~/                      \"the_name_you_want\"\n</code></pre>"},{"location":"file-server/#3-restart-netatalk","title":"3) Restart netatalk","text":"<pre><code>sudo /etc/init.d/netatalk start\n</code></pre>"},{"location":"file-server/#4-test-the-server-from-another-machine-on-the-network","title":"4) Test the server from another machine on the network.","text":"<p>In the macOS Finder, go to <code>Go - Connect To Server...</code> and enter <code>afp://[piIP]</code> where [piIP] is the IP address of your Pi.</p>"},{"location":"gpio-timing/","title":"GPIO Timing","text":"<p>The Raspberry Pi is running a fully functional operating system which provides many features including USB, ethernet, and HDMI. Thus, there will be unpredictable delays in receiving and generating general purpose input and output (GPIO). </p> <p>The PiE server uses the Raspberry GPIO python package by default and will use the pigpio daemon if it is installed and running. The GPIO package has a jitter of approximately +/- 2 ms for all DIO with occasional, &lt; 1%, events having absurd jitter on the order of 100-200 ms. This includes trigger in, frame in, and any output. If you are using the PiE server to record video this should be fine. If you want more precision, either offload your timing critical tasks on a Teensy or use the Raspberry pigpiod daemon.</p> <p>See the Jupyter notebooks in the pie/analysis/ folder for a comparising of frame arrival times using GPIO versus pigpio.</p>"},{"location":"gpio-timing/#download-and-install-pigpio","title":"Download and install pigpio","text":"<pre><code>cd\nrm pigpio.zip\nsudo rm -rf PIGPIO\nwget abyz.me.uk/rpi/pigpio/pigpio.zip\nunzip pigpio.zip\ncd PIGPIO\nmake\nsudo make install\n</code></pre>"},{"location":"gpio-timing/#to-start-the-pigpio-daemon","title":"To start the pigpio daemon","text":"<pre><code>sudo pigpiod\n</code></pre>"},{"location":"gpio-timing/#to-stop-the-pigpio-daemon","title":"To stop the pigpio daemon","text":"<pre><code>sudo killall pigpiod\n</code></pre>"},{"location":"images/","title":"Images","text":"<p>The PiE server can be used in different configurations depending on your needs. This includes a behavior box, on the scope video recording, and on the scope video recording with a treadmill.</p>"},{"location":"images/#behavior-box-v20","title":"Behavior Box v2.0","text":"Eight boxes running experiments. Each one can be controlled independently with the simple web interface or all can be monitored and controlled using the commander web interface.           View inside one box with a mouse cage with clear plexiglass lid, a water preference experiment, computer controlled lights, temperatures/humidity sensor, fan, and a video camera (just beyond the top of the photo).           View of organized electrons on the back of two boxes.           Detailed view of electronics on the back of one box."},{"location":"images/#treadmill","title":"Treadmill","text":"Detailed view of circular treadmill including  <ul> <li>10\" acrylic disk (top) <li>Actobotics frame (horizontal aluminum arm) <li>Stepper motor (bottom) <li>Rotary encoder (left) <li>Gears to couple the motor and disk to the rotary encoder"},{"location":"images/#treadmill-on-the-scope","title":"Treadmill on the scope","text":""},{"location":"images/#behavior-box-v01","title":"Behavior Box v0.1","text":"Overview           Lights and camera           Rats nest"},{"location":"implementation-details/","title":"Implementation details","text":"<p>Once running, the PiE server should be simple to use and only requires interaction with its web interface. Yet, for this simple system to work, a number of independent components must each work and must communicate with each other. As is often the case, the details in creating a simple system is complex.</p> <p>What follows is a description of the different pieces of the PiE server with links to the source code and the components that are used.</p>"},{"location":"implementation-details/#raspberry-pi","title":"Raspberry Pi","text":"<p>At its core, this system requires a functioning Raspberry Pi running the Raspbian operating system. Because this is an intentionally stripped down system, some things are not installed out of the box like mounting a USB drive. On the other hand, this is a full-fledged Debian Linux system so you can activate powerful features such as a file-server.</p>"},{"location":"implementation-details/#back-end","title":"Back End","text":""},{"location":"implementation-details/#web-server","title":"Web server","text":"<ul> <li>pie_app/treadmill_app.py - This code creates the main PiE web server (running on port 5010) using Flask and is the main starting point to run the PiE server. It acts as a connection between web requests (URLs) and the backend by processing each incoming URL and calling the appropriate backend code in pie_app/treadmill.py.</li> </ul>"},{"location":"implementation-details/#python-class-library","title":"Python class library","text":"<ul> <li> <p>pie_app/treadmill.py - Wrapper class around pie_app/bTrial.py to implement specifics of the PiE server beyond what bTrial provides. This mainly includes some logic using web sockets, in particular flask-socketio, for bi-directional communication from the browser to the backend and from the backend to the browser.</p> </li> <li> <p>pie_app/bTrial.py - Main catch-all class that implements the logic of a trial based experiment. When it is instantiated, it creates a number of background threads to control independent processes including: GPIO pins, the timing of automatic lights, temperature/humidity readings, and serial communication with a Teensy. The use of background threads is important, they are run in parallel to the main code (utilizing the Raspberry Pis 4-core CPU) and allow everything to run smoothly with minimal blocking. Once running, bTrial receives commands from the web interface in treadmill_app.py to take actions like: changing/loading/saving user configurations, starting/stopping video recording and streaming, setting GPIO pins, and performing serial communication with a Teensy.</p> </li> <li> <p>pie_app/bCamera.py - Code to control a Raspberry Pi camera using the piCamera Python library. This is where both video recording and streaming with uv4l is started and stopped. This also contains a background thread that uses avconv to convert .h264 video saved by the camera into .mp4.</p> </li> <li> <p>pie_app/bPins.py - Code to control the Raspberry Pi GPIO pins using either RPi.GPIO or the pigpio daemon. This is where the PiE server can change GPIO pins and where code is triggered when a pin changes from an external source like a microscope.</p> </li> <li> <p>pie_app/bSerial.py - Code to communicate with an Arduino/Teensy microcontroller over a serial connection (via a USB cable). This is basically to get and set parameters as well as starting/stopping a trial on the Teensy. It works as a background thread instantiated by bTrial and then sits silently waiting for commands to be inserted into a queue. This is not used to program the Teensy, that is handled by platformio</p> </li> <li> <p>pie_app/bUtil.py - Implements basic utility functions like fetching the system date/time, determining the amount of drive space remaining, and getting the IP address and hostname.</p> </li> <li> <p>pie_app/config - Text files written in json that provides human editable configuration options for the server. These json files are loaded when the server starts and are saved when the user saves from the web interface. These json files contain all the configurable options provided by the PiE server, things like the default state of GPIO pins and configurations like the video recording duration and number of repeats.</p> </li> </ul>"},{"location":"implementation-details/#front-end","title":"Front End","text":"<p>The backend web server in pie_app/treadmill_app.py delivers .html pages which have logic driven by Javascript (.js) and formatted with .css.</p> <ul> <li> <p>pie_app/templates/index.html - Main web interface written in html, uses Javascript and the Javascript Angular library to provide dynamic and real-time content.</p> </li> <li> <p>pie_app/static/treadmill.js - Javascript code that implementes the logic of the web interface. Has functions that get called when user is clicking or entering parameter values. Also has function to talk to treadmill_app.py web server via a REST interface. This is not standard Javascript but is using the Angular library.</p> </li> <li> <p>pie_app/static/treadmill.css - A Cascading Style Sheet (css) text file that describes the precise visual layout of the web pages.</p> </li> <li> <p>Miscellaneous - Each webpage served by the PiE server needs a .html file and often uses a Javascript .js file to control the logic of user interaction. This includes videolist.html which serves a list of video files saved on the Pi and environment.html along with environment.js which controls the web based plotting of temperature and humidity.</p> </li> </ul>"},{"location":"implementation-details/#admin-server","title":"Admin server","text":"<p>The admin_app contains a second web server (running on port 5011) allowing the main PiE server (running on port 5010) to be restarted and the Raspberry Pi to be rebooted. This is necessary to allow all this to happen from the PiE web interface. This admin app is automatically installed when the PiE server is installed with <code>./install-pie</code> and should not need further tweaking.</p>"},{"location":"implementation-details/#commander-server","title":"Commander server","text":"<p>The commander_app creates a web interface (running on port 8000) to control any number of PiE servers (on port 5010) running on different Raspberry Pis. The commander server runs completely independent of the PiE server and can be installed on its own dedicated Raspberry Pi or one that is already running the PiE server. See the commander documentation for more details.</p> <p>Note.. In a near future version, the commander will be able to run on any other machine including macOS and Microsoft Windows computers.</p>"},{"location":"implementation-details/#components","title":"Components","text":""},{"location":"implementation-details/#uv4l","title":"uv4l","text":"<p>The uv4l system is used to streaming video from the camera to a web browser. This is a system wide program and is controlled from bCamera using bash script in pie_app/bin.</p>"},{"location":"implementation-details/#avconv","title":"avconv","text":"<p>The avconv package (also known as libav) is used to convert .h264 files saved by the camera to .mp4. This is a system wide program and is controlled from bCamera using bash script in pie_app/bin.</p>"},{"location":"implementation-details/#dht-sensors","title":"DHT sensors","text":"<p>Readings from AM2302 and DHT22 temperature/humidity sensors requires the Adafruit Python library Adafruit_Python_DHT. Readings are implemented in a background task in bTrial.</p>"},{"location":"implementation-details/#documentation","title":"Documentation","text":"<p>Last but not least, this website is written in markdown. The markdown and a description of the contents using yaml are brought together, compiled, and a static site is generated by mkdocs. The final layout is controlled by an mkdocs theme called material. All of this is then pushed to Github which serves this website fast and reliable.</p>"},{"location":"install-buster/","title":"Preparing a Raspberry Pi","text":""},{"location":"install-buster/#overview","title":"Overview","text":"<p>This is a recipe to prepare a Raspberry Pi computer to use with a PiE server. The general steps we will follow are as follows:</p> <ul> <li>Install the Raspberry Pi OS named buster onto an SD card.</li> <li>Boot the Pi with the SD card and find its IP on a local network.</li> <li>Login to the Pi with ssh.</li> <li>Configure the Pi with <code>sudo raspi-config</code>.</li> <li>Mount a USB drive</li> </ul> <p>This might seem daungting but if you take each step methodically, you can do it. If you have done it a few times, it should take about 20 minutes.</p>"},{"location":"install-buster/#required-hardware","title":"Required hardware","text":"<p>For this initial setup you will need the following:</p> <ul> <li>A residential router connected to the internet</li> <li>A macOS or Windows machine connected to the router</li> <li>An additional ethernet cable for the new Pi</li> </ul> <p>If your setting up the Pi to eventually be on a University network, there are some additional requirements. Here we will assume you are on a residential network that you control. This can be acheived by simply bringing everything home and working from there.</p>"},{"location":"install-buster/#download-raspberry-pi-imager","title":"Download Raspberry Pi Imager","text":"<p>These initial steps are done on any internet connected computer (not the Pi).</p> <p>We will use the <code>Raspbery Pi Imager</code> to copy a downloaded Raspberry Pi OS (a .zip or .img file) onto your SD card.</p> <p>Download the Raspberry Pi Imager. Here are direct links for downloading for the macOS and Windows:</p> <ul> <li> <p>macOS Download</p> </li> <li> <p>Windows download</p> </li> </ul>"},{"location":"install-buster/#download-the-raspberry-pi-os-buster","title":"Download the Raspberry Pi OS (buster)","text":"<p>It is CRITICAL that you download and install a slightly older version named <code>Buster</code>.</p> <p>This can be found towards the bottom of the main Raspberry Pi OS download page. You can get there using the 'See all download options' button.</p> <p>Specifically, you want the following:</p> <pre><code>Raspberry Pi OS Lite (Legacy)\nRelease date: February 21st 2023\nSystem: 32-bit\nKernel version: 5.10\nDebian version: 10 (buster)\nSize: 286MB\n</code></pre> <p>Here is a direct link to download the buster xz file.</p> <p>The name of the file you downloaded should be <code>2023-02-21-raspios-buster-armhf-lite.img.xz</code>. This is a compressed file, on either macOS or Windows uncompress it and you should end up with a new <code>img</code> file named <code>2023-02-21-raspios-buster-armhf-lite.img</code>. This is what you will install onto the SD card using the Raspberry Pi Imager.</p>"},{"location":"install-buster/#format-the-sd-card","title":"Format the SD card","text":"<p>You need to format the SD card using the <code>Fat</code> format.</p> <p>If using a macOS computer</p> <ul> <li>Insert the SD card</li> <li>Open the 'Disk Utilities' app. It is in Applications:Utilities folder</li> <li>Select your SD card in the left list (make sure you get it right)</li> <li>Select 'Erase'</li> <li>In the Erase dialog select MS-DOS (Fat) and Master Boot Record (MBR)</li> </ul> <p>If you are using a Window computer, just follow the prompts when you first insert the SD card or right-click the SD card and format it.</p>"},{"location":"install-buster/#run-raspbery-pi-imager","title":"Run <code>Raspbery Pi Imager</code>","text":"<p>In the Raspberry Pi Imager software ...</p> <ul> <li>Select <code>Choose OS</code> and then <code>Use Custom</code> and then select the <code>img</code> file you just uncompressed.</li> <li>Select your SD card.</li> </ul>"},{"location":"install-buster/#enable-ssh-on-boot","title":"Enable ssh on boot","text":"<p>Now the system is on your SD card. You need to enable ssh on boot so you can login to your Pi.</p> <p>An aside. What we are doing here is a bit different than most interactions with computers. The Raspberry Pi, as we are using it, will reamin <code>headless</code>. This means there will never be a monitor, keyboard, or mouse connected to your Pi. All interaction is done through a command prompt using the terminal software called <code>ssh</code>.</p> <p>To enable <code>ssh</code> on boot, you need to make an empty file named <code>ssh</code> on the SD card.</p> <ul> <li>On macOS</li> </ul> <p>With the SD card inserted, in a Terminal, enable ssh on boot with the following command</p> <pre><code>touch /Volumes/boot/ssh\n</code></pre> <ul> <li>On Windows</li> </ul> <p>Use the exporer to view the SD card, it should be named <code>boot</code>. Right-click and create a new text document. Change the name of the new file to just <code>ssh</code> (no extnesion).</p>"},{"location":"install-buster/#goal-half-way-completed","title":"Goal half-way completed !!!","text":"<p>You now have an SD card ready to boot a Raspberry Pi! Go take a break!</p>"},{"location":"install-buster/#power-up-the-pi","title":"Power up the Pi","text":"<ul> <li>Insert the SD card into the Raspberry Pi computer.</li> <li>Attach an ethernet cable from the Pi to your local router.</li> <li>Plug in the USB power.</li> </ul>"},{"location":"install-buster/#find-the-pi-on-your-local-network-and-get-its-ip-address","title":"Find the Pi on your local network and get its IP address","text":"<p>Now you need to find the IP address of your Pi on the local network.</p> <p>Note: This step is most easily done on a home type router (a residential router). This way you can use the router web interface to determine the IP address of the Pi. If your on a University network, you need to contact your network administrators and request a <code>fixed IP</code>. To do this, you will usually have to give them the Raspbery Pi ethernet <code>MAC</code> address.</p> <p>Once you are connected to a residential router, on a computer on the local network (connected to the same router as the Pi), open a browser and go to your  local router page. It is usually at <code>http://192.168.1.1</code>. Once there, find the <code>connected devices</code> tab and find your Raspbery Pi in the list.</p> <p>You need to note the IP address of your Pi for the following steps.</p> <p>If you eventually want your Pi on a University network and need the <code>MAC</code> address of the Pi you can also find it here. The <code>MAC</code> address is a unique identifier for each ethernet or wifi chip, it does not change.</p>"},{"location":"install-buster/#connect-with-ssh","title":"Connect with ssh","text":"<p>Again, on a computer on the local network, you need to connect to the Pi using a terminal program called <code>ssh</code>.</p> <p>On macOS, run the Terminal program. On Windows run a terminal program like Putty.</p> <p>At the command prompt, type</p> <pre><code>ssh pi@&lt;IP-address-of-your-pi&gt;\n</code></pre> <p>Where <code>&lt;ip-address-of-your-pi&gt;</code> is the IP address you just noted down from your router.</p> <p>This will then ask for a <code>username</code> and <code>password</code>.</p> <p>The username is <code>pi</code> and the password is <code>raspberry</code>.</p> <p>Once logged in, your command prompt should look something like <code>pi@raspberrypi:~ $</code></p>"},{"location":"install-buster/#configure-pi","title":"Configure pi","text":"<p>Once logged into the pi, type <code>sudo raspi-config</code> and you will be presented with a number of menu options. You can select menus with the up/down arrows, enter into submenus with <code>return</code> (or <code>enter</code>) and go back to a previous menu with <code>escape</code>.</p> <pre><code>sudo raspi-config\n</code></pre> <pre><code>|       1 System Options       Configure system settings                       \u2502\n\u2502       2 Display Options      Configure display settings                      \u2502\n\u2502       3 Interface Options    Configure connections to peripherals            \u2502\n\u2502       4 Performance Options  Configure performance settings                  \u2502\n\u2502       5 Localisation Options Configure language and regional settings        \u2502\n\u2502       6 Advanced Options     Configure advanced settings                     \u2502\n\u2502       8 Update               Update this tool to the latest version          \u2502\n\u2502       9 About raspi-config   Information about this configuration tool\n</code></pre> <p>Select 1 then</p> <pre><code>\u2502       S3 Password          Change password for the 'pi' user                 \u2502\n</code></pre> <p>You must set the password to poetry7d. This is required for the PiE server to talk to the Raspberry Pi.</p> <pre><code>\u2502       S4 Hostname          Set name for this computer on a network           \u2502\n</code></pre> <p>Enter any valid hostname you want. This will uniquely identify your Pi with an easy to remember name on the network. We usually use animal names like giraffe or monkey.</p> <p>Select 3</p> <pre><code>\u2502       3 Interface Options    Configure connections to peripherals            \u2502\n</code></pre> <p>then select</p> <pre><code>\u2502    P1 Camera      Enable/disable connection to the Raspberry Pi Camera       \u2502\n</code></pre> <p>When asked, <code>Would you like the camera interface to be enabled</code> select <code>&lt;yes&gt;</code></p> <p>Select 5</p> <pre><code>\u2502       5 Localisation Options Configure language and regional settings        \u2502\n</code></pre> <p>then select</p> <pre><code>\u2502         L1 Locale       Configure language and regional settings             \u2502\n</code></pre> <p>Scroll up/down with up/down arrow. Toggle the selections with <code>space</code>, move from the list to the <code>ok</code> and <code>cancel</code> buttons with <code>tab</code></p> <p>by default, the following is usually selected</p> <pre><code>\u2502    [*] en_GB.UTF-8 UTF-8                                              \u2592   \u2502\n</code></pre> <p>If your in the UK, you are good to go. If you are in the US then select (sorry to be so US centric)</p> <pre><code>\u2502    [*] en_US.UTF-8 UTF-8                                              \u2193   \u2502\n</code></pre> <p>Select</p> <pre><code>\u2502         L2 Timezone     Configure time zone                                  \u2502\n</code></pre> <p>and select your timezone</p> <p>Select 6</p> <pre><code>\u2502       6 Advanced Options     Configure advanced settings                     \u2502\n</code></pre> <p>then select</p> <pre><code>\u2502   A1 Expand Filesystem       Ensures that all of the SD card is available    \u2502\n</code></pre> <p>You are done with this step !</p> <p>From the main menu select <code>&lt;finish&gt;</code> and when asked to reboot select <code>&lt;Yes&gt;</code></p>"},{"location":"install-buster/#mount-a-usb-drive","title":"Mount a USB drive","text":"<p>The Raspberry Pi OS does not mount USB drives when they are first plugged in (this is normal for most Linux operating systems).</p> <p>Follow our monting a USB drive tutorial. An alternate version is here.</p>"},{"location":"install/","title":"Install the PiE server","text":""},{"location":"install/#get-a-functioning-raspberry-pi","title":"Get a functioning Raspberry Pi","text":"<p>We assume you have a functioning Raspberry Pi 2/3. To get started, see our installation recipe.</p> <p>In the remaining parts of this tutorial, all commands are entered into an ssh session that is logged into the Pi. Any time you see the number sign (#) that is a comment and does not have to be entered.</p>"},{"location":"install/#1-download-the-pie-server-code","title":"1) Download the PiE server code","text":"<pre><code># update your system\nsudo apt-get update\nsudo apt-get upgrade\n\n# if you don't already have git\nsudo apt-get install git\n\n# clone the main PiE repository\ncd\ngit clone https://github.com/cudmore/pie.git\n</code></pre>"},{"location":"install/#3-install-the-pie-server","title":"3) Install the PiE server","text":"<pre><code>cd ~/pie\n./install-pie\n</code></pre> <p>Thats it, the PiE server should be running and you can use the web interface at <code>http://[ip]:5010</code>. Where <code>[ip]</code> is the IP address of your Raspberry Pi. Make sure you specify port <code>5010</code> in the web address. By default, the PiE server will start when the Raspberry Pi is booted.</p>"},{"location":"install/#4-install-uv4l-for-video-streaming","title":"4) Install uv4l for video streaming.","text":"<p>The uv4l software runs at the system level (not within the PiE folder) and only needs to be installed once per machine.</p> <pre><code>cd ~/pie\n./install-uv4l\n</code></pre>"},{"location":"install/#5-install-the-dht-temperaturehumidity-sensor-python-package-optional","title":"5) Install the DHT temperature/humidity sensor Python package (optional)","text":"<p>If you are using a DHT temperature/humidity sensor, the Adafruit DHT python package needs to be installed.</p> <pre><code>cd ~/pie\n./install-dht\n</code></pre>"},{"location":"install/#6-checking-the-status-of-the-pie-server","title":"6) Checking the status of the PiE server.","text":"<p>If all goes well, the web interface is all this is needed. If the PiE server does not work as expected, it is useful to check its log file. Do this from the web interface or from the command line with:</p> <pre><code>more ~/pie/pie_app/pie.log\n</code></pre>"},{"location":"install/#7-controlling-the-pie-server-from-the-command-line","title":"7) Controlling the PiE server from the command line","text":"<p>The pie/install-pie script installs a system service allowing the PiE server to run in the background. This background PiE server can be controlled as follows:</p> <pre><code>cd ~/pie\n\n./pie start    - start background PiE server\"\n./pie stop     - stop background PiE server\"\n./pie status   - check the status of background PiE server\"\n\n./pie enable   - enable background PiE server at boot\"\n./pie disable  - disable background PiE server at boot\"\n\n./pie run      - run PiE server on command line\"\n</code></pre> <p>For debugging, use <code>./pie run</code> to print the PiE server log to the command line. The logs can also be viewed from the web interface or the command line using <code>more ~/pie/pie_app/pie.log</code>.</p>"},{"location":"install/#running-the-pie-server-at-boot","title":"Running the PiE server at boot","text":"<p>By default, the PiE server will run when the Raspberry Pi is booted and this can be controlled as follows.</p> <pre><code># To make the background server run at boot\ncd ~/pie\n./pie enable\n\n# To make the background server NOT run at boot\ncd ~/pie\n./pie disable\n</code></pre>"},{"location":"install/#manually-running-the-pie-server","title":"Manually running the PiE server","text":"<p>Normally, the PiE server will run in the background after installation with './install-pie'. If there are errors during the install or the PiE server is not running, the pie server can be run manually as follows.</p> <pre><code># stop background pie server\ncd ~/pie\n./pie stop\n\n# activate the pie server python virtual environment in pie_env/\n# Once activated, the command prompt will start with (pie_env)\ncd ~/pie\nsource pie_env/bin/activate\n\n# manually run the pie server\ncd ~/pie/pie_app\npython treadmill_app.py\n\n# don't forget to deactivate the python virtual environment with\ndeactivate\n</code></pre>"},{"location":"install/#uninstalling-the-pie-server","title":"Uninstalling the PiE server","text":"<p>Run the uninstall script <code>./uninstall-pie</code> and remove the ~/pie folder with <code>sudo -Rf ~/pie</code>.</p> <pre><code># run the uninstall script\ncd ~/pie\n./uninstall-pie\n\n# remove the pie folder\nsudo -Rf ~/pie\n</code></pre>"},{"location":"install/#full-reinstall-of-the-pie-server","title":"Full reinstall of the PiE server","text":"<p>Issue these commands to remove and reinstall the PiE server.</p> <pre><code># stop the PiE server\ncd ~/pie\n./pie stop\n\n# remove existing ~/pie folder\ncd\nsudo rm -Rf ~/pie\n\n# download/clone a new copy of pie folder\ncd \ngit clone https://github.com/cudmore/pie.git\n\n# install PiE server\ncd ~/pie\n./install-pie\n\n# install dht sensor (optional)\ncd ~/pie\n./install-dht\n</code></pre>"},{"location":"mount-usb-drive/","title":"Mount USB Drive","text":"<p>I have a Fat32 formatted USB drive and I want to have it mounted when the Raspberry Pi boots. To do this I add an entry to my fstab file using the UUID of the drive and some permission.</p>"},{"location":"mount-usb-drive/#get-a-list-of-your-usb-devices-to-check-if-your-usb-drive-is-available","title":"Get a list of your USB devices to check if your USB drive is available","text":"<pre><code>lsusb\n\nBus 001 Device 002: ID 0424:9514 Standard Microsystems Corp.\nBus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\nBus 001 Device 003: ID 0424:ec00 Standard Microsystems Corp.\nBus 001 Device 004: ID 13fe:5200 Kingston Technology Company Inc.\nBus 001 Device 005: ID 0bda:8176 Realtek Semiconductor Corp. RTL8188CUS 802.11n WLAN Adapter\n</code></pre>"},{"location":"mount-usb-drive/#make-a-directory-to-mount-your-drivevolume-into","title":"Make a directory to mount your drive/volume into","text":"<pre><code>sudo mkdir /home/pi/video\n</code></pre>"},{"location":"mount-usb-drive/#find-the-uuid-of-your-drive","title":"Find the UUID of your drive","text":"<pre><code>sudo blkid\n\n/dev/mmcblk0p1: SEC_TYPE=\"msdos\" LABEL=\"boot\" UUID=\"2654-BFC0\" TYPE=\"vfat\"\n/dev/mmcblk0p2: UUID=\"548da502-ebde-45c0-9ab2-de5e2431ee0b\" TYPE=\"ext4\"\n/dev/sda1: LABEL=\"video\" UUID=\"7CCD-19F2\" TYPE=\"vfat\"\n</code></pre> <p>This tells me that my usb drive is in the device list at /dev/sda1, has the label \u2018video\u2019, a UUID of \u20197CCD-19F2\u2032, and is formatted as VFAT (e.g. FAT32).</p>"},{"location":"mount-usb-drive/#edit-your-etcfstab-file-by-appending-a-line-for-your-dive","title":"Edit your /etc/fstab file by appending a line for your dive","text":"<pre><code>sudo pico /etc/fstab\n\nproc            /proc           proc    defaults          0       0\n/dev/mmcblk0p1  /boot           vfat    defaults          0       2\n/dev/mmcblk0p2  /               ext4    defaults,noatime  0       1\nUUID=7CCD-19F2 /home/pi/video    vfat    rw,umask=0      0       0\n# a swapfile is not a swap partition, so no using swapon|off from here on, use $\n</code></pre> <p>Here, on the line starting with UUID, I have mounted a device using its UUID=7CCD-19F2 into a folder /home/pi/video. This is a Fat32 formatted drive (vfat) and everybody has read-write permissions (rw,umask=0). This recipe will not work for other types of formatted drives (Ext3, NTFS, etc).</p>"},{"location":"mount-usb-drive/#remount-your-drives-and-check-the-drive-is-mounted","title":"Remount Your drives and check the drive is mounted","text":"<pre><code>sudo mount -a\n</code></pre> <p>'ls' should show /video/ in blue to indicate it is mounted</p> <p>Important. When you make the directory where a drive will be mounted it MUST be done with \u2018sudo mkdir /home/pi/video\u2019. You need \u2018sudo\u2019 so fstab can mount it on boot, the final permissions of this mounted drive are set in the drives fstab line. In this case, \u2018rw,umask=0\u2032.</p>"},{"location":"mount-usb-drive/#linux-commands","title":"Linux Commands","text":"<ul> <li> <p>List your usb devices: lsusb</p> </li> <li> <p>List the Location, Label, UUID and Type of your USB devices: sudo blkid</p> </li> <li> <p>Unmount a volume: sudo umount /home/pi/video</p> </li> <li> <p>Mount everybody in fstab: sudo mount -a</p> </li> <li> <p>Check if a drive is mounted: df | grep \u201c/home/pi/video\u201d | awk \u2018{print $6}\u2019</p> </li> </ul>"},{"location":"mount-usb-drive/#to-do","title":"To Do","text":"<ul> <li> <p>A problem I just had is that my USB drive did not get mounted at boot and the folder I have reserved for it is on my root file system, \u2018/\u2019,  with only 4 GB of space. I started writing tons of video files to the folder and quickly ran out of space on. Now, I need a way to test if the folder I am writing to is (I) a folder or (ii) an actual mount point. Tym, the bash guru in the lab and my go to person on these things suggested the following:</p> <p>df | grep \u201c/home/pi/video\u201d | awk \u2018{print $6}\u2019</p> </li> </ul> <p>This will return an empty string if /home/pi/video is NOT mounted.</p>"},{"location":"parts/","title":"Parts","text":"<p>Jump to the actual parts list</p>"},{"location":"parts/#overview","title":"Overview","text":""},{"location":"parts/#raspberry-pi","title":"Raspberry Pi","text":"<p>The Raspberry Pi is a complete computer system in an almost credit card size. It has ethernet, USB, general-purpose-input-output pins (GPIO), a dedicated camera port, and runs a version of Debian Linux called Rasbian. You can pick up the current model, a Raspberry Pi 3 Model B+.</p>"},{"location":"parts/#raspberry-pi-camera","title":"Raspberry Pi camera","text":"<p>The Raspberry Pi has a dedicated camera port for the Raspberry Pi Camera. This is an 8 megapixel camera capable of frame rates as high as 90 frames-per-second and comes in two flavors, the Pi NOIR Camera which can capture images/video using infrared (IR) lights and the 'normal' camera which can capture images/video using visible (white) light. We generally use the Pi NOIR version to record video in behavior boxes during both the daytime (white LEDs) and night-time (IR LEDs) as well as on the scope to record video during two-photon imaging in the dark using IR LEDs.</p>"},{"location":"parts/#analog-video-output","title":"Analog video output","text":"<p>The Raspberry Pi has a 3.5mm headphone jack that can be used to view an analog video stream from the Pi camera. The headphone jack needs to have 4-poles (bands), something like this. The analog video can be connected directly to any monitor that accepts an RCA video input. Alternatively, the analog video can be sent to another computer using an analog video to USB converter, something like this. These video to USB converters are for some reason a large gray market area and you need to be careful when ordering as you might get junk that does not work. In general, these video/USB converters use the easycap driver.</p> <p>The PiE server will output a live video feed when 'arm' is checked. This video feed does not interfere with simultaneous video recording to a file.</p>"},{"location":"parts/#two-channel-relay","title":"Two channel relay","text":"<p>A relay is a switch allowing you to turn higher voltage devices (usually LEDs connected to 12V power) on and off with 3V GPIO pins. We are using a sainsmart 2-channel relay.</p>"},{"location":"parts/#leds","title":"LEDs","text":"<p>If you end up with lots of LEDs, you could try an IR LED strip and/or a white LED strip.</p>"},{"location":"parts/#level-shifter","title":"Level shifter","text":"<p>If you need to connect the Raspberry Pi directly to 5V TTL lab equipment you need a level shifter to convert the 5V signal to 3V as the Raspberry Pi is only 3V tolerant. We normally use Adafruit or Sparkfun level shifters.</p>"},{"location":"parts/#teensy-microcontroller","title":"Teensy microcontroller","text":"<p>We are using Teensy 3.2 or 3.5 microcontrollers. They are Arduino compatible but have a lot more features. These microcontrollers can be programmed from the command line using platformio, no need for the Arduino IDE. To use platformio, the Raspberry Pi needs a few simple system wide configurations, see the readme in pie/platformio. </p>"},{"location":"parts/#stepper-motor-and-driver","title":"Stepper motor and  driver","text":"<p>Use a Bipolar stepper motor with the Easy Driver motor driver.</p> <p></p>"},{"location":"parts/#parts-list","title":"Parts List","text":"<p>Total cost for home-cage and/or on the scope video recording is around $200.</p>"},{"location":"parts/#for-video-recording","title":"For video recording","text":"Quatity Item Purpose Cost Vendor Link 1 Raspberry Pi 3 Model B Raspberry Pi system including computer, SD card, power, and case. In general, buy a kit from Canakit. $75 amazon 1 USB Flash Drive, 64GB To save recorded video $17 amazon 1 (either this) Pi NoIR Camera v2, 8MP IR video camera $30 adafruit 1 (or this) Pi Camera v2, 8MP Video camera $30 adafruit 1 (either this) Pi Camera Ribbon cable (2 meters) Flat ribbon cable to connect camera to computer (not optimal) $6 adafruit 1 (or this 1/2) Pi Camera HDMI extension cable Allows camera to connect to computer using an HDMI cable $15 tindie 1 (and this 2/2) HDMI Cable of sufficient length Male/Male HDMI cable $7 - $15 amazon 1 Ethernet cable    of sufficient length Connect the computer to the network $5 - $20 amazon"},{"location":"parts/#for-video-recording-in-a-behavior-box","title":"For video recording in a behavior box","text":"Quatity Item Purpose Cost Vendor Link 1 SainSmart 2-Channel Relay Module Allow computer to switch LEDs on/off $9 amazon 1-2 White LEDs White light for behavior box $5 sparkfun &gt;4 IR LEDs, 840-850 nm IR light for behavior box. Pi Camera picks up ~850 nm light well, do not use 950 nm. $1 each sparkfun &gt;1 Universal 4-LED Miniature Wedge Base PCB To mount 4x LEDs + required resistor $1 each super-bright-led 1 12V 2A LED Driver (does not come with wall plug) Power the IR LEDs $12 amazon 1 Temperature/humidity sensor Measure temperature/humidity $10-$15 Either am2302 or dht22 1 Wire To wire LEDs into box $17 sparkfun"},{"location":"parts/#for-video-recording-on-a-scope-with-triggering-and-frame-clock","title":"For video recording on a scope with triggering and frame clock","text":"Quatity Item Purpose Cost Vendor Link 1 4-channel Logic Level Converter (Bi-Directional) To connect 5V TTL lab equipment to 3V computer GPIO $4 Sparkfun, Adafruit 1 Tripod Swivel To mount the camera on an optical post and be able to angle it. $9 amazon 1 4-pole 3.5mm headphone jack Output analog video from the Pi $6 amazon 1 Video to USB converter Convert analog video to USB to view video on a computer $15 amazon"},{"location":"parts/#for-controlling-a-motorized-treadmill-with-a-microcontroller","title":"For controlling a motorized treadmill with a microcontroller","text":"Quatity Item Purpose Cost Vendor Link 1 Teensy 3.5 Arduino compatible microcontroller $25 teensy 1 EasyDriver - Stepper Motor Driver Motor controller for stepper motor $15 sparkfun 1 Stepper Motor Share 12V 2A LED Driver for power $15 sparkfun 1 Rotary encoder Honeywell-600-128-CBL $51 digi-key or this 1 Breadboard and jumper cables A breadboard and a mixture of jumper cables: male/male, male/female, and female/female $11 amazon"},{"location":"parts/#building-a-treadmill","title":"Building a treadmill","text":"<p>These are Actobotics parts from ServoCity</p> Quatity Item Cost Part # Link Aluminum channels link 4 1.50 inch Aluminum Channel 2.99 585440 4 6.00 inch Aluminum Channel 5.99 585446 1 9.00 inch Aluminum Channel 7.99 585450 1 15 inch Aluminum Channel 11.99 585458 Shafts and shaft couplers link 2 1/4 inch x12 inch Precision Shaft 3.59 634178 2 1/4 inch x4 inch Precision Shaft 1.49 634164 1 1/4 inch x6 inch Precision Shaft 2.09 634168 2 1/4 inch to 5mm Set Screw Shaft Coupler 4.99 625120 2 1/4 inch to 1/4 inch Set Screw Shaft Coupler 4.99 625104 Couplers and adapters link 8 1/4 inch Bore Clamping Hub (0.770 inch) 7.99 545588 4 1/4 inch Bore Set Screw Hub (0.770 inch) 4.99 545548 2 Stepper Motor Mount (NEMA 17) 7.49 555152 4 1/4-20 Round Screw Plate 3.99 545468 2 Large Square Screw Plate 2.69 585430 1 90 Degree Quad Hub Mount C 5.99 545360 1 90 Degree Quad Hub Mount D 5.99 545324 Ball bearings link 3 .250 inch ID x .500 inch OD Flanged Ball Bearing (Stainless Steel) 2 pack 1.99 535198 1 Dual Ball Bearing Hub A 6.99 545444 1 1/4 inch Shafting &amp; Tubing Spacers (12 pk) 1.69 633104 Gears link 1 16T, 0.250 inch Bore, 32P Bevel Gear 5.99 615442 1 32T, 0.250 inch Bore, 32P Bevel Gear 7.99 615444 1 16T, 5mm Bore, 32P Bevel Gear 5.99 615438 2 48 Tooth, 32 Pitch Hub Gear (3/16 inch Face) 5.20 RHA32-36-48 Fasteners link 24 6-32x3/8 inch Pan Head Phillips Machine Screws (Zinc-Plated) 0.06 90272A146 8 1/2 inch 1/4-20 Flat Head Phillips Machine Screws 0.38 90273A537 1 3/32 Hex Key 1.39 57185A11 6 .250 in L x 6-32 Zinc-Plated Alloy Steel Socket Head Cap Screw (25 pk) 1.69 632106"},{"location":"readme/","title":"Raspberry Pi Controlled Experiment (PiE)","text":"<p>See web documentation at http://blog.cudmore.io/pie/.</p>"},{"location":"release-notes/","title":"Release Notes","text":""},{"location":"release-notes/#release-notes","title":"Release Notes","text":""},{"location":"release-notes/#current-to-do","title":"Current To Do","text":"<ul> <li>Make sure streaming stops when browser tab is closed or browser is quit.</li> <li>Expand sunrise/sunset to fractional hour.</li> <li>[partially done 20180831] Add warning when video/ drive space remaining is less than 1 GB. Do this by updating status.trial.systemInfo.gbRemaining at the end of each recording (record video thread, and armed recording thread). I am doing this with hard-coded 5GB warning in index.html, see: ng-if=\"videoArray[$index].status.trial.systemInfo.gbRemaining &lt; 5\"</li> <li>Have some mechanism to roll-over or otherwise replace the continuous environment log file.</li> <li>[done 20181018] Add code to check the camera as PiE server starts. This way, user can look at logs to troubleshoot.</li> <li>Add popup to web interface for selecting supported DHT (AM2302, DHT11) sensors</li> <li>[20181114] Have continuous environmental log also log status of the lights. Once done, add gray bars to environment plot to show when light actually came on/off.</li> </ul>"},{"location":"release-notes/#major-changes","title":"Major Changes","text":"<p>20181114</p> <ul> <li>Revamped environmental log page.<ul> <li>Now using fixed y-axis for humidity in range 0..80</li> <li>Added controls to set y-axis of temperature.</li> <li>Showing last read timestamp, temerature, and humidity at top of page</li> <li>Added button to reload page. Once loaded, the page is static (does not continuously poll server). Clicking 'reload page' will fetch new values from server.</li> <li>Reversed order of table to show last reading first.</li> <li>The page is now using javascript and angular</li> </ul> </li> </ul> <p>20181013</p> <ul> <li>Moved environment logs to /home/pie/video/logs. This way they can be browsed and will not be trashed on full reinstall</li> </ul> <p>20180801</p> <ul> <li>Lots of changes</li> </ul> <p>20180722</p> <ul> <li>Lots of changes</li> </ul>"},{"location":"release-notes/#development-notes","title":"Development Notes","text":""},{"location":"release-notes/#20180710","title":"20180710","text":"<p>(1) motor interface</p> <ul> <li> <p>make setup not engage motor</p> </li> <li> <p>add motor on, motor off to web interface    pass to teensy with serial useMotor/motorOn, see trial.useMotor</p> </li> </ul> <pre><code>//When set LOW, all STEP commands are ignored and all FET functionality is turned off. Must be pulled HIGH to enable STEP control\nconst int motorResetPin = 19;\n\n//Logic Input. Enables the FET functionality within the motor driver. If set to HIGH, the FETs will be disabled, and the IC will not drive the motor. If set to LOW, all FETs will be enabled, allowing motor control.\nconst int motorEnabledPin = 20; //low to engage, high to dis-engage\n</code></pre> <p>(2) [done]finish writing docs for 'scope' configuration.</p> <p>(3) [done] make sure all config files still load</p> <p>(4) [done] add 'last response' to interface    - update self.lastResponse throughout code</p> <p>(6) look at starting ./pie at boot, make sure it catches the serial</p>"},{"location":"release-notes/#reduce-png-file-size","title":"Reduce png file size","text":"<p>see:</p> <p>https://www.cyberciti.biz/faq/linux-unix-optimize-lossless-png-images-with-optipng-command/</p> <p>sudo apt-get install optipng</p>"},{"location":"release-notes/#remember","title":"Remember","text":"<p>Pins GPIO2 and GPIO3 have fixed pull-up resistors, but for other pins this can be configured in software.</p>"},{"location":"release-notes/#gunicorn","title":"Gunicorn","text":"<pre><code>source env/bin/activate\ncd ~/pie/pie_app\n/home/pi/pie/env/bin/gunicorn -w 1 --bind 192.168.1.15:5010 treadmill_app:app\n</code></pre>"},{"location":"release-notes/#mkdocs","title":"MkDocs","text":"<p>Had to install with</p> <pre><code>sudo pip install mkdocs\n</code></pre> <p>Run on an external port</p> <pre><code>cd ~/pie/docs\nmkdocs serve -a 192.168.1.4:8000\n# if that does not work, then\nmkdocs serve --dev-addr=0.0.0.0:8000\n</code></pre> <p>Push to github</p> <pre><code>cd ~/pie/docs\nmkdocs gh-deploy\n</code></pre>"},{"location":"rest-interface/","title":"Rest Interface","text":""},{"location":"rest-interface/#introduction","title":"Introduction","text":"<p>The PiE server provides a REST interface allowing web URLs to get and set configuration parameters and to perform actions like starting and stopping recording.</p> <p>For example, if your Pi has the IP address 192.168.4, the status of the PiE server can be retreived with:</p> <pre><code>http://192.168.1.4:5010/status\n</code></pre> <p>The entire web interface is driven by calling this REST interface from Javascript in pie/pie_app/static/treadmill.js.</p> <p>You can use this REST interface to control the PiE server from Python or Matlab or make your own web interface using Javascript.</p>"},{"location":"rest-interface/#endpoints","title":"Endpoints","text":"<p>The following is a list of valid endpoints.</p>"},{"location":"rest-interface/#get","title":"Get","text":"<pre><code>/status\n\n/systeminfo\n\n/api/refreshsysteminfo\n\n/log\n\n/environmentlog\n\n/api/lastimage\n</code></pre>"},{"location":"rest-interface/#set","title":"Set","text":"<pre><code>/api/set/animalid/&lt;string:animalID&gt;\n\n/api/set/conditionid/&lt;string:conditionID&gt;\n\n/api/set/scopefilename/&lt;string:scopeFilename&gt;\n</code></pre>"},{"location":"rest-interface/#actions","title":"Actions","text":"<pre><code>/api/action/&lt;string:thisAction&gt;\n</code></pre> thisAction action startRecord stopRecord startStream stopStream startArm stopArm startArmVideo stopArmVideo"},{"location":"rest-interface/#submitpost","title":"Submit/Post","text":"<p>This is a POST endpoint to change any configuration parameter. Need to send POST data which is results or modified version of /status.</p> <pre><code>/api/submit/&lt;string:submitThis&gt;\n</code></pre> thisAction action saveconfig Save current configuration (no post data) configparams pinparams animalparams ledparams motorparams <pre><code>/api/submit/loadconfig/&lt;string:loadThis&gt;\n</code></pre>"},{"location":"rest-interface/#scripting-with-the-rest-interface","title":"Scripting with the REST interface","text":""},{"location":"rest-interface/#python","title":"Python","text":"<p>In this example, we get the server status, toggle the white LED, and post this new data to change the white LED on the server.</p> <p>1) Install requests if necessary</p> <pre><code>pip3 install requests\n</code></pre> <p>2) Put this code into a file called 'testrest.py'</p> <pre><code>import requests\nfrom pprint import pprint\n\n# get the current status\nurl = 'http://192.168.1.4:5010/status'\nr = requests.get(url)\n\nstatus = r.json()\nstatus = status['trial']['config']\n\n# toggle the white LED\n# we are hard coding [1] here, IR LED is [2]\nwhiteLED = status['hardware']['eventOut'][1]['state']\nwhiteLED = not whiteLED\nstatus['hardware']['eventOut'][1]['state'] = whiteLED\n\n# post the changes\nurl = 'http://192.168.1.4:5010/api/submit/ledparams'\nr = requests.post(url, json = status) \n\n# check that our changes were returned (meaning they were set on the server)\nstatus = r.json()\nstatus = status['trial']['config']\nprint('server whiteLED is now:', status['hardware']['eventOut'][1]['state'])\n\n# check the last response from the server\nprint('last response: ')\npprint(r.json()['trial']['runtime']['lastResponse'])\n</code></pre> <p>3) Run on command line</p> <pre><code>python3 testrest.py\n</code></pre> <p>Each time this script is run, the white LED will be toggled.</p>"},{"location":"rest-interface/#matlab","title":"Matlab","text":"<p>Coming soon!</p>"},{"location":"rest-interface/#processing","title":"Processing","text":"<p>Processing is a healthy alternative to Matlab and/or Python as it allows many of the same functionality without the overhead of a complicated, large, and proprietary installation.</p> <p>The Processing code below will fetch the status of the PiE server, toggle both the white and IR LEDs and then set new values on the PiE server.</p> <pre><code>// This code assumes that http.request library is installed\n// To install, select menu 'Sketch - Import Library... - Add Library...' and search for 'http requests'\nimport http.requests.GetRequest;\n\n  // search and replace 192.168.1.4 with the IP address of a PiE server\n\n  // grab the PiE server 'status' using endpoint /status\n  JSONObject status = loadJSONObject(\"http://192.168.1.4:5010/status\");\n\n  // (0) parse the PiE server 'status' into its different pieces\n  JSONObject trial = status.getJSONObject(\"trial\");\n  JSONObject config = trial.getJSONObject(\"config\");\n  JSONObject hardware = config.getJSONObject(\"hardware\");\n  JSONArray eventOut = hardware.getJSONArray(\"eventOut\"); // eventOut is a JSON array\n\n  // specify the white and IR LED indices (these are indices into JSON eventOut array)\n  Integer whiteIdx = 1;\n  Integer irIdx = 2;\n\n  // (1) get the the initial 'state' of white and IR LEDs\n  JSONObject whiteLED = eventOut.getJSONObject(whiteIdx);\n  JSONObject irLED = eventOut.getJSONObject(irIdx);\n  println(\"1\");\n  println(\"whiteLED 'state' was:\", whiteLED.getBoolean(\"state\"));\n  println(\"irLED 'state' was:\", irLED.getBoolean(\"state\"));\n\n  // (2) toggle/invert the 'state' of white and IR leds\n  Boolean newWhiteState = ! whiteLED.getBoolean(\"state\");\n  Boolean newIRState = ! irLED.getBoolean(\"state\");\n  println(\"2\");\n  println(\"newWhiteState:\", newWhiteState);\n  println(\"newIRState:\", newIRState);\n\n  // convert from Boolean to int\n  // endpoint /api/v2/set/led/&lt;ledIdx&gt;/&lt;value&gt; expects &lt;value&gt; in (0,1) and not in (true, false)\n  int newWhiteStateInt = newWhiteState ? 1 : 0;\n  int newIRStateInt = newIRState ? 1 : 0;\n\n  // set the new values on the PiE server using REST endpoint /api/v2/set/led/&lt;ledIdx&gt;/&lt;value&gt;\n  // where:\n  //    &lt;ledIdx&gt;: 1 for white, 2 for IR (e.g. whiteIdx and irIdx)\n  //    &lt;value&gt;: 1 for on, 0 for off\n  GetRequest postWhite = new GetRequest(\"http://192.168.1.4:5010/api/v2/set/led/\" + whiteIdx + \"/\" + newWhiteStateInt);\n  postWhite.send();\n  GetRequest postIR = new GetRequest(\"http://192.168.1.4:5010/api/v2/set/led/\" + irIdx + \"/\" + newIRStateInt);\n  postIR.send();\n\n  // (3) grab the PiE server 'status' using endpoint /status again to ensure our changes took effect\n  // You can also look at the web interface to see if the LED changes took effect !!!\n  status = loadJSONObject(\"http://192.168.1.4:5010/status\");\n\n  // parse the PiE server 'status' into its different pieces, the same as step (0) above\n  trial = status.getJSONObject(\"trial\");\n  config = trial.getJSONObject(\"config\");\n  hardware = config.getJSONObject(\"hardware\");\n  eventOut = hardware.getJSONArray(\"eventOut\");\n  whiteLED = eventOut.getJSONObject(whiteIdx);\n  irLED = eventOut.getJSONObject(whiteIdx);\n\n  println(\"3\");\n  println(\"whiteLED 'state' is now:\", whiteLED.getBoolean(\"state\"));\n  println(\"irLED 'state' is now:\", irLED.getBoolean(\"state\"));\n</code></pre>"},{"location":"trial-file/","title":"Trial File","text":"<p>Trial files are text files to log events that occur during a video recording. Trial file names are automatically generated with the date, time, and trial number as 'yyyymmdd_hhmmss_t[trial].txt' where [trial] is the trial number.</p> <p>Events are accumulated during each video recording, including 'record' and 'arm', and saved at the end of each recording into a trial file.</p>"},{"location":"trial-file/#trial-file-format","title":"Trial File Format","text":"<p>All trial files begin with a one line header, followed by one line of column names and then any number of events (one line per event). Trial files are comma delimited except for the one line header. Here is an example trial file with 8 events:</p> <pre><code>date=20180902;time=19:26:49;startTimeSeconds=1535930809.9245791;hostname=\"pi15\";id=\"\";condition=\"\";trialNum=4;numRepeats=1;repeatDuration=301;numRepeatsRecorded=1;repeatInfinity=\"False\";scopeFilename\"\";video_fps=30;video_resolution=\"640,480\";\ndate,time,linuxSeconds,secondsSinceStart,event,value,str,tick\n20180902,19:26:49,1535930809.9245791,0.0,startTrial,4,,None\n20180902,19:26:49,1535930809.95922,0.03464078903198242,newRepeat,1,,None\n20180902,19:26:49,1535930809.9660773,0.04149818420410156,beforefilepath,1,/home/pi/video/20180902/20180902_192649_t4_r1_before.h264,None\n20180902,19:26:49,1535930809.9661162,0.04153704643249512,afterfilepath,1,/home/pi/video/20180902/20180902_192649_t4_r1_after.h264,None\n20180902,19:26:50,1535930810.1416507,0.217071533203125,frame,1,1654442841,710240.945\n20180902,19:26:50,1535930810.1694624,0.24488329887390137,frame,2,1654476158,710270.944\n20180902,19:26:51,1535930811.1701634,1.24558424949646,triggerIn,False,,711270.812\n20180902,19:26:51,1535930811.252085,1.3275058269500732,stopTrial,4,,None\n</code></pre> <p>Note that the date and start time of a trial (yyyymmdd and hh:mm:ss) appears in (i) the file name, (ii) the header, and (iii) the first 'startTrial' event.</p>"},{"location":"trial-file/#trial-file-header","title":"Trial File Header","text":"<p>The trial file header is a single line with a semi-colon delimited list of token=value pairs. Tokens with a string or boolean type use double quotes (\"\") around their value. If there is no value for a string token, the double quotes are always included.</p> Token Format Meaning date yyyymmdd time hh:mm:ss startTimeSeconds float hostname string The hostname of the Raspberry Pi. Useful to keep track of multiple machines. id string The id that is entered in the web, can be empty (e.g. \"\").interface. condition string The condition that is entered in the web interface, can be empty (e.g. \"\"). trialNum integer numRepeats integer repeatDuration float numRepeatsRecorded integer The number of repeats actually recorded. Can be different from numRepeats if the user stops the video recording before it is finished. repeatInfinity boolean scopeFilename string video_fps integer The frames-per-second of the recorded video, set in the web interface. video_resolution string The width and height of the video recording (in pixels). For example \"640,480\" or \"1024,768\""},{"location":"trial-file/#trial-file-events","title":"Trial File Events","text":"<p>All events begin with date, time, linuxSeconds, and secondsSinceStart tokens.</p> Token Value date yyyymmdd time hh:mm:ss linuxSeconds A long float representing the time since the linux epoch, this value comes from the Python time package time.time(). secondsSinceStart A long float representing the number of seconds (with fraciton) soince the 'start trigger was received'. <p>All events end with a 'tick' token. Tick tokens are unsigned float that represents the micro-seconds since the startTrial event. These are only used if the pigpio daemon has been activated. If the pigpiod is not active, all ticks will be logged as 'None' (without the single-quotes). Using pigpio gives better precision for GPIO events compared to the standard Python time.time() function. Keep in mind, although events are more precise, they can still be missed!</p> Event Class value str tick startTrial bTrial The trial number stopTrial bTrial The trial number newRepeat bTrial The repeat (epoch) number whiteLED bTrial 1 for on, 0 for off irLED bTrial 1 for on, 0 for off temperature bTrial The temperature in celcius (assumes using a DHT sensor) humidity bTrial The % relative humidity (assumes using a DHT sensor) triggerIn bPins frame bPins The frame number generic bPins user2 bPins beforefilepath bCamera n/a Full path to pre trigger video file. afterfilepath bCamera n/a Full path to main video file. The whole point of the PiE server. startArmedRecording bCamera Time armed recording was started. The code to retrieve this time is immediately after the code to start the camera. As such, it is a more precide time-stamp for the actual time the video was started. stopArmedRecording bCamera Same idea but at the stop of armed recording, see startArmedRecording. startVideoRecord bCamera See startArmedRecording. stopVideoRecord bCamera Same idea but at the stop of recording, see startArmedRecording"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>The first thing to check is the PiE server log. The log can be viewed in many ways,</p> <ol> <li>From the web interface</li> <li>By running the PiE server on the command line with <code>./pie run</code></li> <li>By directly viewing the log file with <code>more ~/pie/pie_app/pie.log</code></li> </ol>"},{"location":"troubleshooting/#common-errors","title":"Common Errors","text":""},{"location":"troubleshooting/#oserror-errno-98-address-already-in-use","title":"OSError: [Errno 98] Address already in use","text":"<p>This happens when you try and start the server but it is already running. Usually when it is running in the background and you run it again with <code>./pie run</code>. Just stop the server with <code>./pie stop</code> and then try again with <code>./pie run</code>.</p>"},{"location":"troubleshooting/#troubleshooting-the-camera","title":"Troubleshooting the camera","text":"<p>Capture a still image with the Pi camera with:</p> <pre><code>raspistill -o test.jpg\n</code></pre> <p>If you get any errors then there is a problem with the Pi Camera.</p> <p>Make sure the Pi Camera is activated.</p> <pre><code># type this at a command prompt\nsudo raspi-config\n\n# select '5 Interface Options'\n# select 'P1 Camera'\n# Answer 'Yes' to question 'Would you like the camera interface to be enabled?'\n</code></pre>"},{"location":"troubleshooting/#bcamera-picamerammalerror-failed-to-enable-connection-out-of-resources","title":"bCamera PiCameraMMALError: Failed to enable connection: Out of resources","text":"<p>If you receive this error in the web interface or PiE server log, it means the camera is in use by some other process. The Raspberry camera can only do one thing at a time, it can stream or record but not both at the same time. In addition, the camera can not record (or stream) in two different programs simultaneously.</p> <p>Make sure other programs are not using the camera and try again. Rebooting with 'sudo reboot' usually does the trick unless these programs, like the PiE server, are set up to run at boot.</p>"},{"location":"troubleshooting/#troubleshooting-a-dht-temperaturehumidity-sensor","title":"Troubleshooting a DHT temperature/humidity sensor","text":"<p>Run the simplified code in the testing/ folder. If you can't get a temperature/humidity reading with this code, it will not work within the PiE server.</p> <p>Check the PiE server log (see above) and make sure the Adafruit DHT driver is installed and run when the PiE server is started. You should see entries in the PiE server log like this:</p> <pre><code>[2018-10-14 09:53:59,596] {bTrial.py &lt;module&gt;:51} DEBUG - Loaded Adafruit_DHT\n[2018-10-14 09:54:00,168] {bTrial.py __init__:178} DEBUG - starting temperature thread\n[2018-10-14 09:54:00,172] {bTrial.py tempThread:918} INFO - tempThread() sensorTypeStr:AM2302 sensorType:22 pin:4\n</code></pre> <p>If the DHT driver is not installed, install it with <code>./install-dht</code>, restart the PiE server with <code>./pie restart</code>, and check the PiE server log again.</p>"},{"location":"troubleshooting/#converting-video-to-mp4","title":"Converting video to mp4","text":"<p>The PiE server uses libav (avconv) to convert video from .h264 to .mp4. If libav (avconv) does not install during <code>~/pie/install-pie</code>, this conversion will not work.</p>"},{"location":"troubleshooting/#troubleshooting-uv4l-streaming","title":"Troubleshooting uv4l streaming","text":"<p>In rare instances the uv4l streaming server does not stop properly. Streaming with uv4l runs at the system level and not in Python. As such, uv4l needs to be controlled via the command line.</p> <pre><code>#list all uv4l processes\nps -aux | grep uv4l\n\n# will yield something like\nroot     23117  9.8  1.3 140796 12312 ?        Ssl  20:34   0:02 uv4l --driver raspicam --auto-video_nr --encoding h264 --width 640 --height 480 --enable-server on\npi       23262  0.0  0.1   6644  1316 pts/1    S+   20:34   0:00 grep --color=auto uv4l\n\n# kill uv4l with its process id (PID)\n# '--' is needed to kill parent and child processes\nsudo kill -- 23117\n\n#check the uv4l process is no longer running\nps -aux | grep uv4l\n\n# should yield\npi         674  0.0  0.1   6644  1320 pts/0    S+   21:06   0:00 grep --color=auto uv4l\n</code></pre>"},{"location":"troubleshooting/#uv4l-will-not-go-away","title":"uv4l will not go away","text":"<p>Worst case senario is <code>ps -aux | grep uvl4</code> yields something like this</p> <pre><code>root     23117 17.2  0.0      0     0 ?        Zsl  20:34   0:37 [uv4l] &lt;defunct&gt;\n</code></pre> <p>If you see the <code>&lt;defunct&gt;</code> then restart the Pi with <code>sudo reboot</code> and it should be fixed.</p>"},{"location":"troubleshooting/#manually-editing-user-config-json-files","title":"Manually editing user config (json) files","text":"<p>The PiE server comes with three default sets of options: Homecage, Scope, and Treadmill. There is an additional <code>User</code> configuration that can be edited manually to configure the PiE server.</p> <p>To edit the <code>User</code> file, open <code>pie/pie_app/config/config_user.json</code> in the pie/pie_app/config/ folder. The format of the file is [json][json] and basically specifies key/value pairs. Do not add or remove any keys, just change their values. The json format is very strict, if there are any syntax errors, the file will not load and the PiE server will not run.</p> <p>To check your work, use</p> <pre><code>cd ~/pie/pie_app/config\ncat config_user.json | python -m json.tool\n</code></pre> <p>If your edits are syntatically correct, this command will output the contents of the file. If you have created an error, they will be reported on the command line. For example, if your forget a comma  after <code>\"enabled\": true</code> like this</p> <pre><code>        \"triggerIn\": {\n            \"enabled\": true\n            \"pin\": 23,\n            \"polarity\": \"rising\",\n            \"pull_up_down\": \"down\"\n        },\n</code></pre> <p>You will get an error</p> <pre><code>Expecting , delimiter: line 27 column 13 (char 648)\n</code></pre>"},{"location":"troubleshooting/#checking-system-and-software-versions","title":"Checking system and software versions","text":"<p>The PiE server should work out of the box but as system and Python libraries are updated, things can potentially become broken. Thus, it is important to check and verify a number of system and Python Package versions. Here is a snapshot of versions for a working PiE server as of October 2018. As python packages are updated, things can potentially break.</p> <pre><code>=== linux:\n('debian', '9.4', '')\nLinux hc4 4.14.71-v7+ #1145 SMP Fri Sep 21 15:38:35 BST 2018 armv7l GNU/Linux\n=== python: 3.5.3 (default, Jan 19 2017, 14:11:04) [GCC 6.3.0 20170124]\n=== PiE: 20190104a\n=== picamera: [picamera 1.13 (/home/pi/pie/pie_env/lib/python3.5/site-packages)]\n=== RPi.GPIO: 0.6.3\n=== serial: 3.4\n=== flask: 1.0.2\n=== flask_cors: 3.0.6\n=== flask_socketio: 3.0.2\n=== avconv:\nffmpeg version 3.2.10-1~deb9u1+rpt2 Copyright (c) 2000-2018 the FFmpeg developers\nbuilt with gcc 6.3.0 (Raspbian 6.3.0-18+rpi1+deb9u1) 20170516\nconfiguration: --prefix=/usr --extra-version='1~deb9u1+rpt2' --toolchain=hardened --libdir=/usr/lib/arm-linux-gnueabihf --incdir=/usr/include/arm-linux-gnueabihf --enable-gpl --disable-stripping --enable-avresample --enable-avisynth --enable-gnutls --enable-ladspa --enable-libass --enable-libbluray --enable-libbs2b --enable-libcaca --enable-libcdio --enable-libebur128 --enable-libflite --enable-libfontconfig --enable-libfreetype --enable-libfribidi --enable-libgme --enable-libgsm --enable-libmp3lame --enable-libopenjpeg --enable-libopenmpt --enable-libopus --enable-libpulse --enable-librubberband --enable-libshine --enable-libsnappy --enable-libsoxr --enable-libspeex --enable-libssh --enable-libtheora --enable-libtwolame --enable-libvorbis --enable-libvpx --enable-libwavpack --enable-libwebp --enable-libx265 --enable-libxvid --enable-libzmq --enable-libzvbi --enable-omx-rpi --enable-mmal --enable-openal --enable-opengl --enable-sdl2 --enable-libdc1394 --enable-libiec61883 --arch=armhf --enable-chromaprint --enable-frei0r --enable-libopencv --enable-libx264 --enable-shared\nlibavutil 55. 34.101 / 55. 34.101\nlibavcodec 57. 64.101 / 57. 64.101\nlibavformat 57. 56.101 / 57. 56.101\nlibavdevice 57. 1.100 / 57. 1.100\nlibavfilter 6. 65.100 / 6. 65.100\nlibavresample 3. 1. 0 / 3. 1. 0\nlibswscale 4. 2.100 / 4. 2.100\nlibswresample 2. 3.100 / 2. 3.100\nlibpostproc 54. 1.100 / 54. 1.100\n\n=== uv4l\nUserspace Video4Linux\nCopyright (C) Luca Risolia \nVersion 1.9.16 built on Oct 6 2018\n</code></pre>"},{"location":"troubleshooting/#version-check-using-the-rest-interface","title":"Version check using the rest interface","text":"<p>With a PiE server running, browse to this url:</p> <pre><code>http://[IP]:5010/version\n</code></pre>"},{"location":"troubleshooting/#version-check-from-the-command-line","title":"Version check from the command line","text":"<pre><code>cd ~/pie\nsource pie_env/bin/activate # activate the Python3 virtual environment\npython version_check.py # run version check\n</code></pre>"},{"location":"troubleshooting/#other-versions-to-check","title":"Other versions to check","text":"<pre><code>cat /etc/os-release\n</code></pre> <pre><code># returns\nPRETTY_NAME=\"Raspbian GNU/Linux 9 (stretch)\"\nNAME=\"Raspbian GNU/Linux\"\nVERSION_ID=\"9\"\nVERSION=\"9 (stretch)\"\nID=raspbian\nID_LIKE=debian\n</code></pre> <pre><code>uname -a\n</code></pre> <pre><code># returns\nLinux pi15 4.14.52-v7+ #1123 SMP Wed Jun 27 17:35:49 BST 2018 armv7l GNU/Linux\n</code></pre>"},{"location":"video-annotate/","title":"Video Annotate","text":"<p>Video annotate is a desktop application that provides a simple to use point and click interface to annotatate behavioral events in video files.</p> <p>The current documentation with screenshots can be found here.</p> <p>This is in its own Github repository named Pie-Analysis</p>"},{"location":"video-annotate/#directions-for-using-videoannotate-for-behavior-scoring","title":"Directions for Using VideoAnnotate for Behavior Scoring:","text":"<ol> <li>Open VideoAnnotate and under File, select the folder with the video files to be analyzed. </li> <li>Click \u201cgenerate chunks\u201d. </li> <li>Change the piece duration (if chunks need to be selected evenly across the video file), duration of the chunks, and number of chunks per file.</li> <li>Navigate to the folder on the hard drive, duplicate the chunks file and name the copy \u201crandomChunks.txt\u201d</li> <li>Quit VideoAnnotate and relaunch the application.</li> <li>Select the relevant folder of videos and under the Window menu, see that \u201cBlind Interface\u201d is selected. </li> <li>The chunks will appear starting at 0/1234 (1234 will be the total number of chunks across the entire folder you selected). </li> <li>Use the space bar to play the chunk #0, and at the occurrence of a behavior of interest, press the computer key 1-9 corresponding to the specific behavior being scored. </li> <li>Click the arrow for Next Chunk and continue doing so until scoring is complete.</li> <li>If duration of behaviors is needed, click the number corresponding to the specific behavior and use the \u201cf\u201d and \u201cl\u201d keys to set the duration of the first and last frames during which the behavior occurs. </li> <li>When scoring is complete, VideoAnnotate will have written csv files into the folder containing the video files. Each csv can be read into excel, R, MatLab, or whatever the user\u2019s choice of analysis software may be. </li> </ol>"},{"location":"web-interface/","title":"Web Interface","text":"<p>When the PiE sever is running, the web interface is accesible at <code>http:/[IP]:5010</code> where [IP] is the IP address of the Pi.</p> <p></p> <p>The top row displays the Pi hostname, IP, and current date and time. When the PiE server is running, the time will be updated each second. In addition, there are links to recorded video files, PiE server logs, environmental sensors, and the full source code and documentation on Github.</p> <p>The 'Start Recording' and 'Start Trial' buttons start video recording to a file. All files are saved in the <code>/video</code> folder. At the end of each video file recording, a trial file is also saved. Trial files are plain text files with a record of 'events' that occurred during the video recording. See the trial file readme for more information.</p> <p>White and IR Switches. Will turn White and IR lights on and off. This assumes white and IR leds for the PiE server have been wired correctly to the Raspberry Pi. Both white and IR LEDs cannot be controlled when 'Configure - Auto Lights' is on.</p> <p>ID and Condition. These will be pre-pended to all saved file names. Leave them blank and nothing will be added. This is useful to organize your saved files with an animal ID and condition.</p> <p>Start Recording. Will start a video recording following 'Repeat Forever', 'Number of Repeats' and 'Repeat Duration'. These parameters can be set and saved in the Configure section. </p> <p>Start Streaming. Will start streaming the camera to the web page. If the stream fails to start the first time, try turning it off and then on again. If it still does not work, refresh the page in the browser.</p> <p>Arm. When checked, the PiE server will wait for an input trigger to start video recording. Arming is only available when 'Configure - Allow Arming' is on. Turning 'Arm' on will force 'Repeat Forever' off and 'Number of Repeats' to 1. When 'Arm' is on and an input trigger is received, video recording begins and a pre-trigger video recording will be saved. The duration of the pre-trigger video is set in 'Configure - Pre Trigger Buffer (sec)'.</p> <p>Last Action. Is updated with the last action the PiE server took. This is normally updated in response to clicking interface buttons.</p> <p></p>"},{"location":"web-interface/#configure","title":"Configure","text":"<p>The Configure section allows parameters of the PiE server to be set. Current parameters can be saved with 'Save Defaults' and will automatically be loaded the next time the PiE server is run. Make sure you save your changes with 'Save Defaults'.</p> <p>Repeat Forever. When checked, 'Start Recording' will record videos of 'Repeat Duration' over and over until 'Stop Recording' is pressed. When 'Arm' is on, this will be turned off.</p> <p>Number of Repeats. The number of video files to record when 'Start Recording' is pressed. Each video file will have a duration set by 'Repeat Duration Sec)'. When 'Arm' is on, this will be set to 1.</p> <p>Repeat Duration (sec). The length of each video file in seconds.</p> <p>Auto Lights. When checked, the White and IR lights will be turned on and off to simulate daytime and nighttime. The white light will be on between sunrise and sunset, the IR light will be on otherwise.</p> <p>Sunrise (hour) and Sunset (hour). When 'Auto Lights' is on, the White and IR lights will be turned on and off to simulate daytime and nighttime.</p> <p>FPS. Specifies the frames-per-second (FPS) or recorded video. Minimum is 1 and maximum is 90.</p> <p>Resolution. Specifies the resolution of recorded video.</p> <p>Stream Resolution. Specifies the resolution of streaming video.</p> <p>Capture Still and Still Interval (Sec). If on, still images will be captured at 'Still Interval (Sec)'. These still images can be viewed in real-time in the 'Last Still Image' section.</p> <p>Pre Trigger Buffer (sec). Used for 'Armed' recording. Specifies the duration of video recording before an input trigger.</p> <p>Video Annotation and Annotation Font Size. Annotate text on top of video recording. Select one of: none, date, time, date time, elapsed, or video frame.</p> <p>Include Hostname. If checked, the hostname will be pre-pended to each saved video file.</p> <p>Trial Number. Allows the trial number to be manually set. The trial number is always automatically incremented each time 'Start Recording' or 'Start Trial' are initiated.</p> <p>Allow Arming. If on, will activate the 'Arm' interface. This assumes the PiE server has been wired to a 'trigger in' and optionally a microscope 'frame clock'.</p> <p>Use Serial. If on, will activate the 'Motor' interface. This assumes a Teensy microcontroller is attached via usb.</p> <p>Load. Buttons to load presets of configuration parameters. This includes 'Defaults',  the last configuration saved with 'Save Defaults' as well as pre-defined configuration parameters. It is easy to set your own configuration parameters and use 'Save Defaults' exclusively.</p> <ul> <li>Defaults. Load the last configuration saved with 'Save Defaults'. These are also loaded when the PiE server is first run.</li> <li>Homecage. Auto lights on, arm off, serial off.</li> <li>Scope. Arm on, serial off.</li> <li>Treadmill. Arm on, serial on.</li> <li>User. Only for advanced users. User specified configuration file. </li> <li>Factory Defaults.  Reset the PiE server to its factory default configuration.</li> </ul> <p></p>"},{"location":"web-interface/#pins","title":"Pins","text":"<p>The Pins section allows GPIO pin parameters to be specified. All parameters in the 'Pins' section will be save with 'Configure - Save Defaults'. Each pin can be independenlty enabled/disabled, please disable pins you are not using.</p> <p>Input Pins. The <code>triggerIn</code> and <code>frame</code> pins are used during armed recording and their parameters need to be set to match the signals coming off your particular hardware/scope. For example, if your scope outputs a <code>rising</code> trigger then <code>triggerIn</code> should be set to Polarity <code>rising</code> and Pull Up/Down to <code>down</code>.</p> <p>Output Pins. The <code>triggerOut</code> pin is set at the start of armed recording and can be used to trigger external devices when the PiE server is used as a slave. The <code>whiteLED</code> and <code>irLED</code> pins are turned on/off when the white and IR toggles switches are set in the main web interface.</p> <p>To change 'Pin' numbers, the configuration json files need to be manually edited. These can be found in pie_app/config folder.</p> <p>DHT Temperature/Humidity. This assumes you have installed the Adafruit DHT temperature sensor driver with <code>./install-dht</code>. If 'enabled' is checked, temperature and humidity will be logged to a trial file during video recording at the specified 'interval (sec)'. If 'continuous' is checked, temperature and humidity readings will still be looged to a trial file during video recording but will also be continuosly logged at the specified 'interval (sec)' wether video is recording or not. The continuous log can be accessed on a separate page, named environment, using the thermometer icon. The temperature and humidity log file is in <code>video/logs/environment.log</code>. If you change these options and they do not take effect, try restarting the PiE server in the web interface 'Debug' section.</p> <p></p>"},{"location":"web-interface/#motor","title":"Motor","text":"<p>The Motor section allows parameters to be uploaded to a Teensy microcontroller. This is only for advanced users. Activate this section by turning on 'Configure - Use Serial'.</p>"},{"location":"web-interface/#debug","title":"Debug","text":"<p>This section reports all parameters received from the PiE server. Use 'Restart Pie Server' to restart the PiE server. Note, this restarts the PiE server software, it does not reboot the machine.</p>"},{"location":"wiring-behavior-box/","title":"Wiring a behavior box","text":"<p>Wiring a behavior box is fairly simple. The Pi needs to be wired to one end of a relay/switch, the other end of the relay/switch is wired to 12V DC, IR and white LEDs, and the temperature/humidity sensor is wired to the Pi.</p>"},{"location":"wiring-behavior-box/#raspberry-pi-23-pin-out","title":"Raspberry Pi 2/3 pin out","text":"<p>There are multiple power and ground pins, use these to connect to the relay switch and the temperature sensor. Conceptually, all the ground pins are the same, you can use a bread-board if you run out of ground pins or the wiring becomes too tangled.</p>"},{"location":"wiring-behavior-box/#wiring-the-camera","title":"Wiring the camera","text":"<p>The Raspberry Pi NoIR camera (and the normal Pi camera) is connected to the Pi with a flat [ribbon cable][flat-camera-cable]. The length should not exceed 2 meters. The cable should have one side with a blue tab (one on each end). When connecting the cable to the camera and the Pi, the direction of the blue tab matters. If it is backwards, the camera will not function.</p> <ul> <li>The blue side of the cable must go towards the back of the camera.</li> <li>The blue side of the cable must go towards the ethernet and USB ports.</li> </ul> <p>Finally, the camera must be activated from the command line using <code>sudo raspi-config</code> and choosing '5 Interface Options' then 'P1 Camera' and answering 'Yes'.</p>"},{"location":"wiring-behavior-box/#wiring-diagram","title":"Wiring diagram","text":""},{"location":"wiring-behavior-box/#lights","title":"Lights","text":"<p>Use an external 12V AC/DC power supply. - Don't power the lights directly from the 5V pins on the Pi, the Pi does not have enough current. A &gt;1 Amp 12V adapter should be fine. Don't worry, if it is under-powered, the LED lights will be a little dim.</p> <p>Use a relay switch. - Never connect the 12V adapter directly to the Pi, instead use a relay switch. Only work with DC current coming out of the AC/DC adapter, DO NOT work with AC power coming from the wall as it can kill you.</p> <p>The relay switch effectively separates the 5V, Ground, and GPIO on the Pi (left half of the relay) from the 12V power of the AC/DC adapter and the lights (right half of the relay). Here we will wire the system with the white LED on channel 1 and the IR LED on channel 2 of the relay switch. </p> <p>All LEDs need resistors. - All LEDs need a resistor, these are called 'current limiting resistor'. If you directly connect an LED to power and ground without a resistor, you will burn the LED.</p> <p>The value of the resistor (in Ohms) needs to be calculated using Ohms law, V=I*R. Where:</p> <ul> <li>V (Volts) is determined by the power source</li> <li>I (Amps) depends on the properties of each LED and if they are wired in series or in parallel</li> <li>R (Ohms) is what needs to be calculated.</li> </ul> <p>Follow this tutorial to get started calculating the required resistor value. </p> <p>Use IR LEDs &lt;900 nm. - These are within the sensitivity range of the Pi NoIR camera. A lot of IR LEDs are 940nm, these are not well suited for use with the Pi NoIR camera but are designed for IR sensors as is used in a TV remote.</p>"},{"location":"wiring-behavior-box/#wiring-the-lights","title":"Wiring the lights","text":""},{"location":"wiring-behavior-box/#connect-a-12v-acdc-adapter-ir-and-white-lights-to-the-two-channel-relay-switch","title":"Connect a 12V AC/DC adapter, IR, and white lights to the two-channel relay switch.","text":"<ul> <li> <p>Using a 12V AC/DC adapter (&gt;1 Amp), cut the wire and stick the positive 'hot' wire into the center 'common' pin' of channel 1 on the relay switch. The 'hot' end wire usually has a white line down the length of the wire. You can also determine the 'hot' end using a multi-meter, it is the one that gives a positive (+) voltage when attached to the positive (normally red) end of the multi-meter.</p> </li> <li> <p>Cut a bit of wire and connect the center 'common pin' of channel 1 to the center 'common pin' of channel 2. This is the 'hot' end.</p> </li> <li> <p>Stick the positive end of the white LED into the 'normally closed' port of channel 1. Attach the negative end of the white LED to the 'ground' wire of the 12V AC/DC adapter. Remember, all LEDs need resistors!</p> </li> <li> <p>Do the same for the IR LED. Stick the positive end into the 'normally closed' port of channel 2 on the relay switch. Attach the negative end of the IR LED to the 'ground' wire of the 12V AC/DC adapter. Remember, all LEDs need resistors!</p> </li> <li> <p>Tie the three grounds together, this includes the ground from the 12V AC/DC adapter, the white LEDs and the IR LEDs.</p> </li> </ul>"},{"location":"wiring-behavior-box/#connect-the-pi-to-the-relay-switch-switch","title":"Connect the Pi to the relay switch switch","text":"<p>Connect 4 wires from the Pi to the relay switch. All these wires go on the opposite end from the 12V wires. Look at your relay switch for the correct connects, they are usually clearly labelled but can be in a different order from the image shown.</p> <ul> <li>Connect a GPIO pin from the Pi to the 'In1=Digital Input' pin on the relay switch.</li> <li>Connect a second GPIO pin from the Pi to the 'In2=Digital Input' pin on the relay switch.</li> <li>Connect a 5V pin from the Pi to the 'Vcc' pin on the relay switch.</li> <li>Connect a ground pin from the Pi to the 'GND' pin on the relay switch.</li> </ul>"},{"location":"wiring-behavior-box/#wiring-a-temperature-and-humidity-sensor","title":"Wiring a temperature and humidity sensor","text":"<p>The PiE server can log temperature and humidity using the DHT line of temperature sensors. To use these sensors, the Adafruit Python sensor library needs to to be installed.</p> <pre><code>cd ~/pie\n./install-dht\n</code></pre> <p>There are additional troubleshooting tips in the pie/testing/ folder.</p> <p></p>"},{"location":"wiring-behavior-box/#am2302","title":"AM2302","text":"<p>Red is power, black is ground, and yellow is data.</p> <ul> <li>Connect a 5V pin from the Pi to the red wire on the sensor.</li> <li>Connect a ground pin from the Pi to the back wire on the sensor.</li> <li>Connect a GPIO pin from the Pi to the yellow (data) pin on the sensor.</li> </ul> <p></p>"},{"location":"wiring-behavior-box/#dht22","title":"DHT22","text":"<ul> <li>Connect a 5V pin from the Pi to the 'VCC' pin on the sensor.</li> <li>Connect a ground pin from the Pi to the 'GND' pin on the sensor.</li> <li>Connect a GPIO pin from the Pi to the 'DATA' pin on the sensor.</li> </ul>"},{"location":"wiring-scope/","title":"Wiring a scope","text":"<p>This is a tutorial for wiring tactile-push-buttons to trigger a <code>frame</code> and a <code>trigger-in</code> in a PiE server.</p> <p>This tutorial requires:</p> <ul> <li>A breadboard.</li> <li>Some jumper wires.</li> <li>Two tactile push buttons.</li> <li>A functioning Raspberry Pi.</li> <li>A PiE server to be installed.</li> </ul>"},{"location":"wiring-scope/#raspberry-pi-3-pin-out","title":"Raspberry Pi 3 pin out","text":"<p>Here is a schematic of the Raspberry Pi 2/3 pin outs. Red is 5V, orange is 3.3V, yellow are GPIO, black are Ground, and white should not be used.</p> <p></p> <p>Important: The Raspberry Pi GPIO pins are not 5V tolerant. Never connect a 5V line to a Raspberry GPIO pin.</p>"},{"location":"wiring-scope/#1-test-the-pie-server-frame-pin-with-a-tactile-button-switch","title":"1) Test the PiE server 'frame' pin with a tactile-button-switch","text":"<p>Here, we will wire a tactile-button-switch to the the Raspberry Pi 3.3V line and the PiE <code>frame</code> pin (GPIO 18) to test that pushing the button registers a <code>frame</code> in the PiE server. This button will normally sit at <code>LOW</code> and take on a '3.3V ' level when pushed.</p> <ul> <li> <p>1) Wire the Raspberry Pi 3.3V pin to the '+' rail on a breadboard (red).</p> </li> <li> <p>2) Insert a Tactile-button-switch on the breadboard.</p> </li> <li> <p>3) Connect the top-left pin of the Tactile-button-switch to the '+' rail on the breadboard (red).</p> </li> <li>4) Connect the top-right pin of the Tactile-button-switch to the Raspberry Pi <code>GPIO 23</code>.</li> <li>5) The remaining bottom-left and bottom-right pins on the tactile-button-switch should not be connected to anything.</li> </ul> <p>Make sure the PiE server is running with <code>./pie run</code> so we can see the output in the terminal.</p> <pre><code>cd ~/pie\n./pie stop # stop any background PiE servers\n./pie run # run the PiE server on the command line\n</code></pre> <p>In the 'Pins' section, configure the triggerIn pin to Polarity 'rising' and Pull Up/Down to 'down'. Do the same for the 'frame' pin.</p> <p></p> <p>Make sure 'Allow arming' is checked in the Configure section.</p> <p>Push the <code>frame</code> tactile-button-switch and you should see see something like this on the command line:</p> <pre><code>!!! received frame when not running\n</code></pre>"},{"location":"wiring-scope/#if-you-do-see-this","title":"If you do see this","text":"<p>Good. Your <code>frame</code> pin is working.</p>"},{"location":"wiring-scope/#if-you-do-not-see-this","title":"If you do not see this","text":"<p>STOP your <code>frame</code> pin is not working. Please check your wiring and try again.</p>"},{"location":"wiring-scope/#2-test-the-pie-server-trigger-in-pin-with-a-tactile-button-switch","title":"2) Test the PiE server 'trigger-in' pin with a tactile-button-switch","text":"<p>Here, we will wire a tactile-button-switch to the Raspberry Pi 3.3V line and the PiE 'triggerIn' pin (GPIO 23) to test that pushing the button starts a 'trial' in the PiE server. This push-button will normally sit at <code>LOW</code> and take on a '3.3V' level when pushed.</p> <ul> <li> <p>1) Wire the Raspberry Pi 3.3V pin to the '+' rail on a breadboard (red).</p> </li> <li> <p>2) Insert a Tactile-button-switch on the breadboard.</p> </li> <li> <p>3) Connect the top-left pin of the Tactile-button-switch to the '+' rail on the breadboard (red).</p> </li> <li>4) Connect the top-right pin of the Tactile-button-switch to the Raspberry Pi <code>GPIO 24</code>.</li> <li>5) The remaining bottom-left and bottom-right pins on the tactile-button-switch should not be connected to anything.</li> </ul> <p>Make sure the PiE server is running with <code>./pie run</code> so we can see the output in the terminal.</p> <pre><code>cd ~/pie\n./pie stop # stop any background PiE servers\n./pie run # run the PiE server on the command line\n</code></pre> <p>Make sure 'Allow arming' is checked in the Configure section.</p> <p>Push the <code>trigger-in</code> tactile-button-switch and you should see something like this on the command line:</p> <pre><code>!!! received triggerIn_Callback() when camera is NOT armed\n</code></pre>"},{"location":"wiring-scope/#if-you-do-see-this_1","title":"If you do see this","text":"<p>Good. Your <code>trigger-in</code> pin is working.</p>"},{"location":"wiring-scope/#if-you-do-not-see-this_1","title":"If you do not see this","text":"<p>STOP your <code>trigger-in</code> pin is not working. Please check your wiring and try again.</p>"},{"location":"wiring-scope/#once-your-trigger-in-pin-and-tactile-button-switch-are-working","title":"Once your trigger-in pin and tactile-button-switch are working","text":"<p>Go into the web interface and <code>arm</code> the recording with the arm checkbox.</p> <p>Push the <code>trigger-in</code> tactile-button-switch and video should start recording and you should see this in the command prompt:</p> <pre><code>[2018-07-09 08:48:26,556] {bTrial.py startTrial:702} DEBUG - startTrial startArmVideo=True\n[2018-07-09 08:48:26,559] {bTrial.py startTrial:721} INFO - triggerOut pin:15 value:True\n</code></pre> <p>Then, while the recording is still going, push the <code>frame</code> tactile-button-switch and you should see</p> <pre><code>[2018-07-09 08:49:08,884] {bTrial.py eventIn_Callback:614} DEBUG - eventIn_Callback() frame 1\n[2018-07-09 08:49:09,027] {bTrial.py eventIn_Callback:614} DEBUG - eventIn_Callback() frame 2\n[2018-07-09 08:49:09,312] {bTrial.py eventIn_Callback:614} DEBUG - eventIn_Callback() frame 3\n</code></pre> <p>Once you done this for awhile, click the disk icon in the top tool-bar and view your videos and trial .txt files. Your videos should be watermarked with frame numbers and the .txt file should log the frame times. You will see two video files per trial, a before and after video. The after video is started when a trial is started, the before video is a 'pre-trigger' video whose length is set with 'Pre Trigger Buffer (sec)'. </p>"},{"location":"wiring-scope/#3-connecting-triggerin-triggerout-and-frame-pins-to-a-scope","title":"3) Connecting triggerIn, triggerOut, and frame pins to a scope.","text":"<p>Following the same logic, we can connect the Raspberry Pi <code>triggerIn</code> to the 'Scope Trigger Out', the Raspberry <code>triggerOut</code> to the 'scope Trigger In', and the Raspberry Pi <code>frame</code> in pin to the 'Scope Frame Out'. Keep in mind that the definition of 'in' versus 'out' is with respect to the device you are talking about.</p> <p>Important: The Raspberry Pi GPIO pins are not 5V tolerant. Never connect a 5V line to a Raspberry GPIO pin. We use a level-shifter to convert high voltage 5V to 3V.</p> <p>If your scope sends a rising <code>high</code> pulse for 'trigger out' and 'frame out' you can follow steps #1 and #2 above. If your scope sends a falling <code>low</code> pulse for either of these, you need to configure the 'pins' section of the web interface as polarity <code>falling</code> and Pull Up/Down as <code>up</code>.</p>"},{"location":"wiring-scope/#raspberry-pi-as-the-master-scope-is-slave","title":"Raspberry Pi as the master (Scope is slave)","text":"<p>To have the PiE server trigger your scope (Raspberry Pi is master), use the Raspberry <code>triggerOut</code> pin. In the web interface, if the 'Default Setting' for the <code>triggerOut</code> pin is set to 'false' then the PiE server will hold this pin <code>LOW</code> and send a 'positive' <code>HIGH</code> pulse when you click 'Start Trial'. The opposite is also true, if the 'Default Setting' for the <code>triggerOut</code> pin is set to 'true', the PiE server will hold this pin <code>HIGH</code> and send a <code>LOW</code> pulse when you click 'Start Trial'. You need to figure out what signal your scope is expecting for a trigger, it is either <code>HIGH</code> or <code>LOW</code>.</p>"},{"location":"wiring-scope/#raspberry-pi-as-the-slave-scope-is-master","title":"Raspberry Pi as the slave (Scope is master)","text":"<p>To have your scope trigger the PiE server (Scope is master), use the Raspberry <code>triggerIn</code> pin. In the web interface you 'arm' the Raspberry to 'wait for trigger' using the 'arm' checkbox.</p>"},{"location":"wiring-scope/#troubleshooting","title":"Troubleshooting","text":"<p>If you run into trouble it is best to independently test each component of the system. In this case, you would use a volt-meter to test the signals coming off your scope are what you expect.</p>"},{"location":"wiring-scope/#wiring-diagram","title":"Wiring diagram","text":""},{"location":"wiring-treadmill/","title":"Wiring a treadmill","text":""},{"location":"wiring-treadmill/#overview","title":"Overview","text":"<p>The treadmill stepper motor is controlled with a motor controller which is controlled by a Teensy. The Teensy is attached to the Pi via USB and code is uploaded using the command line program platformio. Once the code is running on the Teensy, the PiE server (in pie/pie_app/bTrial.py) uses a serial connection to set treadmill motor parameters. The Teensy logs all events within a trial to memory. At the end of a trial, the PiE server (again in pie/pie_app/bTrial.py) downloads all the events and saves them to a file.</p> <p>The Teensy code is in pie/platformio/treadmill/src/treadmill2.cpp. </p>"},{"location":"wiring-treadmill/#attaching-a-teensy-to-the-raspberry-pi","title":"Attaching a Teensy to the Raspberry Pi","text":"<p>Attach a Teensy microcontroller to the Pi using a USB cable. Code is uploaded using a command line program called platformio. For how to do this, please refer to the pie/platformio readme. </p>"},{"location":"wiring-treadmill/#parts","title":"Parts","text":"<p>See the main parts page, scroll down to the treadmill section.</p>"},{"location":"wiring-treadmill/#wiring","title":"Wiring","text":"<p>This is a full wiring diagram for microscope triggered video recording and using a Teensy and motor controller with a motorized treadmill. This wiring diagram is made with Fritzing, download the original pie.fzz file if you like.</p> <p>There are lots of connections here, they can be conceptualized as 4 different subsystems.</p> <ol> <li>Wiring the Teensy  to <code>Scope Trigger In</code>, <code>Scope Trigger Out</code>, and <code>Scope Frame out</code>.</li> <li>Wiring the Teensy to the Raspberry Pi</li> <li>Wiring the stepper motor to the motor controller.</li> <li>Wiring the motor controller to the Teensy</li> </ol> <p></p>"},{"location":"wiring-treadmill/#important","title":"Important","text":"<ul> <li> <p>The Raspberry Pi is NOT 5V tolerant. Connecting standard lab equipment using 5V TTL pulses can damage the Pi. These 5V lines can be converted to 3V with a dedicated level shifter. Or, if you are using a Teensy, these 5V lines can pass through the Teensy which IS 5V tolerant but then outputs 3V which can go into the Raspberry Pi. In this way, the Teensy can act as a programmable level shifter.</p> </li> <li> <p>The Easy Driver Motor Driver has a nasty feature. If you connect the 12V line to the board, the Stepper motor must be plugged in or else you will fry the driver board. Thus, check the stepper motor is connected before plugging in the 12V line and check the 12V line is not plugged in before disconnecting the stepper motor.</p> </li> </ul>"},{"location":"wiring-treadmill/#pin-table","title":"Pin table","text":"<p>Download this pdf for a table of all pin connections between the Raspberry, motor controller, and Teensy.</p>"},{"location":"wiring-treadmill/#serial-interface","title":"Serial interface","text":"<p>The treadmill2.cpp code sets up serial communication at 115200 baud.</p> <p>All serial commands are a single line and must end in a carriage return (ascii 13). If a serial command is not understood by the treadmill code, it will return 'treadmill did not handle serial: ...'.</p> Command Actions Returns h Help A list of commands v Get version Version p Get state The state of all parameters as name=value pairs d Dump Trial All events that occurred during the last trial, one line per event. Each event contains a comma separated list of (timestamp, event name, value). start Start Trial None stop Stop Trial None set,name,value Set a parameter (name) to a value (value). See table below. name=value <p>The command to 'set' a parameter (name) to a value (value) takes the following parameter 'names'. If a 'set' command is not understood, 'SetValue() did not handle ...' is returned.</p> name meaning possible values numEpoch Number of epochs Unsigned Integer epochDur Epoch duration (ms) Unsigned Integer preDur Pre duration (ms). Specifies a duration before all epochs. Unsigned Integer postDur Post duration (ms). Specifies a duation after all epochs. Unsigned Integer useMotor Use the motor during a trial String in (\"motorOn\", \"\") motorDel Delay before turning the motor in an epoch (ms) Unsigned Integer motorDur Duration to turn the motor in an epoch (ms) Unsigned Integer motorSpeed Speed to turn the motor(au) Unsigned Integer, 100...700 from slow to fast. arm Arm the treadmill to start a trial in response to changes in startTrialPin pin String in (\"True\", \"False\") duringPulse What to do with motor during motorDur String in (\"Rotate\", \"Locked\", \"Free\") betweenPulse What to do with motor outside of motor dur String in (\"Locked\", \"Free\") <p>Some examples, </p> <ul> <li>To set the number of epochs to 5, use <code>set,numEpoch,5</code>.</li> <li>To arm the treadmill, use <code>set,arm,True</code></li> <li>To have the treadmill free to turn between pulses, use <code>set,betweenPulse,Free</code></li> </ul>"},{"location":"wiring-treadmill/#using-the-serial-interface-on-the-command-line","title":"Using the serial interface on the command line","text":"<p>A simple yet esoteric command line program called <code>screen</code> can be used to establish a serial connection with an Arduino/Teensy on the command line.</p> <p>Install <code>screen</code></p> <pre><code>sudo apt-get install screen\n</code></pre> <p>Use <code>screen</code> to connect to serial port. This assumes your Arduino/Teensy is at <code>/dev/ttyACM0</code>.</p> <pre><code>screen /dev/ttyACM0 115200\n</code></pre> <p>Enter some serial commands manually</p> <pre><code>h\nv\nset,numEpoch,5\nd\n</code></pre> <p>You might have to hit <code>return</code> to get it going. Quit screen with <code>ctrl+a</code> then type <code>:</code> then type <code>quit</code></p>"}]}