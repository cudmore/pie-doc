{
    "docs": [
        {
            "location": "/", 
            "text": "Raspberry Pi Controlled Experiment (PiE)\n\n\nGetting started\n\n\nFollow the \ninstall\n instruction and then control the PiE server with the \nweb interface\n.\n\n\nBuild Options\n\n\n\n\nVideo recording.\n Use the PiE server to record video. All that is needed is a Raspberry Pi and a Pi camera.\n\n\nBehavior Box\n.\n Use the PiE server to record video, control IR and white lights, and log the temperature/humidity.\n\n\nOn the scope video recording\n.\n Use the PiE server to trigger video recording from a microscope and to log eevents (including microscope frame) to a \nfile\n.\n\n\nFull treadmill system\n.\n Use the PiE server to record synchronized video on a scope (option 3) while controlling a motorized treadmill.\n\n\n\n\nDisclaimer\n\n\nThis repository is a work in progess. It is functioning in my hands and fingers but may not in yours. Please email \nrobert.cudmore [at] gmail.com\n with questions or better yet, open an \nissue\n. If this code is used in any way, please be a good scientist/colleague and give me credit. If you see utility in this system and would like to see it customized for a particular experiment, contact me and we can collaborate.", 
            "title": "Raspberry Pi Controlled Experiment (PiE)"
        }, 
        {
            "location": "/#raspberry-pi-controlled-experiment-pie", 
            "text": "", 
            "title": "Raspberry Pi Controlled Experiment (PiE)"
        }, 
        {
            "location": "/#getting-started", 
            "text": "Follow the  install  instruction and then control the PiE server with the  web interface .", 
            "title": "Getting started"
        }, 
        {
            "location": "/#build-options", 
            "text": "Video recording.  Use the PiE server to record video. All that is needed is a Raspberry Pi and a Pi camera.  Behavior Box .  Use the PiE server to record video, control IR and white lights, and log the temperature/humidity.  On the scope video recording .  Use the PiE server to trigger video recording from a microscope and to log eevents (including microscope frame) to a  file .  Full treadmill system .  Use the PiE server to record synchronized video on a scope (option 3) while controlling a motorized treadmill.", 
            "title": "Build Options"
        }, 
        {
            "location": "/#disclaimer", 
            "text": "This repository is a work in progess. It is functioning in my hands and fingers but may not in yours. Please email  robert.cudmore [at] gmail.com  with questions or better yet, open an  issue . If this code is used in any way, please be a good scientist/colleague and give me credit. If you see utility in this system and would like to see it customized for a particular experiment, contact me and we can collaborate.", 
            "title": "Disclaimer"
        }, 
        {
            "location": "/about/", 
            "text": "The PiE server was designed, coded, and is maintained by \nRobert Cudmore\n.\n\n\nHistory\n\n\nThis project is evolving from 2016 to present. It began as more than three different projects, one for \nvideo recording\n, one for the \nhome-cage/behavior box\n, and another for the \ntreadmill\n. The functionality of all these projects have been merged into the current PiE server.\n\n\nOpen Source\n\n\nThe PiE server only exists because of the massive amount of hard-work, creativity, and expertise that has been put in to creating and maintaining a multiplicity of open-source software projects.\n\n\n\"Genius is one percent inspiration, ninety-nine percent perspiration\"\n   --- \nThomas Edison\n\n\n\"Successful Projects Are The Result Of 99% Hard Work, 1% Innovation\u201d\n   --- \nLinus Torvalds\n\n\nRaspberry Pi\n\n\n\n\nRaspberry Pi Foundation\n - Design, manufacture, and distribute the Raspberry Pi\n\n\nRaspian\n - The operating system that runs on the Raspberry Pi\n\n\nRaspberry GPIO\n - To control and interact with the real world\n\n\nPigpio\n - A more precise deamon based GPIO interface\n\n\nPiCamera\n - Python package to control the Raspberry Pi camera\n\n\n\n\nServer\n\n\n\n\nDebian\n - Operating system\n\n\nNGINX\n - Web server for load balancing, microservices, and API gateways\n\n\nuwsgi\n - Web standard for NGINX to talk to Python\n\n\n\n\nPython\n (back-end)\n\n\n\n\nFlask\n - Web microframework\n\n\nSocketio\n - Bidirectional communication between web browser and Python\n\n\nSciPy\n - Scientific computing ecosystem\n\n\nNumPy\n - Scientific computing for Python\n\n\nPandas\n - Data analysis library\n\n\nMatplotlib\n - Plotting\n\n\nTifffile - General purpose Tiff file library\n\n\nRedis\n - Database\n\n\nCelery\n - Distributed task queue\n\n\n\n\nJavascript\n (front-end)\n\n\n\n\nAngular\n - Superheroic Javascript framework\n\n\nJQuery\n - Fast, small, and feature-rich JavaScript library\n\n\nD3\n - Data driven documents\n\n\nLeaflet\n - Interactive maps\n\n\nPlotly\n - Modern analytics for the data era\n\n\nBootstrap\n - Worlds most popular HTML/CSS/JS Toolkit\n\n\n\n\nContainers\n\n\n\n\nDocker\n - Software containers are the future\n\n\n\n\nProgramming microcontrollers\n\n\n\n\nPlatformIO\n - An open source ecosystem for IoT development\n\n\n\n\nDocumentation\n\n\n\n\nJekyll\n - Static site generator (Main \nMap Manager\n documentation)\n\n\nmkDocs\n - Static site generator (This Website) using the \nMaterial\n theme.\n\n\nSphinx\n - To create documentation (\nPyMapManager API Documentation\n)\n\n\n\n\nDistribution\n\n\n\n\nGit\n - Fast version control\n\n\nGithub\n - Software development platform for online storage/sharing/computation\n\n\nPyPi\n - Python package index for online distribution\n\n\nTravis\n - Test and Deploy with Confidence\n\n\n\n\nOnline help\n\n\n\n\nStack Overflow\n - Where Developers Learn, Share, \n Build", 
            "title": "About"
        }, 
        {
            "location": "/about/#history", 
            "text": "This project is evolving from 2016 to present. It began as more than three different projects, one for  video recording , one for the  home-cage/behavior box , and another for the  treadmill . The functionality of all these projects have been merged into the current PiE server.", 
            "title": "History"
        }, 
        {
            "location": "/about/#open-source", 
            "text": "The PiE server only exists because of the massive amount of hard-work, creativity, and expertise that has been put in to creating and maintaining a multiplicity of open-source software projects.  \"Genius is one percent inspiration, ninety-nine percent perspiration\"\n   ---  Thomas Edison  \"Successful Projects Are The Result Of 99% Hard Work, 1% Innovation\u201d\n   ---  Linus Torvalds", 
            "title": "Open Source"
        }, 
        {
            "location": "/about/#raspberry-pi", 
            "text": "Raspberry Pi Foundation  - Design, manufacture, and distribute the Raspberry Pi  Raspian  - The operating system that runs on the Raspberry Pi  Raspberry GPIO  - To control and interact with the real world  Pigpio  - A more precise deamon based GPIO interface  PiCamera  - Python package to control the Raspberry Pi camera", 
            "title": "Raspberry Pi"
        }, 
        {
            "location": "/about/#server", 
            "text": "Debian  - Operating system  NGINX  - Web server for load balancing, microservices, and API gateways  uwsgi  - Web standard for NGINX to talk to Python", 
            "title": "Server"
        }, 
        {
            "location": "/about/#python-back-end", 
            "text": "Flask  - Web microframework  Socketio  - Bidirectional communication between web browser and Python  SciPy  - Scientific computing ecosystem  NumPy  - Scientific computing for Python  Pandas  - Data analysis library  Matplotlib  - Plotting  Tifffile - General purpose Tiff file library  Redis  - Database  Celery  - Distributed task queue", 
            "title": "Python (back-end)"
        }, 
        {
            "location": "/about/#javascript-front-end", 
            "text": "Angular  - Superheroic Javascript framework  JQuery  - Fast, small, and feature-rich JavaScript library  D3  - Data driven documents  Leaflet  - Interactive maps  Plotly  - Modern analytics for the data era  Bootstrap  - Worlds most popular HTML/CSS/JS Toolkit", 
            "title": "Javascript (front-end)"
        }, 
        {
            "location": "/about/#containers", 
            "text": "Docker  - Software containers are the future", 
            "title": "Containers"
        }, 
        {
            "location": "/about/#programming-microcontrollers", 
            "text": "PlatformIO  - An open source ecosystem for IoT development", 
            "title": "Programming microcontrollers"
        }, 
        {
            "location": "/about/#documentation", 
            "text": "Jekyll  - Static site generator (Main  Map Manager  documentation)  mkDocs  - Static site generator (This Website) using the  Material  theme.  Sphinx  - To create documentation ( PyMapManager API Documentation )", 
            "title": "Documentation"
        }, 
        {
            "location": "/about/#distribution", 
            "text": "Git  - Fast version control  Github  - Software development platform for online storage/sharing/computation  PyPi  - Python package index for online distribution  Travis  - Test and Deploy with Confidence", 
            "title": "Distribution"
        }, 
        {
            "location": "/about/#online-help", 
            "text": "Stack Overflow  - Where Developers Learn, Share,   Build", 
            "title": "Online help"
        }, 
        {
            "location": "/commander/", 
            "text": "Commander is a web server to control any number of PiE servers running on different computers. The commander can be run on Linux, macOS, and Microsoft windows.\n\n\nRequirements\n\n\nCommander requires Python 3.7.2 or greater.\n\n\nInstall\n\n\nmacOS and Linux\n\n\n# either download\ngit clone https://github.com/cudmore/pie\n\n# or if you do not have git\n# browse to the PiE GitHub repository and manually download the .zip\n# uncompress the .zip and continue\n\n# install\ncd ~/pie/commander\n./install-commander\n\n# run the commander \n./commander run\n\n\n\n\nMicrosoft Windows\n\n\n# either download\ngit clone https://github.com/cudmore/pie\n\n# or if you do not have git\n# browse to the PiE GitHub repository and manually download the .zip\n# uncompress the .zip and continue\n\n# make sure you are suing Python 3.7.2\npython --version\n\n# install\ncd pie\ncd commander_app\npython -m pip install -r requirements.txt\n\n# run the commander\npython commander.py\n\n\n\n\nBrowse\n\n\nOnce installed and running and assuming there are no errors, the commander interface can be browsed at \nhttp://[IP]:8000\n where [IP] is the IP address of your computer.\n\n\nhttp://[IP]:8000\n\n\n\nWhen running locally, use 'localhost' in place of [IP], like this\n\n\nhttp://localhost:8000\n\n\n\nStarting and stopping commander server (Linux only)\n\n\nThe commander server is designed to run in the background and can be controlled using the \n~/pie/commander_app/commander\n command.\n\n\ncd ~/pie/commander_app\n\n./commander start       - start the background commander server\n./commander stop        - stop the backgorund commander server\n./commander restart     - restart the background commander server\n./commander status      - get the status of the background commander server\n./commander enable      - start the background commander server at boot\n./commander disable     - do not start the background commander server at boot\n====================\n./commander run         - run commander on command line\n\n\n\nIf you run into trouble with the commander, run it on the command line to see the output with \n./commander run\n.\n\n\nWeb interface\n\n\nEditing IP addresses\n\n\nIn the config section, turn on 'edit ip' checkbox. Enter a valid IP and hit enter. If the IP is for a running PiE server (no port number needed), the red (bad connection) will be replaced with the current status of the specified PiE server. See 'Server Swarm' below.\n\n\nWarnings and errors\n\n\nWhen a PiE server is connected, the corresponding row in 'Server Swarm' will be filled in and active. When there is a connection error, the first column will appear red and all other controls will be inactive.\n\n\nWhen the drive space remaining goes below 5 GB, the 'File' column will be displayed in red. Currently, there is no interface to set this trip-point, 5 GB is  \nhard-coded\n in the commander index.html. Feel free to change it yourself.\n\n\nServer swarm\n\n\nHere, the commander is controlling 8 PiE servers. Server 3 (hc3) is recording, server 7 has a connection error, and server 8 (hc8) is streaming. Click image to enlarge.\n\n\n\n    \n\n\n\n\nSwarm status\n\n\nThe swarm status is a clearinghouse of information for each PiE server. This includes buttons to restart the PiE server and reboot the raspberry Pi. Click image to enlarge.\n\n\n\n    \n\n\n\n\nVideo wall\n\n\n\n\n\n    \n\n    \n\n        \n\n    \n\n    \n\n\n\n\n\n    \n\n    \n\n        \n\n    \n\n    \n\n\n\n\n\n\n\nCommander sync\n\n\nThe commander sync will sychronize files from any number of PiE servers to the computer running the commander.\n\n\ntodo: ADD IMAGE\n\n\nTroubleshooting\n\n\nRun the commander manually\n\n\n./install-commander\n installs a python virtual env in ~/pie/commander_app/commander_env. The commander server needs to be run in this environment.\n\n\n# activate virtual environment in commander_env\ncd ~/pie/commander_app\nsource commander_env/bin/activate\n\n# command prompt should now start with '(commander_env)'.\n\n# run the commander server manually\npython commander.py", 
            "title": "Commander"
        }, 
        {
            "location": "/commander/#requirements", 
            "text": "Commander requires Python 3.7.2 or greater.", 
            "title": "Requirements"
        }, 
        {
            "location": "/commander/#install", 
            "text": "", 
            "title": "Install"
        }, 
        {
            "location": "/commander/#macos-and-linux", 
            "text": "# either download\ngit clone https://github.com/cudmore/pie\n\n# or if you do not have git\n# browse to the PiE GitHub repository and manually download the .zip\n# uncompress the .zip and continue\n\n# install\ncd ~/pie/commander\n./install-commander\n\n# run the commander \n./commander run", 
            "title": "macOS and Linux"
        }, 
        {
            "location": "/commander/#microsoft-windows", 
            "text": "# either download\ngit clone https://github.com/cudmore/pie\n\n# or if you do not have git\n# browse to the PiE GitHub repository and manually download the .zip\n# uncompress the .zip and continue\n\n# make sure you are suing Python 3.7.2\npython --version\n\n# install\ncd pie\ncd commander_app\npython -m pip install -r requirements.txt\n\n# run the commander\npython commander.py", 
            "title": "Microsoft Windows"
        }, 
        {
            "location": "/commander/#browse", 
            "text": "Once installed and running and assuming there are no errors, the commander interface can be browsed at  http://[IP]:8000  where [IP] is the IP address of your computer.  http://[IP]:8000  When running locally, use 'localhost' in place of [IP], like this  http://localhost:8000", 
            "title": "Browse"
        }, 
        {
            "location": "/commander/#starting-and-stopping-commander-server-linux-only", 
            "text": "The commander server is designed to run in the background and can be controlled using the  ~/pie/commander_app/commander  command.  cd ~/pie/commander_app\n\n./commander start       - start the background commander server\n./commander stop        - stop the backgorund commander server\n./commander restart     - restart the background commander server\n./commander status      - get the status of the background commander server\n./commander enable      - start the background commander server at boot\n./commander disable     - do not start the background commander server at boot\n====================\n./commander run         - run commander on command line  If you run into trouble with the commander, run it on the command line to see the output with  ./commander run .", 
            "title": "Starting and stopping commander server (Linux only)"
        }, 
        {
            "location": "/commander/#web-interface", 
            "text": "", 
            "title": "Web interface"
        }, 
        {
            "location": "/commander/#editing-ip-addresses", 
            "text": "In the config section, turn on 'edit ip' checkbox. Enter a valid IP and hit enter. If the IP is for a running PiE server (no port number needed), the red (bad connection) will be replaced with the current status of the specified PiE server. See 'Server Swarm' below.", 
            "title": "Editing IP addresses"
        }, 
        {
            "location": "/commander/#warnings-and-errors", 
            "text": "When a PiE server is connected, the corresponding row in 'Server Swarm' will be filled in and active. When there is a connection error, the first column will appear red and all other controls will be inactive.  When the drive space remaining goes below 5 GB, the 'File' column will be displayed in red. Currently, there is no interface to set this trip-point, 5 GB is   hard-coded  in the commander index.html. Feel free to change it yourself.", 
            "title": "Warnings and errors"
        }, 
        {
            "location": "/commander/#server-swarm", 
            "text": "Here, the commander is controlling 8 PiE servers. Server 3 (hc3) is recording, server 7 has a connection error, and server 8 (hc8) is streaming. Click image to enlarge.", 
            "title": "Server swarm"
        }, 
        {
            "location": "/commander/#swarm-status", 
            "text": "The swarm status is a clearinghouse of information for each PiE server. This includes buttons to restart the PiE server and reboot the raspberry Pi. Click image to enlarge.", 
            "title": "Swarm status"
        }, 
        {
            "location": "/commander/#video-wall", 
            "text": "", 
            "title": "Video wall"
        }, 
        {
            "location": "/commander/#commander-sync", 
            "text": "The commander sync will sychronize files from any number of PiE servers to the computer running the commander.  todo: ADD IMAGE", 
            "title": "Commander sync"
        }, 
        {
            "location": "/commander/#troubleshooting", 
            "text": "", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/commander/#run-the-commander-manually", 
            "text": "./install-commander  installs a python virtual env in ~/pie/commander_app/commander_env. The commander server needs to be run in this environment.  # activate virtual environment in commander_env\ncd ~/pie/commander_app\nsource commander_env/bin/activate\n\n# command prompt should now start with '(commander_env)'.\n\n# run the commander server manually\npython commander.py", 
            "title": "Run the commander manually"
        }, 
        {
            "location": "/file-server/", 
            "text": "This is a recipe for configuring a Raspberry Pi as a file-server. Once configured as a file-server, files on the Raspberry Pi can be easily opened/edited/copied from a remote computer. This is useful for copying recorded video off the Raspberry Pi to another (remote) computer for archiving and analysis.\n\n\nIf you are working on a Windows machine, you need to use \nSamba\n. If you are working on macOS you want to use \nAFP\n but can also use \nSamba\n.\n\n\nSamba (SMB)\n\n\nThis is a recipe to make a Raspberry Pi a \nSamba\n (SMB) file-server that can be accessed from both Windows and macOS.\n\n\n1) Install Samba\n\n\nsudo apt-get install samba samba-common-bin\n\n\n\n2) Edit \n/etc/samba/smb.conf\n\n\nsudo pico /etc/samba/smb.conf\n\n\n\nWhen using the \npico\n editor, \nctrl+x\n to save and quit, \nctrl+w\n to search, \nctrl+v\n to page down. Remember, the \npico\n editor does not respond to mouse clicks, you need to move the cursor around with arrow keys.\n\n\n3) Add the following to the end of the \nsmb.conf\n file.\n\n\nIn the Pico editor, move the cursor to the end of the file and copy and paste the following.\n\n\n[video]\nComment = Pi video shared folder\nPath = /home/pi/video\nBrowseable = yes\nWriteable = yes\nonly guest = no\ncreate mask = 0777\ndirectory mask = 0777\nPublic = yes\nGuest ok = no\n\n[home]\nComment = Pi shared folder\nPath = /home/pi\nBrowseable = yes\nWriteable = yes\nonly guest = no\ncreate mask = 0777\ndirectory mask = 0777\nPublic = yes\nGuest ok = no\n\n\n\n4) Create a Samba password\n\n\nsudo smbpasswd -a pi\n\n\n\n5) Restart Samba\n\n\nsudo /etc/init.d/samba restart\n\n\n\n6) Test the server from another machine on the network.\n\n\nOn a Windows machine, mount the Raspberry Pi Samba file-server with \nsmb:\\\\[piIP]\n where [piIP] is the IP address of your pi. Do this by clicking the 'Start' menu and then typing \nsmb:\\\\[piIP]\n.\n\n\nApple-File-Protocol (AFP)\n\n\nThis is a recipe to make a Raspberry Pi an \nApple-File-Protocol\n (AFP) file-server that can be accessed from macOS.\n\n\n1) Install netatalk\n\n\nsudo apt-get install netatalk\n\n\n\n\nOnce netatalk is installed, the Raspberry Pi will show up in the macOS Finder 'Shared' section. The Pi can be mounted in the macOS Finder by going to \nGo - Connect To Server...\n and entering \nafp://[piIP]\n where [piIP] is the IP address of your Pi.\n\n\n2) Changing the default name of a Pi in netatalk\n\n\nWhen a Pi is mounted in macOS using AFP, it will mount as \nHome Directory\n. If you have multiple Raspberry Pi computers they all mount with the same 'Home Directory' name which can be confusing. Thus, you want to change the 'mount point' name of each Raspberry Pi. For more information, see \nthis blog post\n to change the name of the mount point from 'Home Directory'. Or just follow along ...\n\n\nStop netatalk\n\n\nsudo /etc/init.d/netatalk stop\n\n\n\n\nEdit the netatalk config file\n\n\nsudo pico /etc/netatalk/AppleVolumes.default\n\n\n\n\nWhen using the \npico\n editor, \nctrl+x\n to save and quit, \nctrl+w\n to search, \nctrl+v\n to page down. Remember, the \npico\n editor does not respond to mouse clicks, you need to move the cursor around with arrow keys.\n\n\nScroll to the bottom of the file and change this one line where 'the_name_you_want' should be the name you want the given Raspberry Pi to mount as. The '#' is used as a comment and is ignored.\n\n\n# By default all users have access to their home directories.\n#~/                     \nHome Directory\n\n~/                      \nthe_name_you_want\n\n\n\n\n\n3) Restart netatalk\n\n\nsudo /etc/init.d/netatalk start\n\n\n\n\n4) Test the server from another machine on the network.\n\n\nIn the macOS Finder, go to \nGo - Connect To Server...\n and enter \nafp://[piIP]\n where [piIP] is the IP address of your Pi.", 
            "title": "File server"
        }, 
        {
            "location": "/file-server/#samba-smb", 
            "text": "This is a recipe to make a Raspberry Pi a  Samba  (SMB) file-server that can be accessed from both Windows and macOS.", 
            "title": "Samba (SMB)"
        }, 
        {
            "location": "/file-server/#1-install-samba", 
            "text": "sudo apt-get install samba samba-common-bin", 
            "title": "1) Install Samba"
        }, 
        {
            "location": "/file-server/#2-edit-etcsambasmbconf", 
            "text": "sudo pico /etc/samba/smb.conf  When using the  pico  editor,  ctrl+x  to save and quit,  ctrl+w  to search,  ctrl+v  to page down. Remember, the  pico  editor does not respond to mouse clicks, you need to move the cursor around with arrow keys.", 
            "title": "2) Edit /etc/samba/smb.conf"
        }, 
        {
            "location": "/file-server/#3-add-the-following-to-the-end-of-the-smbconf-file", 
            "text": "In the Pico editor, move the cursor to the end of the file and copy and paste the following.  [video]\nComment = Pi video shared folder\nPath = /home/pi/video\nBrowseable = yes\nWriteable = yes\nonly guest = no\ncreate mask = 0777\ndirectory mask = 0777\nPublic = yes\nGuest ok = no\n\n[home]\nComment = Pi shared folder\nPath = /home/pi\nBrowseable = yes\nWriteable = yes\nonly guest = no\ncreate mask = 0777\ndirectory mask = 0777\nPublic = yes\nGuest ok = no", 
            "title": "3) Add the following to the end of the smb.conf file."
        }, 
        {
            "location": "/file-server/#4-create-a-samba-password", 
            "text": "sudo smbpasswd -a pi", 
            "title": "4) Create a Samba password"
        }, 
        {
            "location": "/file-server/#5-restart-samba", 
            "text": "sudo /etc/init.d/samba restart", 
            "title": "5) Restart Samba"
        }, 
        {
            "location": "/file-server/#6-test-the-server-from-another-machine-on-the-network", 
            "text": "On a Windows machine, mount the Raspberry Pi Samba file-server with  smb:\\\\[piIP]  where [piIP] is the IP address of your pi. Do this by clicking the 'Start' menu and then typing  smb:\\\\[piIP] .", 
            "title": "6) Test the server from another machine on the network."
        }, 
        {
            "location": "/file-server/#apple-file-protocol-afp", 
            "text": "This is a recipe to make a Raspberry Pi an  Apple-File-Protocol  (AFP) file-server that can be accessed from macOS.", 
            "title": "Apple-File-Protocol (AFP)"
        }, 
        {
            "location": "/file-server/#1-install-netatalk", 
            "text": "sudo apt-get install netatalk  Once netatalk is installed, the Raspberry Pi will show up in the macOS Finder 'Shared' section. The Pi can be mounted in the macOS Finder by going to  Go - Connect To Server...  and entering  afp://[piIP]  where [piIP] is the IP address of your Pi.", 
            "title": "1) Install netatalk"
        }, 
        {
            "location": "/file-server/#2-changing-the-default-name-of-a-pi-in-netatalk", 
            "text": "When a Pi is mounted in macOS using AFP, it will mount as  Home Directory . If you have multiple Raspberry Pi computers they all mount with the same 'Home Directory' name which can be confusing. Thus, you want to change the 'mount point' name of each Raspberry Pi. For more information, see  this blog post  to change the name of the mount point from 'Home Directory'. Or just follow along ...  Stop netatalk  sudo /etc/init.d/netatalk stop  Edit the netatalk config file  sudo pico /etc/netatalk/AppleVolumes.default  When using the  pico  editor,  ctrl+x  to save and quit,  ctrl+w  to search,  ctrl+v  to page down. Remember, the  pico  editor does not respond to mouse clicks, you need to move the cursor around with arrow keys.  Scroll to the bottom of the file and change this one line where 'the_name_you_want' should be the name you want the given Raspberry Pi to mount as. The '#' is used as a comment and is ignored.  # By default all users have access to their home directories.\n#~/                      Home Directory \n~/                       the_name_you_want", 
            "title": "2) Changing the default name of a Pi in netatalk"
        }, 
        {
            "location": "/file-server/#3-restart-netatalk", 
            "text": "sudo /etc/init.d/netatalk start", 
            "title": "3) Restart netatalk"
        }, 
        {
            "location": "/file-server/#4-test-the-server-from-another-machine-on-the-network", 
            "text": "In the macOS Finder, go to  Go - Connect To Server...  and enter  afp://[piIP]  where [piIP] is the IP address of your Pi.", 
            "title": "4) Test the server from another machine on the network."
        }, 
        {
            "location": "/gpio-timing/", 
            "text": "The Raspberry Pi is running a fully functional operating system which provides many features including USB, ethernet, and HDMI. Thus, there will be unpredictable delays in receiving and generating general purpose input and output (GPIO). \n\n\nThe PiE server uses the Raspberry \nGPIO\n python package by default and will use the \npigpio daemon\n if it is installed and running. The GPIO package has a jitter of approximately +/- 2 ms for all DIO with occasional, \n 1%, events having absurd jitter on the order of 100-200 ms. This includes trigger in, frame in, and any output. If you are using the PiE server to record video this should be fine. If you want more precision, either offload your timing critical tasks on a Teensy or use the Raspberry \npigpiod\n daemon.\n\n\nSee the Jupyter notebooks in the \npie/analysis/\n folder for a comparising of frame arrival times using GPIO versus pigpio.\n\n\nDownload and install pigpio\n\n\ncd\nrm pigpio.zip\nsudo rm -rf PIGPIO\nwget abyz.me.uk/rpi/pigpio/pigpio.zip\nunzip pigpio.zip\ncd PIGPIO\nmake\nsudo make install\n\n\n\n\nTo start the pigpio daemon\n\n\nsudo pigpiod\n\n\n\nTo stop the pigpio daemon\n\n\nsudo killall pigpiod", 
            "title": "Gpio timing"
        }, 
        {
            "location": "/gpio-timing/#download-and-install-pigpio", 
            "text": "cd\nrm pigpio.zip\nsudo rm -rf PIGPIO\nwget abyz.me.uk/rpi/pigpio/pigpio.zip\nunzip pigpio.zip\ncd PIGPIO\nmake\nsudo make install", 
            "title": "Download and install pigpio"
        }, 
        {
            "location": "/gpio-timing/#to-start-the-pigpio-daemon", 
            "text": "sudo pigpiod", 
            "title": "To start the pigpio daemon"
        }, 
        {
            "location": "/gpio-timing/#to-stop-the-pigpio-daemon", 
            "text": "sudo killall pigpiod", 
            "title": "To stop the pigpio daemon"
        }, 
        {
            "location": "/images/", 
            "text": "table, td, th {    \n    border: 0px solid #ddd;\n    text-align: left;\n}\n\ntable {\n    border-collapse: collapse;\n    width: 100%;\n}\n\nth, td {\n    padding: 15px;\n}\n\n\n\n\nThe PiE server can be used in different configurations depending on your needs. This includes a behavior box, on the scope video recording, and on the scope video recording with a treadmill.\n\n\nBehavior Box\n\n\nThese are images of the behavior box at different development stages.\n\n\nv0.0\n\n\n\n\n    \n\n\n    \n\n    Overview\n    \n\n    \n\n\n    \n\n    Lights and camera\n    \n\n    \n\n\n    \n\n\n    \n\n\n    \n\n    Rats nest\n    \n\n    \n\n\n    \n\n    \n\n\n    \n\n\n\n\n\n\nv1.0\n\n\nComing soon...\n\n\nOn the scope video recording\n\n\nComing soon ...\n\n\nTreadmill\n\n\n\n\n\n    \n\n    \n\n    \n\n    \n\n    \n\n\n    \n\nDetailed view of circular treadmill including\n\n\n\n\n10\" acrylic disk (top)\n\nActobotics frame (horizontal aluminum arm)\n\nStepper motor (bottom)\n\nRotary encoder (left)\n\nGears to couple the motor and disk to the rotary encoder\n    \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n    \n\n    \n\n\n    \n\n    \n\n    \n\n\n\n\n\n\n\nTreadmill on the scope", 
            "title": "Images"
        }, 
        {
            "location": "/images/#behavior-box", 
            "text": "These are images of the behavior box at different development stages.", 
            "title": "Behavior Box"
        }, 
        {
            "location": "/images/#v00", 
            "text": "Overview\n     \n     \n\n     \n    Lights and camera\n     \n     \n\n     \n\n     \n\n     \n    Rats nest", 
            "title": "v0.0"
        }, 
        {
            "location": "/images/#v10", 
            "text": "Coming soon...", 
            "title": "v1.0"
        }, 
        {
            "location": "/images/#on-the-scope-video-recording", 
            "text": "Coming soon ...", 
            "title": "On the scope video recording"
        }, 
        {
            "location": "/images/#treadmill", 
            "text": "Detailed view of circular treadmill including  10\" acrylic disk (top) Actobotics frame (horizontal aluminum arm) Stepper motor (bottom) Rotary encoder (left) Gears to couple the motor and disk to the rotary encoder", 
            "title": "Treadmill"
        }, 
        {
            "location": "/images/#treadmill-on-the-scope", 
            "text": "", 
            "title": "Treadmill on the scope"
        }, 
        {
            "location": "/implementation-details/", 
            "text": "Once running, the PiE server should be simple to use and only requires interaction with its \nweb interface\n. Yet, for this simple system to work, a number of independent components must each work and must communicate with each other. As is often the case, the details in creating a simple system is complex.\n\n\nWhat follows is a description of the different pieces of the PiE server with links to the source code and the components that are used.\n\n\nRaspberry Pi\n\n\nAt its core, this system requires a functioning Raspberry Pi running the \nRaspbian\n operating system. Because this is an intentionally stripped down system, some things are not installed out of the box like \nmounting a USB drive\n. On the other hand, this is a full-fledged \nDebian Linux\n system so you can activate powerful features such as a \nfile-server\n.\n\n\nBack End\n\n\nWeb server\n\n\n\n\npie_app/treadmill_app.py\n - This code creates the main PiE web server (running on port 5010) using \nFlask\n and is the main starting point to run the PiE server. It acts as a connection between web requests (URLs) and the backend by processing each incoming URL and calling the appropriate backend code in \npie_app/treadmill.py\n.\n\n\n\n\nPython class library\n\n\n\n\n\n\npie_app/treadmill.py\n - Wrapper class around \npie_app/bTrial.py\n to implement specifics of the PiE server beyond what bTrial provides. This mainly includes some logic using web sockets, in particular \nflask-socketio\n, for bi-directional communication from the browser to the backend and from the backend to the browser.\n\n\n\n\n\n\npie_app/bTrial.py\n - Main catch-all class that implements the logic of a trial based experiment. When it is instantiated, it creates a number of background threads to control independent processes including: GPIO pins, the timing of automatic lights, temperature/humidity readings, and serial communication with a Teensy. The use of background threads is important, they are run in parallel to the main code (utilizing the Raspberry Pis 4-core CPU) and allow everything to run smoothly with minimal \nblocking\n. Once running, bTrial receives commands from the web interface in treadmill_app.py to take actions like: changing/loading/saving user configurations, starting/stopping video recording and streaming, setting GPIO pins, and performing serial communication with a Teensy.\n\n\n\n\n\n\npie_app/bCamera.py\n - Code to control a Raspberry Pi camera using the \npiCamera\n Python library. This is where both video recording and streaming with uv4l is started and stopped. This also contains a background thread that uses avconv to convert .h264 video saved by the camera into .mp4.\n\n\n\n\n\n\npie_app/bPins.py\n - Code to control the Raspberry Pi GPIO pins using either \nRPi.GPIO\n or the \npigpio\n daemon. This is where the PiE server can change GPIO pins and where code is triggered when a pin changes from an external source like a microscope.\n\n\n\n\n\n\npie_app/bSerial.py\n - Code to communicate with an Arduino/Teensy microcontroller over a serial connection (via a USB cable). This is basically to get and set parameters as well as starting/stopping a trial on the Teensy. It works as a background thread instantiated by bTrial and then sits silently waiting for commands to be inserted into a queue. This is not used to program the Teensy, that is handled by \nplatformio\n\n\n\n\n\n\npie_app/bUtil.py\n - Implements basic utility functions like fetching the system date/time, determining the amount of drive space remaining, and getting the IP address and hostname.\n\n\n\n\n\n\npie_app/config\n - Text files written in \njson\n that provides human editable configuration options for the server. These json files are loaded when the server starts and are saved when the user saves from the web interface. These json files contain all the configurable options provided by the PiE server, things like the default state of GPIO pins and configurations like the video recording duration and number of repeats.\n\n\n\n\n\n\nFront End\n\n\nThe backend web server in \npie_app/treadmill_app.py\n delivers .html pages which have logic driven by Javascript (.js) and formatted with .css.\n\n\n\n\n\n\npie_app/templates/index.html\n - Main web interface written in \nhtml\n, uses \nJavascript\n and the Javascript \nAngular\n library to provide dynamic and real-time content.\n\n\n\n\n\n\npie_app/static/treadmill.js\n - \nJavascript\n code that implementes the logic of the web interface. Has functions that get called when user is clicking or entering parameter values. Also has function to talk to \ntreadmill_app.py\n web server via a \nREST\n interface. This is not standard Javascript but is using the \nAngular\n library.\n\n\n\n\n\n\npie_app/static/treadmill.css\n - A \nCascading Style Sheet (css)\n text file that describes the precise visual layout of the web pages.\n\n\n\n\n\n\nMiscellaneous - Each webpage served by the PiE server needs a .html file and often uses a Javascript .js file to control the logic of user interaction. This includes \nvideolist.html\n which serves a list of video files saved on the Pi and \nenvironment.html\n along with \nenvironment.js\n which controls the web based plotting of temperature and humidity.\n\n\n\n\n\n\nAdmin server\n\n\nThe \nadmin_app\n contains a second web server (running on port 5011) allowing the main PiE server (running on port 5010) to be restarted and the Raspberry Pi to be rebooted. This is necessary to allow all this to happen from the PiE \nweb interface\n. This admin app is automatically installed when the PiE server is installed with \n./install-pie\n and should not need further tweaking.\n\n\nCommander server\n\n\nThe \ncommander_app\n creates a web interface (running on port 8000) to control any number of PiE servers (on port 5010) running on different Raspberry Pis. The commander server runs completely independent of the PiE server and can be installed on its own dedicated Raspberry Pi or one that is already running the PiE server. See the \ncommander\n documentation for more details.\n\n\nNote..\n In a near future version, the commander will be able to run on any other machine including macOS and Microsoft Windows computers.\n\n\nComponents\n\n\nuv4l\n\n\nThe \nuv4l\n system is used to streaming video from the camera to a web browser. This is a system wide program and is controlled from bCamera using bash script in \npie_app/bin\n.\n\n\navconv\n\n\nThe \navconv\n package (also known as libav) is used to convert .h264 files saved by the camera to .mp4. This is a system wide program and is controlled from bCamera using bash script in \npie_app/bin\n.\n\n\nDHT sensors\n\n\nReadings from AM2302 and DHT22 temperature/humidity sensors requires the Adafruit Python library \nAdafruit_Python_DHT\n. Readings are implemented in a background task in bTrial.\n\n\nDocumentation\n\n\nLast but not least, this website is written in \nmarkdown\n. The markdown and a description of the contents using \nyaml\n are brought together, compiled, and a static site is generated by \nmkdocs\n. The final layout is controlled by an mkdocs theme called \nmaterial\n. All of this is then pushed to \nGithub\n which serves this website fast and reliable.", 
            "title": "Implementation details"
        }, 
        {
            "location": "/implementation-details/#raspberry-pi", 
            "text": "At its core, this system requires a functioning Raspberry Pi running the  Raspbian  operating system. Because this is an intentionally stripped down system, some things are not installed out of the box like  mounting a USB drive . On the other hand, this is a full-fledged  Debian Linux  system so you can activate powerful features such as a  file-server .", 
            "title": "Raspberry Pi"
        }, 
        {
            "location": "/implementation-details/#back-end", 
            "text": "", 
            "title": "Back End"
        }, 
        {
            "location": "/implementation-details/#web-server", 
            "text": "pie_app/treadmill_app.py  - This code creates the main PiE web server (running on port 5010) using  Flask  and is the main starting point to run the PiE server. It acts as a connection between web requests (URLs) and the backend by processing each incoming URL and calling the appropriate backend code in  pie_app/treadmill.py .", 
            "title": "Web server"
        }, 
        {
            "location": "/implementation-details/#python-class-library", 
            "text": "pie_app/treadmill.py  - Wrapper class around  pie_app/bTrial.py  to implement specifics of the PiE server beyond what bTrial provides. This mainly includes some logic using web sockets, in particular  flask-socketio , for bi-directional communication from the browser to the backend and from the backend to the browser.    pie_app/bTrial.py  - Main catch-all class that implements the logic of a trial based experiment. When it is instantiated, it creates a number of background threads to control independent processes including: GPIO pins, the timing of automatic lights, temperature/humidity readings, and serial communication with a Teensy. The use of background threads is important, they are run in parallel to the main code (utilizing the Raspberry Pis 4-core CPU) and allow everything to run smoothly with minimal  blocking . Once running, bTrial receives commands from the web interface in treadmill_app.py to take actions like: changing/loading/saving user configurations, starting/stopping video recording and streaming, setting GPIO pins, and performing serial communication with a Teensy.    pie_app/bCamera.py  - Code to control a Raspberry Pi camera using the  piCamera  Python library. This is where both video recording and streaming with uv4l is started and stopped. This also contains a background thread that uses avconv to convert .h264 video saved by the camera into .mp4.    pie_app/bPins.py  - Code to control the Raspberry Pi GPIO pins using either  RPi.GPIO  or the  pigpio  daemon. This is where the PiE server can change GPIO pins and where code is triggered when a pin changes from an external source like a microscope.    pie_app/bSerial.py  - Code to communicate with an Arduino/Teensy microcontroller over a serial connection (via a USB cable). This is basically to get and set parameters as well as starting/stopping a trial on the Teensy. It works as a background thread instantiated by bTrial and then sits silently waiting for commands to be inserted into a queue. This is not used to program the Teensy, that is handled by  platformio    pie_app/bUtil.py  - Implements basic utility functions like fetching the system date/time, determining the amount of drive space remaining, and getting the IP address and hostname.    pie_app/config  - Text files written in  json  that provides human editable configuration options for the server. These json files are loaded when the server starts and are saved when the user saves from the web interface. These json files contain all the configurable options provided by the PiE server, things like the default state of GPIO pins and configurations like the video recording duration and number of repeats.", 
            "title": "Python class library"
        }, 
        {
            "location": "/implementation-details/#front-end", 
            "text": "The backend web server in  pie_app/treadmill_app.py  delivers .html pages which have logic driven by Javascript (.js) and formatted with .css.    pie_app/templates/index.html  - Main web interface written in  html , uses  Javascript  and the Javascript  Angular  library to provide dynamic and real-time content.    pie_app/static/treadmill.js  -  Javascript  code that implementes the logic of the web interface. Has functions that get called when user is clicking or entering parameter values. Also has function to talk to  treadmill_app.py  web server via a  REST  interface. This is not standard Javascript but is using the  Angular  library.    pie_app/static/treadmill.css  - A  Cascading Style Sheet (css)  text file that describes the precise visual layout of the web pages.    Miscellaneous - Each webpage served by the PiE server needs a .html file and often uses a Javascript .js file to control the logic of user interaction. This includes  videolist.html  which serves a list of video files saved on the Pi and  environment.html  along with  environment.js  which controls the web based plotting of temperature and humidity.", 
            "title": "Front End"
        }, 
        {
            "location": "/implementation-details/#admin-server", 
            "text": "The  admin_app  contains a second web server (running on port 5011) allowing the main PiE server (running on port 5010) to be restarted and the Raspberry Pi to be rebooted. This is necessary to allow all this to happen from the PiE  web interface . This admin app is automatically installed when the PiE server is installed with  ./install-pie  and should not need further tweaking.", 
            "title": "Admin server"
        }, 
        {
            "location": "/implementation-details/#commander-server", 
            "text": "The  commander_app  creates a web interface (running on port 8000) to control any number of PiE servers (on port 5010) running on different Raspberry Pis. The commander server runs completely independent of the PiE server and can be installed on its own dedicated Raspberry Pi or one that is already running the PiE server. See the  commander  documentation for more details.  Note..  In a near future version, the commander will be able to run on any other machine including macOS and Microsoft Windows computers.", 
            "title": "Commander server"
        }, 
        {
            "location": "/implementation-details/#components", 
            "text": "", 
            "title": "Components"
        }, 
        {
            "location": "/implementation-details/#uv4l", 
            "text": "The  uv4l  system is used to streaming video from the camera to a web browser. This is a system wide program and is controlled from bCamera using bash script in  pie_app/bin .", 
            "title": "uv4l"
        }, 
        {
            "location": "/implementation-details/#avconv", 
            "text": "The  avconv  package (also known as libav) is used to convert .h264 files saved by the camera to .mp4. This is a system wide program and is controlled from bCamera using bash script in  pie_app/bin .", 
            "title": "avconv"
        }, 
        {
            "location": "/implementation-details/#dht-sensors", 
            "text": "Readings from AM2302 and DHT22 temperature/humidity sensors requires the Adafruit Python library  Adafruit_Python_DHT . Readings are implemented in a background task in bTrial.", 
            "title": "DHT sensors"
        }, 
        {
            "location": "/implementation-details/#documentation", 
            "text": "Last but not least, this website is written in  markdown . The markdown and a description of the contents using  yaml  are brought together, compiled, and a static site is generated by  mkdocs . The final layout is controlled by an mkdocs theme called  material . All of this is then pushed to  Github  which serves this website fast and reliable.", 
            "title": "Documentation"
        }, 
        {
            "location": "/install/", 
            "text": "Install the PiE server\n\n\n1) Get a functioning Raspberry Pi\n\n\nWe assume you have a functioning Raspberry Pi 2/3. To get started, see our \ninstallation\n recipe.\n\n\n2) Download the code\n\n\n# update your system\nsudo apt-get update\nsudo apt-get upgrade\n\n# if you don't already have git\nsudo apt-get install git\n\n# clone the main PiE repository\ncd\ngit clone https://github.com/cudmore/pie.git\n\n\n\n\n3) Install the PiE server\n\n\ncd ~/pie\n./install-pie\n\n\n\n\nThats it, the PiE server should be running and you can use the \nweb interface\n at \nhttp://[ip]:5010\n. Where \n[ip]\n is the IP address of your Raspberry Pi. Make sure you specify port \n5010\n in the web address. By default, the PiE server will start when the Raspberry Pi is booted.\n\n\n4) Install \nuv4l\n for video streaming.\n\n\nThe \nuv4l\n software runs at the system level (not within the PiE folder) and only needs to be installed once per machine.\n\n\ncd ~/pie\n./install-uv4l\n\n\n\n\n5) Install the DHT temperature/humidity sensor Python package (optional)\n\n\nIf you are using a \nDHT temperature/humidity sensor\n, the \nAdafruit DHT python package\n needs to be installed.\n\n\ncd ~/pie\n./install-dht\n\n\n\n\n6) Checking the status of the PiE server.\n\n\nIf all goes well, the \nweb interface\n is all this is needed. If the PiE server does not work as expected, it is useful to check its log file. Do this from the \nweb interface\n or from the command line with:\n\n\nmore ~/pie/pie_app/pie.log\n\n\n\n\n7) Controlling the PiE server from the command line\n\n\nThe \npie/install-pie\n script installs a system service allowing the PiE server to run in the background. This background PiE server can be controlled as follows:\n\n\ncd ~/pie\n\n./pie start    - start background PiE server\n\n./pie stop     - stop background PiE server\n\n./pie status   - check the status of background PiE server\n\n\n./pie enable   - enable background PiE server at boot\n\n./pie disable  - disable background PiE server at boot\n\n\n./pie run      - run PiE server on command line\n\n\n\n\n\nFor debugging, use \n./pie run\n to print the PiE server log to the command line. The logs can also be viewed from the \nweb interface\n or the command line using \nmore ~/pie/pie_app/pie.log\n.\n\n\nRunning the PiE server at boot\n\n\nBy default, the PiE server will run when the Raspberry Pi is booted and this can be controlled as follows.\n\n\n# To make the background server run at boot\ncd ~/pie\n./pie enable\n\n# To make the background server NOT run at boot\ncd ~/pie\n./pie disable\n\n\n\n\nManually running the PiE server\n\n\nNormally, the PiE server will run in the background after installation with './install-pie'. If there are errors during the install or the PiE server is not running, the pie server can be run manually as follows.\n\n\n# stop background pie server\ncd ~/pie\n./pie stop\n\n# activate the pie server python virtual environment in pie_env/\n# Once activated, the command prompt will start with (pie_env)\ncd ~/pie\nsource pie_env/bin/activate\n\n# manually run the pie server\ncd ~/pie/pie_app\npython treadmill_app.py\n\n# don't forget to deactivate the python virtual environment with\ndeactivate\n\n\n\n\nUninstalling the PiE server\n\n\nRun the uninstall script \n./uninstall-pie\n and remove the ~/pie folder with \nsudo -Rf ~/pie\n.\n\n\n# run the uninstall script\ncd ~/pie\n./uninstall-pie\n\n# remove the pie folder\nsudo -Rf ~/pie\n\n\n\n\nFull reinstall of the PiE server\n\n\nIssue these commands to remove and reinstall the PiE server.\n\n\n# stop the PiE server\ncd ~/pie\n./pie stop\n\n# remove existing ~/pie folder\ncd\nsudo rm -Rf ~/pie\n\n# download/clone a new copy of pie folder\ncd \ngit clone https://github.com/cudmore/pie.git\n\n# install PiE server\ncd ~/pie\n./install-pie\n\n# install dht sensor (optional)\ncd ~/pie\n./install-dht", 
            "title": "Install the PiE server"
        }, 
        {
            "location": "/install/#install-the-pie-server", 
            "text": "", 
            "title": "Install the PiE server"
        }, 
        {
            "location": "/install/#1-get-a-functioning-raspberry-pi", 
            "text": "We assume you have a functioning Raspberry Pi 2/3. To get started, see our  installation  recipe.", 
            "title": "1) Get a functioning Raspberry Pi"
        }, 
        {
            "location": "/install/#2-download-the-code", 
            "text": "# update your system\nsudo apt-get update\nsudo apt-get upgrade\n\n# if you don't already have git\nsudo apt-get install git\n\n# clone the main PiE repository\ncd\ngit clone https://github.com/cudmore/pie.git", 
            "title": "2) Download the code"
        }, 
        {
            "location": "/install/#3-install-the-pie-server", 
            "text": "cd ~/pie\n./install-pie  Thats it, the PiE server should be running and you can use the  web interface  at  http://[ip]:5010 . Where  [ip]  is the IP address of your Raspberry Pi. Make sure you specify port  5010  in the web address. By default, the PiE server will start when the Raspberry Pi is booted.", 
            "title": "3) Install the PiE server"
        }, 
        {
            "location": "/install/#4-install-uv4l-for-video-streaming", 
            "text": "The  uv4l  software runs at the system level (not within the PiE folder) and only needs to be installed once per machine.  cd ~/pie\n./install-uv4l", 
            "title": "4) Install uv4l for video streaming."
        }, 
        {
            "location": "/install/#5-install-the-dht-temperaturehumidity-sensor-python-package-optional", 
            "text": "If you are using a  DHT temperature/humidity sensor , the  Adafruit DHT python package  needs to be installed.  cd ~/pie\n./install-dht", 
            "title": "5) Install the DHT temperature/humidity sensor Python package (optional)"
        }, 
        {
            "location": "/install/#6-checking-the-status-of-the-pie-server", 
            "text": "If all goes well, the  web interface  is all this is needed. If the PiE server does not work as expected, it is useful to check its log file. Do this from the  web interface  or from the command line with:  more ~/pie/pie_app/pie.log", 
            "title": "6) Checking the status of the PiE server."
        }, 
        {
            "location": "/install/#7-controlling-the-pie-server-from-the-command-line", 
            "text": "The  pie/install-pie  script installs a system service allowing the PiE server to run in the background. This background PiE server can be controlled as follows:  cd ~/pie\n\n./pie start    - start background PiE server \n./pie stop     - stop background PiE server \n./pie status   - check the status of background PiE server \n\n./pie enable   - enable background PiE server at boot \n./pie disable  - disable background PiE server at boot \n\n./pie run      - run PiE server on command line   For debugging, use  ./pie run  to print the PiE server log to the command line. The logs can also be viewed from the  web interface  or the command line using  more ~/pie/pie_app/pie.log .", 
            "title": "7) Controlling the PiE server from the command line"
        }, 
        {
            "location": "/install/#running-the-pie-server-at-boot", 
            "text": "By default, the PiE server will run when the Raspberry Pi is booted and this can be controlled as follows.  # To make the background server run at boot\ncd ~/pie\n./pie enable\n\n# To make the background server NOT run at boot\ncd ~/pie\n./pie disable", 
            "title": "Running the PiE server at boot"
        }, 
        {
            "location": "/install/#manually-running-the-pie-server", 
            "text": "Normally, the PiE server will run in the background after installation with './install-pie'. If there are errors during the install or the PiE server is not running, the pie server can be run manually as follows.  # stop background pie server\ncd ~/pie\n./pie stop\n\n# activate the pie server python virtual environment in pie_env/\n# Once activated, the command prompt will start with (pie_env)\ncd ~/pie\nsource pie_env/bin/activate\n\n# manually run the pie server\ncd ~/pie/pie_app\npython treadmill_app.py\n\n# don't forget to deactivate the python virtual environment with\ndeactivate", 
            "title": "Manually running the PiE server"
        }, 
        {
            "location": "/install/#uninstalling-the-pie-server", 
            "text": "Run the uninstall script  ./uninstall-pie  and remove the ~/pie folder with  sudo -Rf ~/pie .  # run the uninstall script\ncd ~/pie\n./uninstall-pie\n\n# remove the pie folder\nsudo -Rf ~/pie", 
            "title": "Uninstalling the PiE server"
        }, 
        {
            "location": "/install/#full-reinstall-of-the-pie-server", 
            "text": "Issue these commands to remove and reinstall the PiE server.  # stop the PiE server\ncd ~/pie\n./pie stop\n\n# remove existing ~/pie folder\ncd\nsudo rm -Rf ~/pie\n\n# download/clone a new copy of pie folder\ncd \ngit clone https://github.com/cudmore/pie.git\n\n# install PiE server\ncd ~/pie\n./install-pie\n\n# install dht sensor (optional)\ncd ~/pie\n./install-dht", 
            "title": "Full reinstall of the PiE server"
        }, 
        {
            "location": "/mount-usb-drive/", 
            "text": "See \nthis blog post\n for a recipe to mount a USB drive at boot.", 
            "title": "Mount usb drive"
        }, 
        {
            "location": "/parts/", 
            "text": "Jump to the actual parts list\n\n\nOverview\n\n\nRaspberry Pi\n\n\nThe \nRaspberry Pi\n is a complete computer system in an almost credit card size. It has ethernet, USB, general-purpose-input-output pins (GPIO), a dedicated camera port, and runs a version of Debian Linux called \nRasbian\n. You can pick up the current model, a \nRaspberry Pi 3 Model B+\n.\n\n\nRaspberry Pi camera\n\n\nThe Raspberry Pi has a dedicated camera port for the Raspberry Pi Camera. This is an 8 megapixel camera capable of frame rates as high as 90 frames-per-second and comes in two flavors, the \nPi NOIR Camera\n which can capture images/video using infrared (IR) lights and the '\nnormal\n' camera which can capture images/video using visible (white) light. We generally use the \nPi NOIR\n version to record video in behavior boxes during both the daytime (white LEDs) and night-time (IR LEDs) as well as on the scope to record video during two-photon imaging in the dark using IR LEDs.\n\n\nAnalog video output\n\n\nThe Raspberry Pi has a 3.5mm headphone jack that can be used to view an analog video stream from the Pi camera. The headphone jack needs to have 4-poles (bands), \nsomething like this\n. The analog video can be connected directly to any monitor that accepts an RCA video input. Alternatively, the analog video can be sent to another computer using an analog video to USB converter, \nsomething like this\n. These video to USB converters are for some reason a large gray market area and you need to be careful when ordering as you might get junk that does not work. In general, these video/USB converters use the \neasycap driver\n.\n\n\nThe PiE server will output a live video feed when 'arm' is checked. This video feed does not interfere with simultaneous video recording to a file.\n\n\nTwo channel relay\n\n\nA \nrelay\n is a switch allowing you to turn higher voltage devices (usually LEDs connected to 12V power) on and off with 3V GPIO pins. We are using a \nsainsmart 2-channel relay\n.\n\n\nLEDs\n\n\nIf you end up with lots of LEDs, you could try an \nIR LED strip\n and/or a \nwhite LED strip\n.\n\n\nLevel shifter\n\n\nIf you need to connect the Raspberry Pi directly to 5V TTL lab equipment you \nneed\n a \nlevel shifter\n to convert the 5V signal to 3V as the Raspberry Pi is only 3V tolerant. We normally use \nAdafruit\n or \nSparkfun\n level shifters.\n\n\nTeensy microcontroller\n\n\nWe are using \nTeensy 3.2 or 3.5\n microcontrollers. They are Arduino compatible but have a lot more features. These microcontrollers can be programmed from the command line using \nplatformio\n, no need for the Arduino IDE. To use platformio, the Raspberry Pi needs a few simple system wide configurations, see the readme in \npie/platformio\n. \n\n\nStepper motor and  driver\n\n\nUse a \nBipolar stepper motor\n with the \nEasy Driver\n motor driver.\n\n\n\n\nParts List\n\n\nTotal cost for home-cage and/or on the scope video recording is around $200.\n\n\nFor video recording\n\n\n\n\n\n\n\n\nQuatity\n\n\nItem\n\n\nPurpose\n\n\nCost\n\n\nVendor Link\n\n\n\n\n\n\n\n\n\n\n1\n\n\nRaspberry Pi 3 Model B\n\n\nRaspberry Pi system including computer, SD card, power, and case. In general, buy a kit from Canakit.\n\n\n$75\n\n\namazon\n\n\n\n\n\n\n1\n\n\nUSB Flash Drive, 64GB\n\n\nTo save recorded video\n\n\n$17\n\n\namazon\n\n\n\n\n\n\n1\n\n\n(either this) Pi NoIR Camera v2, 8MP\n\n\nIR video camera\n\n\n$30\n\n\nadafruit\n\n\n\n\n\n\n1\n\n\n(or this) Pi Camera v2, 8MP\n\n\nVideo camera\n\n\n$30\n\n\nadafruit\n\n\n\n\n\n\n1\n\n\n(either this) Pi Camera Ribbon cable (2 meters)\n\n\nFlat ribbon cable to connect camera to computer (not optimal)\n\n\n$6\n\n\nadafruit\n\n\n\n\n\n\n1\n\n\n(or this 1/2) Pi Camera HDMI extension cable\n\n\nAllows camera to connect to computer using an HDMI cable\n\n\n$15\n\n\ntindie\n\n\n\n\n\n\n1\n\n\n(and this 2/2) HDMI Cable of sufficient length\n\n\nMale/Male HDMI cable\n\n\n$7 - $15\n\n\namazon\n\n\n\n\n\n\n1\n\n\nEthernet cable    of sufficient length\n\n\nConnect the computer to the network\n\n\n$5 - $20\n\n\namazon\n\n\n\n\n\n\n\n\nFor video recording in a behavior box\n\n\n\n\n\n\n\n\nQuatity\n\n\nItem\n\n\nPurpose\n\n\nCost\n\n\nVendor Link\n\n\n\n\n\n\n\n\n\n\n1\n\n\nSainSmart 2-Channel Relay Module\n\n\nAllow computer to switch LEDs on/off\n\n\n$9\n\n\namazon\n\n\n\n\n\n\n1-2\n\n\nWhite LEDs\n\n\nWhite light for behavior box\n\n\n$5\n\n\nsparkfun\n\n\n\n\n\n\n4\n\n\nIR LEDs, 840-850 nm\n\n\nIR light for behavior box. Pi Camera picks up ~850 nm light well, do not use 950 nm.\n\n\n$1 each\n\n\nsparkfun\n\n\n\n\n\n\n1\n\n\nUniversal 4-LED Miniature Wedge Base PCB\n\n\nTo mount 4x LEDs + required resistor\n\n\n$1 each\n\n\nsuper-bright-led\n\n\n\n\n\n\n1\n\n\n12V 2A LED Driver (does not come with wall plug)\n\n\nPower the IR LEDs\n\n\n$12\n\n\namazon\n\n\n\n\n\n\n1\n\n\nTemperature/humidity sensor\n\n\nMeasure temperature/humidity\n\n\n$10-$15\n\n\nEither \nam2302\n or \ndht22\n\n\n\n\n\n\n1\n\n\nWire\n\n\nTo wire LEDs into box\n\n\n$17\n\n\nsparkfun\n\n\n\n\n\n\n\n\nFor video recording on a scope with triggering and frame clock\n\n\n\n\n\n\n\n\nQuatity\n\n\nItem\n\n\nPurpose\n\n\nCost\n\n\nVendor Link\n\n\n\n\n\n\n\n\n\n\n1\n\n\n4-channel Logic Level Converter (Bi-Directional)\n\n\nTo connect 5V TTL lab equipment to 3V computer GPIO\n\n\n$4\n\n\nSparkfun\n, \nAdafruit\n\n\n\n\n\n\n1\n\n\nTripod Swivel\n\n\nTo mount the camera on an optical post and be able to angle it.\n\n\n$9\n\n\namazon\n\n\n\n\n\n\n1\n\n\n4-pole 3.5mm headphone jack\n\n\nOutput analog video from the Pi\n\n\n$6\n\n\namazon\n\n\n\n\n\n\n1\n\n\nVideo to USB converter\n\n\nConvert analog video to USB to view video on a computer\n\n\n$15\n\n\namazon\n\n\n\n\n\n\n\n\nFor controlling a motorized treadmill with a microcontroller\n\n\n\n\n\n\n\n\nQuatity\n\n\nItem\n\n\nPurpose\n\n\nCost\n\n\nVendor Link\n\n\n\n\n\n\n\n\n\n\n1\n\n\nTeensy 3.5\n\n\nArduino compatible microcontroller\n\n\n$25\n\n\nteensy\n\n\n\n\n\n\n1\n\n\nEasyDriver - Stepper Motor Driver\n\n\nMotor controller for stepper motor\n\n\n$15\n\n\nsparkfun\n\n\n\n\n\n\n1\n\n\nStepper Motor\n\n\nShare 12V 2A LED Driver for power\n\n\n$15\n\n\nsparkfun\n\n\n\n\n\n\n1\n\n\nRotary encoder\n\n\nHoneywell-600-128-CBL\n\n\n$51\n\n\ndigi-key\n or \nthis\n\n\n\n\n\n\n1\n\n\nBreadboard and jumper cables\n\n\nA breadboard and a mixture of jumper cables: male/male, male/female, and female/female\n\n\n$11\n\n\namazon\n\n\n\n\n\n\n\n\nBuilding a treadmill\n\n\nThese are \nActobotics\n parts from \nServoCity\n\n\n\n\n\n\n\n\nQuatity\n\n\nItem\n\n\nCost\n\n\nPart #\n\n\nLink\n\n\n\n\n\n\n\n\n\n\n\n\nAluminum channels\n\n\n\n\n\n\nlink\n\n\n\n\n\n\n4\n\n\n1.50 inch Aluminum Channel\n\n\n2.99\n\n\n585440\n\n\n\n\n\n\n\n\n4\n\n\n6.00 inch Aluminum Channel\n\n\n5.99\n\n\n585446\n\n\n\n\n\n\n\n\n1\n\n\n9.00 inch Aluminum Channel\n\n\n7.99\n\n\n585450\n\n\n\n\n\n\n\n\n1\n\n\n15 inch Aluminum Channel\n\n\n11.99\n\n\n585458\n\n\n\n\n\n\n\n\n\n\nShafts and shaft couplers\n\n\n\n\n\n\nlink\n\n\n\n\n\n\n2\n\n\n1/4 inch x12 inch Precision Shaft\n\n\n3.59\n\n\n634178\n\n\n\n\n\n\n\n\n2\n\n\n1/4 inch x4 inch Precision Shaft\n\n\n1.49\n\n\n634164\n\n\n\n\n\n\n\n\n1\n\n\n1/4 inch x6 inch Precision Shaft\n\n\n2.09\n\n\n634168\n\n\n\n\n\n\n\n\n2\n\n\n1/4 inch to 5mm Set Screw Shaft Coupler\n\n\n4.99\n\n\n625120\n\n\n\n\n\n\n\n\n2\n\n\n1/4 inch to 1/4 inch Set Screw Shaft Coupler\n\n\n4.99\n\n\n625104\n\n\n\n\n\n\n\n\n\n\nCouplers and adapters\n\n\n\n\n\n\nlink\n\n\n\n\n\n\n8\n\n\n1/4 inch Bore Clamping Hub (0.770 inch)\n\n\n7.99\n\n\n545588\n\n\n\n\n\n\n\n\n4\n\n\n1/4 inch Bore Set Screw Hub (0.770 inch)\n\n\n4.99\n\n\n545548\n\n\n\n\n\n\n\n\n2\n\n\nStepper Motor Mount (NEMA 17)\n\n\n7.49\n\n\n555152\n\n\n\n\n\n\n\n\n4\n\n\n1/4-20 Round Screw Plate\n\n\n3.99\n\n\n545468\n\n\n\n\n\n\n\n\n2\n\n\nLarge Square Screw Plate\n\n\n2.69\n\n\n585430\n\n\n\n\n\n\n\n\n1\n\n\n90 Degree Quad Hub Mount C\n\n\n5.99\n\n\n545360\n\n\n\n\n\n\n\n\n1\n\n\n90 Degree Quad Hub Mount D\n\n\n5.99\n\n\n545324\n\n\n\n\n\n\n\n\n\n\nBall bearings\n\n\n\n\n\n\nlink\n\n\n\n\n\n\n3\n\n\n.250 inch ID x .500 inch OD Flanged Ball Bearing (Stainless Steel) 2 pack\n\n\n1.99\n\n\n535198\n\n\n\n\n\n\n\n\n1\n\n\nDual Ball Bearing Hub A\n\n\n6.99\n\n\n545444\n\n\n\n\n\n\n\n\n1\n\n\n1/4 inch Shafting \n Tubing Spacers (12 pk)\n\n\n1.69\n\n\n633104\n\n\n\n\n\n\n\n\n\n\nGears\n\n\n\n\n\n\nlink\n\n\n\n\n\n\n1\n\n\n16T, 0.250 inch Bore, 32P Bevel Gear\n\n\n5.99\n\n\n615442\n\n\n\n\n\n\n\n\n1\n\n\n32T, 0.250 inch Bore, 32P Bevel Gear\n\n\n7.99\n\n\n615444\n\n\n\n\n\n\n\n\n1\n\n\n16T, 5mm Bore, 32P Bevel Gear\n\n\n5.99\n\n\n615438\n\n\n\n\n\n\n\n\n2\n\n\n48 Tooth, 32 Pitch Hub Gear (3/16 inch Face)\n\n\n5.20\n\n\nRHA32-36-48\n\n\n\n\n\n\n\n\n\n\nFasteners\n\n\n\n\n\n\nlink\n\n\n\n\n\n\n24\n\n\n6-32x3/8 inch Pan Head Phillips Machine Screws (Zinc-Plated)\n\n\n0.06\n\n\n90272A146\n\n\n\n\n\n\n\n\n8\n\n\n1/2 inch 1/4-20 Flat Head Phillips Machine Screws\n\n\n0.38\n\n\n90273A537\n\n\n\n\n\n\n\n\n1\n\n\n3/32 Hex Key\n\n\n1.39\n\n\n57185A11\n\n\n\n\n\n\n\n\n6\n\n\n.250 in L x 6-32 Zinc-Plated Alloy Steel Socket Head Cap Screw (25 pk)\n\n\n1.69\n\n\n632106", 
            "title": "Parts"
        }, 
        {
            "location": "/parts/#overview", 
            "text": "", 
            "title": "Overview"
        }, 
        {
            "location": "/parts/#raspberry-pi", 
            "text": "The  Raspberry Pi  is a complete computer system in an almost credit card size. It has ethernet, USB, general-purpose-input-output pins (GPIO), a dedicated camera port, and runs a version of Debian Linux called  Rasbian . You can pick up the current model, a  Raspberry Pi 3 Model B+ .", 
            "title": "Raspberry Pi"
        }, 
        {
            "location": "/parts/#raspberry-pi-camera", 
            "text": "The Raspberry Pi has a dedicated camera port for the Raspberry Pi Camera. This is an 8 megapixel camera capable of frame rates as high as 90 frames-per-second and comes in two flavors, the  Pi NOIR Camera  which can capture images/video using infrared (IR) lights and the ' normal ' camera which can capture images/video using visible (white) light. We generally use the  Pi NOIR  version to record video in behavior boxes during both the daytime (white LEDs) and night-time (IR LEDs) as well as on the scope to record video during two-photon imaging in the dark using IR LEDs.", 
            "title": "Raspberry Pi camera"
        }, 
        {
            "location": "/parts/#analog-video-output", 
            "text": "The Raspberry Pi has a 3.5mm headphone jack that can be used to view an analog video stream from the Pi camera. The headphone jack needs to have 4-poles (bands),  something like this . The analog video can be connected directly to any monitor that accepts an RCA video input. Alternatively, the analog video can be sent to another computer using an analog video to USB converter,  something like this . These video to USB converters are for some reason a large gray market area and you need to be careful when ordering as you might get junk that does not work. In general, these video/USB converters use the  easycap driver .  The PiE server will output a live video feed when 'arm' is checked. This video feed does not interfere with simultaneous video recording to a file.", 
            "title": "Analog video output"
        }, 
        {
            "location": "/parts/#two-channel-relay", 
            "text": "A  relay  is a switch allowing you to turn higher voltage devices (usually LEDs connected to 12V power) on and off with 3V GPIO pins. We are using a  sainsmart 2-channel relay .", 
            "title": "Two channel relay"
        }, 
        {
            "location": "/parts/#leds", 
            "text": "If you end up with lots of LEDs, you could try an  IR LED strip  and/or a  white LED strip .", 
            "title": "LEDs"
        }, 
        {
            "location": "/parts/#level-shifter", 
            "text": "If you need to connect the Raspberry Pi directly to 5V TTL lab equipment you  need  a  level shifter  to convert the 5V signal to 3V as the Raspberry Pi is only 3V tolerant. We normally use  Adafruit  or  Sparkfun  level shifters.", 
            "title": "Level shifter"
        }, 
        {
            "location": "/parts/#teensy-microcontroller", 
            "text": "We are using  Teensy 3.2 or 3.5  microcontrollers. They are Arduino compatible but have a lot more features. These microcontrollers can be programmed from the command line using  platformio , no need for the Arduino IDE. To use platformio, the Raspberry Pi needs a few simple system wide configurations, see the readme in  pie/platformio .", 
            "title": "Teensy microcontroller"
        }, 
        {
            "location": "/parts/#stepper-motor-and-driver", 
            "text": "Use a  Bipolar stepper motor  with the  Easy Driver  motor driver.", 
            "title": "Stepper motor and  driver"
        }, 
        {
            "location": "/parts/#parts-list", 
            "text": "Total cost for home-cage and/or on the scope video recording is around $200.", 
            "title": "Parts List"
        }, 
        {
            "location": "/parts/#for-video-recording", 
            "text": "Quatity  Item  Purpose  Cost  Vendor Link      1  Raspberry Pi 3 Model B  Raspberry Pi system including computer, SD card, power, and case. In general, buy a kit from Canakit.  $75  amazon    1  USB Flash Drive, 64GB  To save recorded video  $17  amazon    1  (either this) Pi NoIR Camera v2, 8MP  IR video camera  $30  adafruit    1  (or this) Pi Camera v2, 8MP  Video camera  $30  adafruit    1  (either this) Pi Camera Ribbon cable (2 meters)  Flat ribbon cable to connect camera to computer (not optimal)  $6  adafruit    1  (or this 1/2) Pi Camera HDMI extension cable  Allows camera to connect to computer using an HDMI cable  $15  tindie    1  (and this 2/2) HDMI Cable of sufficient length  Male/Male HDMI cable  $7 - $15  amazon    1  Ethernet cable    of sufficient length  Connect the computer to the network  $5 - $20  amazon", 
            "title": "For video recording"
        }, 
        {
            "location": "/parts/#for-video-recording-in-a-behavior-box", 
            "text": "Quatity  Item  Purpose  Cost  Vendor Link      1  SainSmart 2-Channel Relay Module  Allow computer to switch LEDs on/off  $9  amazon    1-2  White LEDs  White light for behavior box  $5  sparkfun    4  IR LEDs, 840-850 nm  IR light for behavior box. Pi Camera picks up ~850 nm light well, do not use 950 nm.  $1 each  sparkfun    1  Universal 4-LED Miniature Wedge Base PCB  To mount 4x LEDs + required resistor  $1 each  super-bright-led    1  12V 2A LED Driver (does not come with wall plug)  Power the IR LEDs  $12  amazon    1  Temperature/humidity sensor  Measure temperature/humidity  $10-$15  Either  am2302  or  dht22    1  Wire  To wire LEDs into box  $17  sparkfun", 
            "title": "For video recording in a behavior box"
        }, 
        {
            "location": "/parts/#for-video-recording-on-a-scope-with-triggering-and-frame-clock", 
            "text": "Quatity  Item  Purpose  Cost  Vendor Link      1  4-channel Logic Level Converter (Bi-Directional)  To connect 5V TTL lab equipment to 3V computer GPIO  $4  Sparkfun ,  Adafruit    1  Tripod Swivel  To mount the camera on an optical post and be able to angle it.  $9  amazon    1  4-pole 3.5mm headphone jack  Output analog video from the Pi  $6  amazon    1  Video to USB converter  Convert analog video to USB to view video on a computer  $15  amazon", 
            "title": "For video recording on a scope with triggering and frame clock"
        }, 
        {
            "location": "/parts/#for-controlling-a-motorized-treadmill-with-a-microcontroller", 
            "text": "Quatity  Item  Purpose  Cost  Vendor Link      1  Teensy 3.5  Arduino compatible microcontroller  $25  teensy    1  EasyDriver - Stepper Motor Driver  Motor controller for stepper motor  $15  sparkfun    1  Stepper Motor  Share 12V 2A LED Driver for power  $15  sparkfun    1  Rotary encoder  Honeywell-600-128-CBL  $51  digi-key  or  this    1  Breadboard and jumper cables  A breadboard and a mixture of jumper cables: male/male, male/female, and female/female  $11  amazon", 
            "title": "For controlling a motorized treadmill with a microcontroller"
        }, 
        {
            "location": "/parts/#building-a-treadmill", 
            "text": "These are  Actobotics  parts from  ServoCity     Quatity  Item  Cost  Part #  Link       Aluminum channels    link    4  1.50 inch Aluminum Channel  2.99  585440     4  6.00 inch Aluminum Channel  5.99  585446     1  9.00 inch Aluminum Channel  7.99  585450     1  15 inch Aluminum Channel  11.99  585458      Shafts and shaft couplers    link    2  1/4 inch x12 inch Precision Shaft  3.59  634178     2  1/4 inch x4 inch Precision Shaft  1.49  634164     1  1/4 inch x6 inch Precision Shaft  2.09  634168     2  1/4 inch to 5mm Set Screw Shaft Coupler  4.99  625120     2  1/4 inch to 1/4 inch Set Screw Shaft Coupler  4.99  625104      Couplers and adapters    link    8  1/4 inch Bore Clamping Hub (0.770 inch)  7.99  545588     4  1/4 inch Bore Set Screw Hub (0.770 inch)  4.99  545548     2  Stepper Motor Mount (NEMA 17)  7.49  555152     4  1/4-20 Round Screw Plate  3.99  545468     2  Large Square Screw Plate  2.69  585430     1  90 Degree Quad Hub Mount C  5.99  545360     1  90 Degree Quad Hub Mount D  5.99  545324      Ball bearings    link    3  .250 inch ID x .500 inch OD Flanged Ball Bearing (Stainless Steel) 2 pack  1.99  535198     1  Dual Ball Bearing Hub A  6.99  545444     1  1/4 inch Shafting   Tubing Spacers (12 pk)  1.69  633104      Gears    link    1  16T, 0.250 inch Bore, 32P Bevel Gear  5.99  615442     1  32T, 0.250 inch Bore, 32P Bevel Gear  7.99  615444     1  16T, 5mm Bore, 32P Bevel Gear  5.99  615438     2  48 Tooth, 32 Pitch Hub Gear (3/16 inch Face)  5.20  RHA32-36-48      Fasteners    link    24  6-32x3/8 inch Pan Head Phillips Machine Screws (Zinc-Plated)  0.06  90272A146     8  1/2 inch 1/4-20 Flat Head Phillips Machine Screws  0.38  90273A537     1  3/32 Hex Key  1.39  57185A11     6  .250 in L x 6-32 Zinc-Plated Alloy Steel Socket Head Cap Screw (25 pk)  1.69  632106", 
            "title": "Building a treadmill"
        }, 
        {
            "location": "/readme/", 
            "text": "Raspberry Pi Controlled Experiment (PiE)\n\n\nSee web documentation at \nhttp://blog.cudmore.io/pie/\n.", 
            "title": "Raspberry Pi Controlled Experiment (PiE)"
        }, 
        {
            "location": "/readme/#raspberry-pi-controlled-experiment-pie", 
            "text": "See web documentation at  http://blog.cudmore.io/pie/ .", 
            "title": "Raspberry Pi Controlled Experiment (PiE)"
        }, 
        {
            "location": "/release-notes/", 
            "text": "Release Notes\n\n\nCurrent To Do\n\n\n\n\nMake sure streaming stops when browser tab is closed or browser is quit.\n\n\nExpand sunrise/sunset to fractional hour.\n\n\n[partially done 20180831] Add warning when video/ drive space remaining is less than 1 GB. Do this by updating status.trial.systemInfo.gbRemaining at the end of each recording (record video thread, and armed recording thread). I am doing this with hard-coded 5GB warning in index.html, see: ng-if=\"videoArray[$index].status.trial.systemInfo.gbRemaining \n 5\"\n\n\nHave some mechanism to roll-over or otherwise replace the continuous environment log file.\n\n\n[done 20181018] Add code to check the camera as PiE server starts. This way, user can look at logs to troubleshoot.\n\n\nAdd popup to web interface for selecting supported DHT (AM2302, DHT11) sensors\n\n\n[20181114] Have continuous environmental log also log status of the lights. Once done, add gray bars to environment plot to show when light actually came on/off.\n\n\n\n\nMajor Changes\n\n\n20181114\n\n\n\n\nRevamped environmental log page.\n\n\nNow using fixed y-axis for humidity in range 0..80\n\n\nAdded controls to set y-axis of temperature.\n\n\nShowing last read timestamp, temerature, and humidity at top of page\n\n\nAdded button to reload page. Once loaded, the page is static (does not continuously poll server). Clicking 'reload page' will fetch new values from server.\n\n\nReversed order of table to show last reading first.\n\n\nThe page is now using javascript and angular\n\n\n\n\n\n\n\n\n20181013\n\n\n\n\nMoved environment logs to /home/pie/video/logs. This way they can be browsed and will not be trashed on full reinstall\n\n\n\n\n20180801\n\n\n\n\nLots of changes\n\n\n\n\n20180722\n\n\n\n\nLots of changes\n\n\n\n\nDevelopment Notes\n\n\n20180710\n\n\n(1) motor interface\n\n\n\n\n\n\nmake setup not engage motor\n\n\n\n\n\n\nadd motor on, motor off to web interface\n   pass to teensy with serial useMotor/motorOn, see trial.useMotor\n\n\n\n\n\n\n//When set LOW, all STEP commands are ignored and all FET functionality is turned off. Must be pulled HIGH to enable STEP control\nconst int motorResetPin = 19;\n\n//Logic Input. Enables the FET functionality within the motor driver. If set to HIGH, the FETs will be disabled, and the IC will not drive the motor. If set to LOW, all FETs will be enabled, allowing motor control.\nconst int motorEnabledPin = 20; //low to engage, high to dis-engage\n\n\n\n\n(2) [done]finish writing docs for 'scope' configuration.\n\n\n(3) [done] make sure all config files still load\n\n\n(4) [done] add 'last response' to interface\n   - update self.lastResponse throughout code\n\n\n(6) look at starting ./pie at boot, make sure it catches the serial\n\n\nReduce png file size\n\n\nsee:\n\n\nhttps://www.cyberciti.biz/faq/linux-unix-optimize-lossless-png-images-with-optipng-command/\n\n\nsudo apt-get install optipng\n\n\nRemember\n\n\nPins GPIO2 and GPIO3 have fixed pull-up resistors, but for other pins this can be configured in software.\n\n\nGunicorn\n\n\nsource env/bin/activate\ncd ~/pie/pie_app\n/home/pi/pie/env/bin/gunicorn -w 1 --bind 192.168.1.15:5010 treadmill_app:app\n\n\n\n\nMkDocs\n\n\nHad to install with\n\n\nsudo pip install mkdocs\n\n\n\nRun on an external port\n\n\ncd ~/pie/docs\nmkdocs serve -a 192.168.1.4:8000\n# if that does not work, then\nmkdocs serve --dev-addr=0.0.0.0:8000\n\n\n\nPush to github\n\n\ncd ~/pie/docs\nmkdocs gh-deploy", 
            "title": "Release notes"
        }, 
        {
            "location": "/release-notes/#release-notes", 
            "text": "", 
            "title": "Release Notes"
        }, 
        {
            "location": "/release-notes/#current-to-do", 
            "text": "Make sure streaming stops when browser tab is closed or browser is quit.  Expand sunrise/sunset to fractional hour.  [partially done 20180831] Add warning when video/ drive space remaining is less than 1 GB. Do this by updating status.trial.systemInfo.gbRemaining at the end of each recording (record video thread, and armed recording thread). I am doing this with hard-coded 5GB warning in index.html, see: ng-if=\"videoArray[$index].status.trial.systemInfo.gbRemaining   5\"  Have some mechanism to roll-over or otherwise replace the continuous environment log file.  [done 20181018] Add code to check the camera as PiE server starts. This way, user can look at logs to troubleshoot.  Add popup to web interface for selecting supported DHT (AM2302, DHT11) sensors  [20181114] Have continuous environmental log also log status of the lights. Once done, add gray bars to environment plot to show when light actually came on/off.", 
            "title": "Current To Do"
        }, 
        {
            "location": "/release-notes/#major-changes", 
            "text": "20181114   Revamped environmental log page.  Now using fixed y-axis for humidity in range 0..80  Added controls to set y-axis of temperature.  Showing last read timestamp, temerature, and humidity at top of page  Added button to reload page. Once loaded, the page is static (does not continuously poll server). Clicking 'reload page' will fetch new values from server.  Reversed order of table to show last reading first.  The page is now using javascript and angular     20181013   Moved environment logs to /home/pie/video/logs. This way they can be browsed and will not be trashed on full reinstall   20180801   Lots of changes   20180722   Lots of changes", 
            "title": "Major Changes"
        }, 
        {
            "location": "/release-notes/#development-notes", 
            "text": "", 
            "title": "Development Notes"
        }, 
        {
            "location": "/release-notes/#20180710", 
            "text": "(1) motor interface    make setup not engage motor    add motor on, motor off to web interface\n   pass to teensy with serial useMotor/motorOn, see trial.useMotor    //When set LOW, all STEP commands are ignored and all FET functionality is turned off. Must be pulled HIGH to enable STEP control\nconst int motorResetPin = 19;\n\n//Logic Input. Enables the FET functionality within the motor driver. If set to HIGH, the FETs will be disabled, and the IC will not drive the motor. If set to LOW, all FETs will be enabled, allowing motor control.\nconst int motorEnabledPin = 20; //low to engage, high to dis-engage  (2) [done]finish writing docs for 'scope' configuration.  (3) [done] make sure all config files still load  (4) [done] add 'last response' to interface\n   - update self.lastResponse throughout code  (6) look at starting ./pie at boot, make sure it catches the serial", 
            "title": "20180710"
        }, 
        {
            "location": "/release-notes/#reduce-png-file-size", 
            "text": "see:  https://www.cyberciti.biz/faq/linux-unix-optimize-lossless-png-images-with-optipng-command/  sudo apt-get install optipng", 
            "title": "Reduce png file size"
        }, 
        {
            "location": "/release-notes/#remember", 
            "text": "Pins GPIO2 and GPIO3 have fixed pull-up resistors, but for other pins this can be configured in software.", 
            "title": "Remember"
        }, 
        {
            "location": "/release-notes/#gunicorn", 
            "text": "source env/bin/activate\ncd ~/pie/pie_app\n/home/pi/pie/env/bin/gunicorn -w 1 --bind 192.168.1.15:5010 treadmill_app:app", 
            "title": "Gunicorn"
        }, 
        {
            "location": "/release-notes/#mkdocs", 
            "text": "Had to install with  sudo pip install mkdocs  Run on an external port  cd ~/pie/docs\nmkdocs serve -a 192.168.1.4:8000\n# if that does not work, then\nmkdocs serve --dev-addr=0.0.0.0:8000  Push to github  cd ~/pie/docs\nmkdocs gh-deploy", 
            "title": "MkDocs"
        }, 
        {
            "location": "/rest-interface/", 
            "text": "Introduction\n\n\nThe PiE server provides a REST interface allowing web URLs to get and set configuration parameters and to perform actions like starting and stopping recording.\n\n\nFor example, if your Pi has the IP address 192.168.4, the status of the PiE server can be retreived with:\n\n\nhttp://192.168.1.4:5010/status\n\n\n\nThe entire \nweb interface\n is driven by calling this REST interface from Javascript in \npie/pie_app/static/treadmill.js\n.\n\n\nYou can use this REST interface to control the PiE server from Python or Matlab or make your own web interface using Javascript.\n\n\nEndpoints\n\n\nThe following is a list of valid endpoints.\n\n\nGet\n\n\n/status\n\n/systeminfo\n\n/api/refreshsysteminfo\n\n/log\n\n/environmentlog\n\n/api/lastimage\n\n\n\nSet\n\n\n/api/set/animalid/\nstring:animalID\n\n\n/api/set/conditionid/\nstring:conditionID\n\n\n/api/set/scopefilename/\nstring:scopeFilename\n\n\n\n\nActions\n\n\n/api/action/\nstring:thisAction\n\n\n\n\n\n\n\n\n\n\nthisAction\n\n\naction\n\n\n\n\n\n\n\n\n\n\nstartRecord\n\n\n\n\n\n\n\n\nstopRecord\n\n\n\n\n\n\n\n\nstartStream\n\n\n\n\n\n\n\n\nstopStream\n\n\n\n\n\n\n\n\nstartArm\n\n\n\n\n\n\n\n\nstopArm\n\n\n\n\n\n\n\n\nstartArmVideo\n\n\n\n\n\n\n\n\nstopArmVideo\n\n\n\n\n\n\n\n\n\n\nSubmit/Post\n\n\nThis is a POST endpoint to change any configuration parameter. Need to send POST data which is results or modified version of /status.\n\n\n/api/submit/\nstring:submitThis\n\n\n\n\n\n\n\n\n\n\nthisAction\n\n\naction\n\n\n\n\n\n\n\n\n\n\nsaveconfig\n\n\nSave current configuration (no post data)\n\n\n\n\n\n\nconfigparams\n\n\n\n\n\n\n\n\npinparams\n\n\n\n\n\n\n\n\nanimalparams\n\n\n\n\n\n\n\n\nledparams\n\n\n\n\n\n\n\n\nmotorparams\n\n\n\n\n\n\n\n\n\n\n/api/submit/loadconfig/\nstring:loadThis\n\n\n\n\nScripting with the REST interface\n\n\nPython\n\n\nIn this example, we get the server status, toggle the white LED, and post this new data to change the white LED on the server.\n\n\n1) Install requests if necessary\n\n\npip3 install requests\n\n\n\n2) Put this code into a file called 'testrest.py'\n\n\nimport requests\nfrom pprint import pprint\n\n# get the current status\nurl = 'http://192.168.1.4:5010/status'\nr = requests.get(url)\n\nstatus = r.json()\nstatus = status['trial']['config']\n\n# toggle the white LED\n# we are hard coding [1] here, IR LED is [2]\nwhiteLED = status['hardware']['eventOut'][1]['state']\nwhiteLED = not whiteLED\nstatus['hardware']['eventOut'][1]['state'] = whiteLED\n\n# post the changes\nurl = 'http://192.168.1.4:5010/api/submit/ledparams'\nr = requests.post(url, json = status) \n\n# check that our changes were returned (meaning they were set on the server)\nstatus = r.json()\nstatus = status['trial']['config']\nprint('server whiteLED is now:', status['hardware']['eventOut'][1]['state'])\n\n# check the last response from the server\nprint('last response: ')\npprint(r.json()['trial']['runtime']['lastResponse'])\n\n\n\n\n3) Run on command line\n\n\npython3 testrest.py\n\n\n\nEach time this script is run, the white LED will be toggled.\n\n\nMatlab\n\n\nComing soon!\n\n\nProcessing\n\n\nProcessing\n is a healthy alternative to Matlab and/or Python as it allows many of the same functionality without the overhead of a complicated, large, and proprietary installation.\n\n\nThe Processing code below will fetch the status of the PiE server, toggle both the white and IR LEDs and then set new values on the PiE server.\n\n\n// This code assumes that http.request library is installed\n// To install, select menu 'Sketch - Import Library... - Add Library...' and search for 'http requests'\nimport http.requests.GetRequest;\n\n  // search and replace 192.168.1.4 with the IP address of a PiE server\n\n  // grab the PiE server 'status' using endpoint /status\n  JSONObject status = loadJSONObject(\nhttp://192.168.1.4:5010/status\n);\n\n  // (0) parse the PiE server 'status' into its different pieces\n  JSONObject trial = status.getJSONObject(\ntrial\n);\n  JSONObject config = trial.getJSONObject(\nconfig\n);\n  JSONObject hardware = config.getJSONObject(\nhardware\n);\n  JSONArray eventOut = hardware.getJSONArray(\neventOut\n); // eventOut is a JSON array\n\n  // specify the white and IR LED indices (these are indices into JSON eventOut array)\n  Integer whiteIdx = 1;\n  Integer irIdx = 2;\n\n  // (1) get the the initial 'state' of white and IR LEDs\n  JSONObject whiteLED = eventOut.getJSONObject(whiteIdx);\n  JSONObject irLED = eventOut.getJSONObject(irIdx);\n  println(\n1\n);\n  println(\nwhiteLED 'state' was:\n, whiteLED.getBoolean(\nstate\n));\n  println(\nirLED 'state' was:\n, irLED.getBoolean(\nstate\n));\n\n  // (2) toggle/invert the 'state' of white and IR leds\n  Boolean newWhiteState = ! whiteLED.getBoolean(\nstate\n);\n  Boolean newIRState = ! irLED.getBoolean(\nstate\n);\n  println(\n2\n);\n  println(\nnewWhiteState:\n, newWhiteState);\n  println(\nnewIRState:\n, newIRState);\n\n  // convert from Boolean to int\n  // endpoint /api/v2/set/led/\nledIdx\n/\nvalue\n expects \nvalue\n in (0,1) and not in (true, false)\n  int newWhiteStateInt = newWhiteState ? 1 : 0;\n  int newIRStateInt = newIRState ? 1 : 0;\n\n  // set the new values on the PiE server using REST endpoint /api/v2/set/led/\nledIdx\n/\nvalue\n\n  // where:\n  //    \nledIdx\n: 1 for white, 2 for IR (e.g. whiteIdx and irIdx)\n  //    \nvalue\n: 1 for on, 0 for off\n  GetRequest postWhite = new GetRequest(\nhttp://192.168.1.4:5010/api/v2/set/led/\n + whiteIdx + \n/\n + newWhiteStateInt);\n  postWhite.send();\n  GetRequest postIR = new GetRequest(\nhttp://192.168.1.4:5010/api/v2/set/led/\n + irIdx + \n/\n + newIRStateInt);\n  postIR.send();\n\n  // (3) grab the PiE server 'status' using endpoint /status again to ensure our changes took effect\n  // You can also look at the web interface to see if the LED changes took effect !!!\n  status = loadJSONObject(\nhttp://192.168.1.4:5010/status\n);\n\n  // parse the PiE server 'status' into its different pieces, the same as step (0) above\n  trial = status.getJSONObject(\ntrial\n);\n  config = trial.getJSONObject(\nconfig\n);\n  hardware = config.getJSONObject(\nhardware\n);\n  eventOut = hardware.getJSONArray(\neventOut\n);\n  whiteLED = eventOut.getJSONObject(whiteIdx);\n  irLED = eventOut.getJSONObject(whiteIdx);\n\n  println(\n3\n);\n  println(\nwhiteLED 'state' is now:\n, whiteLED.getBoolean(\nstate\n));\n  println(\nirLED 'state' is now:\n, irLED.getBoolean(\nstate\n));", 
            "title": "Rest interface"
        }, 
        {
            "location": "/rest-interface/#introduction", 
            "text": "The PiE server provides a REST interface allowing web URLs to get and set configuration parameters and to perform actions like starting and stopping recording.  For example, if your Pi has the IP address 192.168.4, the status of the PiE server can be retreived with:  http://192.168.1.4:5010/status  The entire  web interface  is driven by calling this REST interface from Javascript in  pie/pie_app/static/treadmill.js .  You can use this REST interface to control the PiE server from Python or Matlab or make your own web interface using Javascript.", 
            "title": "Introduction"
        }, 
        {
            "location": "/rest-interface/#endpoints", 
            "text": "The following is a list of valid endpoints.", 
            "title": "Endpoints"
        }, 
        {
            "location": "/rest-interface/#get", 
            "text": "/status\n\n/systeminfo\n\n/api/refreshsysteminfo\n\n/log\n\n/environmentlog\n\n/api/lastimage", 
            "title": "Get"
        }, 
        {
            "location": "/rest-interface/#set", 
            "text": "/api/set/animalid/ string:animalID \n\n/api/set/conditionid/ string:conditionID \n\n/api/set/scopefilename/ string:scopeFilename", 
            "title": "Set"
        }, 
        {
            "location": "/rest-interface/#actions", 
            "text": "/api/action/ string:thisAction      thisAction  action      startRecord     stopRecord     startStream     stopStream     startArm     stopArm     startArmVideo     stopArmVideo", 
            "title": "Actions"
        }, 
        {
            "location": "/rest-interface/#submitpost", 
            "text": "This is a POST endpoint to change any configuration parameter. Need to send POST data which is results or modified version of /status.  /api/submit/ string:submitThis      thisAction  action      saveconfig  Save current configuration (no post data)    configparams     pinparams     animalparams     ledparams     motorparams      /api/submit/loadconfig/ string:loadThis", 
            "title": "Submit/Post"
        }, 
        {
            "location": "/rest-interface/#scripting-with-the-rest-interface", 
            "text": "", 
            "title": "Scripting with the REST interface"
        }, 
        {
            "location": "/rest-interface/#python", 
            "text": "In this example, we get the server status, toggle the white LED, and post this new data to change the white LED on the server.  1) Install requests if necessary  pip3 install requests  2) Put this code into a file called 'testrest.py'  import requests\nfrom pprint import pprint\n\n# get the current status\nurl = 'http://192.168.1.4:5010/status'\nr = requests.get(url)\n\nstatus = r.json()\nstatus = status['trial']['config']\n\n# toggle the white LED\n# we are hard coding [1] here, IR LED is [2]\nwhiteLED = status['hardware']['eventOut'][1]['state']\nwhiteLED = not whiteLED\nstatus['hardware']['eventOut'][1]['state'] = whiteLED\n\n# post the changes\nurl = 'http://192.168.1.4:5010/api/submit/ledparams'\nr = requests.post(url, json = status) \n\n# check that our changes were returned (meaning they were set on the server)\nstatus = r.json()\nstatus = status['trial']['config']\nprint('server whiteLED is now:', status['hardware']['eventOut'][1]['state'])\n\n# check the last response from the server\nprint('last response: ')\npprint(r.json()['trial']['runtime']['lastResponse'])  3) Run on command line  python3 testrest.py  Each time this script is run, the white LED will be toggled.", 
            "title": "Python"
        }, 
        {
            "location": "/rest-interface/#matlab", 
            "text": "Coming soon!", 
            "title": "Matlab"
        }, 
        {
            "location": "/rest-interface/#processing", 
            "text": "Processing  is a healthy alternative to Matlab and/or Python as it allows many of the same functionality without the overhead of a complicated, large, and proprietary installation.  The Processing code below will fetch the status of the PiE server, toggle both the white and IR LEDs and then set new values on the PiE server.  // This code assumes that http.request library is installed\n// To install, select menu 'Sketch - Import Library... - Add Library...' and search for 'http requests'\nimport http.requests.GetRequest;\n\n  // search and replace 192.168.1.4 with the IP address of a PiE server\n\n  // grab the PiE server 'status' using endpoint /status\n  JSONObject status = loadJSONObject( http://192.168.1.4:5010/status );\n\n  // (0) parse the PiE server 'status' into its different pieces\n  JSONObject trial = status.getJSONObject( trial );\n  JSONObject config = trial.getJSONObject( config );\n  JSONObject hardware = config.getJSONObject( hardware );\n  JSONArray eventOut = hardware.getJSONArray( eventOut ); // eventOut is a JSON array\n\n  // specify the white and IR LED indices (these are indices into JSON eventOut array)\n  Integer whiteIdx = 1;\n  Integer irIdx = 2;\n\n  // (1) get the the initial 'state' of white and IR LEDs\n  JSONObject whiteLED = eventOut.getJSONObject(whiteIdx);\n  JSONObject irLED = eventOut.getJSONObject(irIdx);\n  println( 1 );\n  println( whiteLED 'state' was: , whiteLED.getBoolean( state ));\n  println( irLED 'state' was: , irLED.getBoolean( state ));\n\n  // (2) toggle/invert the 'state' of white and IR leds\n  Boolean newWhiteState = ! whiteLED.getBoolean( state );\n  Boolean newIRState = ! irLED.getBoolean( state );\n  println( 2 );\n  println( newWhiteState: , newWhiteState);\n  println( newIRState: , newIRState);\n\n  // convert from Boolean to int\n  // endpoint /api/v2/set/led/ ledIdx / value  expects  value  in (0,1) and not in (true, false)\n  int newWhiteStateInt = newWhiteState ? 1 : 0;\n  int newIRStateInt = newIRState ? 1 : 0;\n\n  // set the new values on the PiE server using REST endpoint /api/v2/set/led/ ledIdx / value \n  // where:\n  //     ledIdx : 1 for white, 2 for IR (e.g. whiteIdx and irIdx)\n  //     value : 1 for on, 0 for off\n  GetRequest postWhite = new GetRequest( http://192.168.1.4:5010/api/v2/set/led/  + whiteIdx +  /  + newWhiteStateInt);\n  postWhite.send();\n  GetRequest postIR = new GetRequest( http://192.168.1.4:5010/api/v2/set/led/  + irIdx +  /  + newIRStateInt);\n  postIR.send();\n\n  // (3) grab the PiE server 'status' using endpoint /status again to ensure our changes took effect\n  // You can also look at the web interface to see if the LED changes took effect !!!\n  status = loadJSONObject( http://192.168.1.4:5010/status );\n\n  // parse the PiE server 'status' into its different pieces, the same as step (0) above\n  trial = status.getJSONObject( trial );\n  config = trial.getJSONObject( config );\n  hardware = config.getJSONObject( hardware );\n  eventOut = hardware.getJSONArray( eventOut );\n  whiteLED = eventOut.getJSONObject(whiteIdx);\n  irLED = eventOut.getJSONObject(whiteIdx);\n\n  println( 3 );\n  println( whiteLED 'state' is now: , whiteLED.getBoolean( state ));\n  println( irLED 'state' is now: , irLED.getBoolean( state ));", 
            "title": "Processing"
        }, 
        {
            "location": "/trial-file/", 
            "text": "Trial files are text files to log events that occur during a video recording. Trial file names are automatically generated with the date, time, and trial number as 'yyyymmdd_hhmmss_t[trial].txt' where [trial] is the trial number.\n\n\nEvents are accumulated during each video recording, including 'record' and 'arm', and saved at the end of each recording into a trial file.\n\n\nTrial File Format\n\n\nAll trial files begin with a one line header, followed by one line of column names and then any number of events (one line per event). Trial files are comma delimited except for the one line header. Here is an example trial file with 8 events:\n\n\ndate=20180902;time=19:26:49;startTimeSeconds=1535930809.9245791;hostname=\npi15\n;id=\n;condition=\n;trialNum=4;numRepeats=1;repeatDuration=301;numRepeatsRecorded=1;repeatInfinity=\nFalse\n;scopeFilename\n;video_fps=30;video_resolution=\n640,480\n;\ndate,time,linuxSeconds,secondsSinceStart,event,value,str,tick\n20180902,19:26:49,1535930809.9245791,0.0,startTrial,4,,None\n20180902,19:26:49,1535930809.95922,0.03464078903198242,newRepeat,1,,None\n20180902,19:26:49,1535930809.9660773,0.04149818420410156,beforefilepath,1,/home/pi/video/20180902/20180902_192649_t4_r1_before.h264,None\n20180902,19:26:49,1535930809.9661162,0.04153704643249512,afterfilepath,1,/home/pi/video/20180902/20180902_192649_t4_r1_after.h264,None\n20180902,19:26:50,1535930810.1416507,0.217071533203125,frame,1,1654442841,710240.945\n20180902,19:26:50,1535930810.1694624,0.24488329887390137,frame,2,1654476158,710270.944\n20180902,19:26:51,1535930811.1701634,1.24558424949646,triggerIn,False,,711270.812\n20180902,19:26:51,1535930811.252085,1.3275058269500732,stopTrial,4,,None\n\n\n\n\nNote that the date and start time of a trial (yyyymmdd and hh:mm:ss) appears in (i) the file name, (ii) the header, and (iii) the first 'startTrial' event.\n\n\nTrial File Header\n\n\nThe trial file header is a single line with a semi-colon delimited list of token=value pairs. Tokens with a string or boolean type use double quotes (\"\") around their value. If there is no value for a string token, the double quotes are always included.\n\n\n\n\n\n\n\n\nToken\n\n\nFormat\n\n\nMeaning\n\n\n\n\n\n\n\n\n\n\ndate\n\n\nyyyymmdd\n\n\n\n\n\n\n\n\ntime\n\n\nhh:mm:ss\n\n\n\n\n\n\n\n\nstartTimeSeconds\n\n\nfloat\n\n\n\n\n\n\n\n\nhostname\n\n\nstring\n\n\nThe hostname of the Raspberry Pi. Useful to keep track of multiple machines.\n\n\n\n\n\n\nid\n\n\nstring\n\n\nThe id that is entered in the web, can be empty (e.g. \"\").interface.\n\n\n\n\n\n\ncondition\n\n\nstring\n\n\nThe condition that is entered in the web interface, can be empty (e.g. \"\").\n\n\n\n\n\n\ntrialNum\n\n\ninteger\n\n\n\n\n\n\n\n\nnumRepeats\n\n\ninteger\n\n\n\n\n\n\n\n\nrepeatDuration\n\n\nfloat\n\n\n\n\n\n\n\n\nnumRepeatsRecorded\n\n\ninteger\n\n\nThe number of repeats actually recorded. Can be different from numRepeats if the user stops the video recording before it is finished.\n\n\n\n\n\n\nrepeatInfinity\n\n\nboolean\n\n\n\n\n\n\n\n\nscopeFilename\n\n\nstring\n\n\n\n\n\n\n\n\nvideo_fps\n\n\ninteger\n\n\nThe frames-per-second of the recorded video, set in the web interface.\n\n\n\n\n\n\nvideo_resolution\n\n\nstring\n\n\nThe width and height of the video recording (in pixels). For example \"640,480\" or \"1024,768\"\n\n\n\n\n\n\n\n\nTrial File Events\n\n\nAll events begin with date, time, linuxSeconds, and secondsSinceStart tokens.\n\n\n\n\n\n\n\n\nToken\n\n\nValue\n\n\n\n\n\n\n\n\n\n\ndate\n\n\nyyyymmdd\n\n\n\n\n\n\ntime\n\n\nhh:mm:ss\n\n\n\n\n\n\nlinuxSeconds\n\n\nA long float representing the time since the linux epoch, this value comes from the Python time package time.time().\n\n\n\n\n\n\nsecondsSinceStart\n\n\nA long float representing the number of seconds (with fraciton) soince the 'start trigger was received'.\n\n\n\n\n\n\n\n\nAll events end with a 'tick' token. Tick tokens are unsigned float that represents the micro-seconds since the startTrial event. These are only used if the pigpio daemon has been activated. If the pigpiod is not active, all ticks will be logged as 'None' (without the single-quotes). Using pigpio gives better precision for GPIO events compared to the standard Python time.time() function. Keep in mind, although events are more precise, they can still be missed!\n\n\n\n\n\n\n\n\nEvent\n\n\nClass\n\n\nvalue\n\n\nstr\n\n\ntick\n\n\n\n\n\n\n\n\n\n\nstartTrial\n\n\nbTrial\n\n\nThe trial number\n\n\n\n\n\n\n\n\n\n\nstopTrial\n\n\nbTrial\n\n\nThe trial number\n\n\n\n\n\n\n\n\n\n\nnewRepeat\n\n\nbTrial\n\n\nThe repeat (epoch) number\n\n\n\n\n\n\n\n\n\n\nwhiteLED\n\n\nbTrial\n\n\n1 for on, 0 for off\n\n\n\n\n\n\n\n\n\n\nirLED\n\n\nbTrial\n\n\n1 for on, 0 for off\n\n\n\n\n\n\n\n\n\n\ntemperature\n\n\nbTrial\n\n\nThe temperature in celcius (assumes using a DHT sensor)\n\n\n\n\n\n\n\n\n\n\nhumidity\n\n\nbTrial\n\n\nThe % relative humidity (assumes using a DHT sensor)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntriggerIn\n\n\nbPins\n\n\n\n\n\n\n\n\n\n\n\n\nframe\n\n\nbPins\n\n\nThe frame number\n\n\n\n\n\n\n\n\n\n\ngeneric\n\n\nbPins\n\n\n\n\n\n\n\n\n\n\n\n\nuser2\n\n\nbPins\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbeforefilepath\n\n\nbCamera\n\n\nn/a\n\n\nFull path to pre trigger video file.\n\n\n\n\n\n\n\n\nafterfilepath\n\n\nbCamera\n\n\nn/a\n\n\nFull path to main video file. The whole point of the PiE server.\n\n\n\n\n\n\n\n\nstartArmedRecording\n\n\nbCamera\n\n\nTime armed recording was started. The code to retrieve this time is immediately after the code to start the camera. As such, it is a more precide time-stamp for the actual time the video was started.\n\n\n\n\n\n\n\n\n\n\nstopArmedRecording\n\n\nbCamera\n\n\nSame idea but at the stop of armed recording, see startArmedRecording.\n\n\n\n\n\n\n\n\n\n\nstartVideoRecord\n\n\nbCamera\n\n\nSee startArmedRecording.\n\n\n\n\n\n\n\n\n\n\nstopVideoRecord\n\n\nbCamera\n\n\nSame idea but at the stop of recording, see startArmedRecording", 
            "title": "Trial file"
        }, 
        {
            "location": "/trial-file/#trial-file-format", 
            "text": "All trial files begin with a one line header, followed by one line of column names and then any number of events (one line per event). Trial files are comma delimited except for the one line header. Here is an example trial file with 8 events:  date=20180902;time=19:26:49;startTimeSeconds=1535930809.9245791;hostname= pi15 ;id= ;condition= ;trialNum=4;numRepeats=1;repeatDuration=301;numRepeatsRecorded=1;repeatInfinity= False ;scopeFilename ;video_fps=30;video_resolution= 640,480 ;\ndate,time,linuxSeconds,secondsSinceStart,event,value,str,tick\n20180902,19:26:49,1535930809.9245791,0.0,startTrial,4,,None\n20180902,19:26:49,1535930809.95922,0.03464078903198242,newRepeat,1,,None\n20180902,19:26:49,1535930809.9660773,0.04149818420410156,beforefilepath,1,/home/pi/video/20180902/20180902_192649_t4_r1_before.h264,None\n20180902,19:26:49,1535930809.9661162,0.04153704643249512,afterfilepath,1,/home/pi/video/20180902/20180902_192649_t4_r1_after.h264,None\n20180902,19:26:50,1535930810.1416507,0.217071533203125,frame,1,1654442841,710240.945\n20180902,19:26:50,1535930810.1694624,0.24488329887390137,frame,2,1654476158,710270.944\n20180902,19:26:51,1535930811.1701634,1.24558424949646,triggerIn,False,,711270.812\n20180902,19:26:51,1535930811.252085,1.3275058269500732,stopTrial,4,,None  Note that the date and start time of a trial (yyyymmdd and hh:mm:ss) appears in (i) the file name, (ii) the header, and (iii) the first 'startTrial' event.", 
            "title": "Trial File Format"
        }, 
        {
            "location": "/trial-file/#trial-file-header", 
            "text": "The trial file header is a single line with a semi-colon delimited list of token=value pairs. Tokens with a string or boolean type use double quotes (\"\") around their value. If there is no value for a string token, the double quotes are always included.     Token  Format  Meaning      date  yyyymmdd     time  hh:mm:ss     startTimeSeconds  float     hostname  string  The hostname of the Raspberry Pi. Useful to keep track of multiple machines.    id  string  The id that is entered in the web, can be empty (e.g. \"\").interface.    condition  string  The condition that is entered in the web interface, can be empty (e.g. \"\").    trialNum  integer     numRepeats  integer     repeatDuration  float     numRepeatsRecorded  integer  The number of repeats actually recorded. Can be different from numRepeats if the user stops the video recording before it is finished.    repeatInfinity  boolean     scopeFilename  string     video_fps  integer  The frames-per-second of the recorded video, set in the web interface.    video_resolution  string  The width and height of the video recording (in pixels). For example \"640,480\" or \"1024,768\"", 
            "title": "Trial File Header"
        }, 
        {
            "location": "/trial-file/#trial-file-events", 
            "text": "All events begin with date, time, linuxSeconds, and secondsSinceStart tokens.     Token  Value      date  yyyymmdd    time  hh:mm:ss    linuxSeconds  A long float representing the time since the linux epoch, this value comes from the Python time package time.time().    secondsSinceStart  A long float representing the number of seconds (with fraciton) soince the 'start trigger was received'.     All events end with a 'tick' token. Tick tokens are unsigned float that represents the micro-seconds since the startTrial event. These are only used if the pigpio daemon has been activated. If the pigpiod is not active, all ticks will be logged as 'None' (without the single-quotes). Using pigpio gives better precision for GPIO events compared to the standard Python time.time() function. Keep in mind, although events are more precise, they can still be missed!     Event  Class  value  str  tick      startTrial  bTrial  The trial number      stopTrial  bTrial  The trial number      newRepeat  bTrial  The repeat (epoch) number      whiteLED  bTrial  1 for on, 0 for off      irLED  bTrial  1 for on, 0 for off      temperature  bTrial  The temperature in celcius (assumes using a DHT sensor)      humidity  bTrial  The % relative humidity (assumes using a DHT sensor)             triggerIn  bPins       frame  bPins  The frame number      generic  bPins       user2  bPins              beforefilepath  bCamera  n/a  Full path to pre trigger video file.     afterfilepath  bCamera  n/a  Full path to main video file. The whole point of the PiE server.     startArmedRecording  bCamera  Time armed recording was started. The code to retrieve this time is immediately after the code to start the camera. As such, it is a more precide time-stamp for the actual time the video was started.      stopArmedRecording  bCamera  Same idea but at the stop of armed recording, see startArmedRecording.      startVideoRecord  bCamera  See startArmedRecording.      stopVideoRecord  bCamera  Same idea but at the stop of recording, see startArmedRecording", 
            "title": "Trial File Events"
        }, 
        {
            "location": "/troubleshooting/", 
            "text": "The first thing to check is the PiE server log. The log can be viewed in many ways,\n\n\n\n\nFrom the web interface\n\n\nBy running the PiE server on the command line with \n./pie run\n\n\nBy directly viewing the log file with \nmore ~/pie/pie_app/pie.log\n\n\n\n\nCommon Errors\n\n\nOSError: [Errno 98] Address already in use\n\n\nThis happens when you try and start the server but it is already running. Usually when it is running in the background and you run it again with \n./pie run\n. Just stop the server with \n./pie stop\n and then try again with \n./pie run\n.\n\n\nTroubleshooting the camera\n\n\nCapture a still image with the Pi camera with:\n\n\nraspistill -o test.jpg\n\n\n\n\nIf you get any errors then there is a problem with the Pi Camera.\n\n\nMake sure the Pi Camera is activated.\n\n\n# type this at a command prompt\nsudo raspi-config\n\n# select '5 Interface Options'\n# select 'P1 Camera'\n# Answer 'Yes' to question 'Would you like the camera interface to be enabled?'\n\n\n\n\nbCamera PiCameraMMALError: Failed to enable connection: Out of resources\n\n\nIf you receive this error in the web interface or PiE server log, it means the camera is in use by some other process. The Raspberry camera can only do one thing at a time, it can stream or record but not both at the same time. In addition, the camera can not record (or stream) in two different programs simultaneously.\n\n\nMake sure other programs are not using the camera and try again. Rebooting with 'sudo reboot' usually does the trick unless these programs, like the PiE server, are set up to run at boot.\n\n\nTroubleshooting a DHT temperature/humidity sensor\n\n\nRun the simplified code in the \ntesting/\n folder. If you can't get a temperature/humidity reading with this code, it will not work within the PiE server.\n\n\nCheck the PiE server log (see above) and make sure the Adafruit DHT driver is installed and run when the PiE server is started. You should see entries in the PiE server log like this:\n\n\n[2018-10-14 09:53:59,596] {bTrial.py \nmodule\n:51} DEBUG - Loaded Adafruit_DHT\n[2018-10-14 09:54:00,168] {bTrial.py __init__:178} DEBUG - starting temperature thread\n[2018-10-14 09:54:00,172] {bTrial.py tempThread:918} INFO - tempThread() sensorTypeStr:AM2302 sensorType:22 pin:4\n\n\n\nIf the DHT driver is not installed, install it with \n./install-dht\n, restart the PiE server with \n./pie restart\n, and check the PiE server log again.\n\n\nConverting video to mp4\n\n\nThe PiE server uses \nlibav (avconv)\n to convert video from .h264 to .mp4. If libav (avconv) does not install during \n~/pie/install-pie\n, this conversion will not work.\n\n\nTroubleshooting uv4l streaming\n\n\nIn rare instances the \nuv4l\n streaming server does not stop properly. Streaming with uv4l runs at the system level and not in Python. As such, uv4l needs to be controlled via the command line.\n\n\n#list all uv4l processes\nps -aux | grep uv4l\n\n# will yield something like\nroot     23117  9.8  1.3 140796 12312 ?        Ssl  20:34   0:02 uv4l --driver raspicam --auto-video_nr --encoding h264 --width 640 --height 480 --enable-server on\npi       23262  0.0  0.1   6644  1316 pts/1    S+   20:34   0:00 grep --color=auto uv4l\n\n# kill uv4l with its process id (PID)\n# '--' is needed to kill parent and child processes\nsudo kill -- 23117\n\n#check the uv4l process is no longer running\nps -aux | grep uv4l\n\n# should yield\npi         674  0.0  0.1   6644  1320 pts/0    S+   21:06   0:00 grep --color=auto uv4l\n\n\n\n\nuv4l will not go away\n\n\nWorst case senario is \nps -aux | grep uvl4\n yields something like this\n\n\nroot     23117 17.2  0.0      0     0 ?        Zsl  20:34   0:37 [uv4l] \ndefunct\n\n\n\n\n\nIf you see the \ndefunct\n then restart the Pi with \nsudo reboot\n and it should be fixed.\n\n\nManually editing user config (json) files\n\n\nThe PiE server comes with three default sets of options: Homecage, Scope, and Treadmill. There is an additional \nUser\n configuration that can be edited manually to configure the PiE server.\n\n\nTo edit the \nUser\n file, open \npie/pie_app/config/config_user.json\n in the \npie/pie_app/config/\n folder. The format of the file is [json][json] and basically specifies key/value pairs. Do not add or remove any keys, just change their values. The json format is very strict, if there are any syntax errors, the file will not load and the PiE server will not run.\n\n\nTo check your work, use\n\n\ncd ~/pie/pie_app/config\ncat config_user.json | python -m json.tool\n\n\n\n\nIf your edits are syntatically correct, this command will output the contents of the file. If you have created an error, they will be reported on the command line. For example, if your forget a comma  after \n\"enabled\": true\n like this\n\n\n        \ntriggerIn\n: {\n            \nenabled\n: true\n            \npin\n: 23,\n            \npolarity\n: \nrising\n,\n            \npull_up_down\n: \ndown\n\n        },\n\n\n\n\nYou will get an error\n\n\nExpecting , delimiter: line 27 column 13 (char 648)\n\n\n\n\nWorking versions\n\n\nHere is a snapshot of versions for a working PiE server as of October 2018. As python packages are updated, things can potentially break.\n\n\ncd ~/pie\nsource pie_env/bin/activate # activate the Python3 virtual environment\npip freeze # print all the Phython packages and their versions\n\n# use 'deactivate' to deactivate the Python3 virtual environmnet and return to the normal command prompt\n\n\n\n\n# returns\nclick==6.7\ndnspython==1.15.0\neventlet==0.24.1\nFlask==1.0.2\nFlask-Cors==3.0.6\nFlask-SocketIO==3.0.1\ngreenlet==0.4.14\nitsdangerous==0.24\nJinja2==2.10\nMarkupSafe==1.0\nmonotonic==1.5\npicamera==1.13\npigpio==1.40.post1\npkg-resources==0.0.0\npyserial==3.4\npython-engineio==2.2.0\npython-socketio==2.0.0\nRPi.GPIO==0.6.3\nsix==1.11.0\nWerkzeug==0.14.1\n\n\n\n\npython --version\n\n\n\n\n# returns\nPython 3.5.3\n\n\n\n\ncat /etc/os-release\n\n\n\n\n# returns\nPRETTY_NAME=\nRaspbian GNU/Linux 9 (stretch)\n\nNAME=\nRaspbian GNU/Linux\n\nVERSION_ID=\n9\n\nVERSION=\n9 (stretch)\n\nID=raspbian\nID_LIKE=debian\n\n\n\n\nuname -a\n\n\n\n\n# returns\nLinux pi15 4.14.52-v7+ #1123 SMP Wed Jun 27 17:35:49 BST 2018 armv7l GNU/Linux", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/troubleshooting/#common-errors", 
            "text": "", 
            "title": "Common Errors"
        }, 
        {
            "location": "/troubleshooting/#oserror-errno-98-address-already-in-use", 
            "text": "This happens when you try and start the server but it is already running. Usually when it is running in the background and you run it again with  ./pie run . Just stop the server with  ./pie stop  and then try again with  ./pie run .", 
            "title": "OSError: [Errno 98] Address already in use"
        }, 
        {
            "location": "/troubleshooting/#troubleshooting-the-camera", 
            "text": "Capture a still image with the Pi camera with:  raspistill -o test.jpg  If you get any errors then there is a problem with the Pi Camera.  Make sure the Pi Camera is activated.  # type this at a command prompt\nsudo raspi-config\n\n# select '5 Interface Options'\n# select 'P1 Camera'\n# Answer 'Yes' to question 'Would you like the camera interface to be enabled?'", 
            "title": "Troubleshooting the camera"
        }, 
        {
            "location": "/troubleshooting/#bcamera-picamerammalerror-failed-to-enable-connection-out-of-resources", 
            "text": "If you receive this error in the web interface or PiE server log, it means the camera is in use by some other process. The Raspberry camera can only do one thing at a time, it can stream or record but not both at the same time. In addition, the camera can not record (or stream) in two different programs simultaneously.  Make sure other programs are not using the camera and try again. Rebooting with 'sudo reboot' usually does the trick unless these programs, like the PiE server, are set up to run at boot.", 
            "title": "bCamera PiCameraMMALError: Failed to enable connection: Out of resources"
        }, 
        {
            "location": "/troubleshooting/#troubleshooting-a-dht-temperaturehumidity-sensor", 
            "text": "Run the simplified code in the  testing/  folder. If you can't get a temperature/humidity reading with this code, it will not work within the PiE server.  Check the PiE server log (see above) and make sure the Adafruit DHT driver is installed and run when the PiE server is started. You should see entries in the PiE server log like this:  [2018-10-14 09:53:59,596] {bTrial.py  module :51} DEBUG - Loaded Adafruit_DHT\n[2018-10-14 09:54:00,168] {bTrial.py __init__:178} DEBUG - starting temperature thread\n[2018-10-14 09:54:00,172] {bTrial.py tempThread:918} INFO - tempThread() sensorTypeStr:AM2302 sensorType:22 pin:4  If the DHT driver is not installed, install it with  ./install-dht , restart the PiE server with  ./pie restart , and check the PiE server log again.", 
            "title": "Troubleshooting a DHT temperature/humidity sensor"
        }, 
        {
            "location": "/troubleshooting/#converting-video-to-mp4", 
            "text": "The PiE server uses  libav (avconv)  to convert video from .h264 to .mp4. If libav (avconv) does not install during  ~/pie/install-pie , this conversion will not work.", 
            "title": "Converting video to mp4"
        }, 
        {
            "location": "/troubleshooting/#troubleshooting-uv4l-streaming", 
            "text": "In rare instances the  uv4l  streaming server does not stop properly. Streaming with uv4l runs at the system level and not in Python. As such, uv4l needs to be controlled via the command line.  #list all uv4l processes\nps -aux | grep uv4l\n\n# will yield something like\nroot     23117  9.8  1.3 140796 12312 ?        Ssl  20:34   0:02 uv4l --driver raspicam --auto-video_nr --encoding h264 --width 640 --height 480 --enable-server on\npi       23262  0.0  0.1   6644  1316 pts/1    S+   20:34   0:00 grep --color=auto uv4l\n\n# kill uv4l with its process id (PID)\n# '--' is needed to kill parent and child processes\nsudo kill -- 23117\n\n#check the uv4l process is no longer running\nps -aux | grep uv4l\n\n# should yield\npi         674  0.0  0.1   6644  1320 pts/0    S+   21:06   0:00 grep --color=auto uv4l", 
            "title": "Troubleshooting uv4l streaming"
        }, 
        {
            "location": "/troubleshooting/#uv4l-will-not-go-away", 
            "text": "Worst case senario is  ps -aux | grep uvl4  yields something like this  root     23117 17.2  0.0      0     0 ?        Zsl  20:34   0:37 [uv4l]  defunct   If you see the  defunct  then restart the Pi with  sudo reboot  and it should be fixed.", 
            "title": "uv4l will not go away"
        }, 
        {
            "location": "/troubleshooting/#manually-editing-user-config-json-files", 
            "text": "The PiE server comes with three default sets of options: Homecage, Scope, and Treadmill. There is an additional  User  configuration that can be edited manually to configure the PiE server.  To edit the  User  file, open  pie/pie_app/config/config_user.json  in the  pie/pie_app/config/  folder. The format of the file is [json][json] and basically specifies key/value pairs. Do not add or remove any keys, just change their values. The json format is very strict, if there are any syntax errors, the file will not load and the PiE server will not run.  To check your work, use  cd ~/pie/pie_app/config\ncat config_user.json | python -m json.tool  If your edits are syntatically correct, this command will output the contents of the file. If you have created an error, they will be reported on the command line. For example, if your forget a comma  after  \"enabled\": true  like this           triggerIn : {\n             enabled : true\n             pin : 23,\n             polarity :  rising ,\n             pull_up_down :  down \n        },  You will get an error  Expecting , delimiter: line 27 column 13 (char 648)", 
            "title": "Manually editing user config (json) files"
        }, 
        {
            "location": "/troubleshooting/#working-versions", 
            "text": "Here is a snapshot of versions for a working PiE server as of October 2018. As python packages are updated, things can potentially break.  cd ~/pie\nsource pie_env/bin/activate # activate the Python3 virtual environment\npip freeze # print all the Phython packages and their versions\n\n# use 'deactivate' to deactivate the Python3 virtual environmnet and return to the normal command prompt  # returns\nclick==6.7\ndnspython==1.15.0\neventlet==0.24.1\nFlask==1.0.2\nFlask-Cors==3.0.6\nFlask-SocketIO==3.0.1\ngreenlet==0.4.14\nitsdangerous==0.24\nJinja2==2.10\nMarkupSafe==1.0\nmonotonic==1.5\npicamera==1.13\npigpio==1.40.post1\npkg-resources==0.0.0\npyserial==3.4\npython-engineio==2.2.0\npython-socketio==2.0.0\nRPi.GPIO==0.6.3\nsix==1.11.0\nWerkzeug==0.14.1  python --version  # returns\nPython 3.5.3  cat /etc/os-release  # returns\nPRETTY_NAME= Raspbian GNU/Linux 9 (stretch) \nNAME= Raspbian GNU/Linux \nVERSION_ID= 9 \nVERSION= 9 (stretch) \nID=raspbian\nID_LIKE=debian  uname -a  # returns\nLinux pi15 4.14.52-v7+ #1123 SMP Wed Jun 27 17:35:49 BST 2018 armv7l GNU/Linux", 
            "title": "Working versions"
        }, 
        {
            "location": "/web-interface/", 
            "text": "When the PiE sever is running, the web interface is accesible at \nhttp:/[IP]:5010\n where [IP] is the IP address of the Pi.\n\n\n\n\n\n\n\n\n\n\n\nThe top row displays the Pi hostname, IP, and current date and time. When the PiE server is running, the time will be updated each second. In addition, there are links to recorded video files, PiE server logs, environmental sensors, and the full source code and documentation on Github.\n\n\nThe 'Start Recording' and 'Start Trial' buttons start video recording to a file. All files are saved in the \n/video\n folder. At the end of each video file recording, a trial file is also saved. Trial files are plain text files with a record of 'events' that occurred during the video recording. See the \ntrial file readme\n for more information.\n\n\nWhite and IR Switches\n. Will turn White and IR lights on and off. This assumes white and IR leds for the PiE server have been wired correctly to the Raspberry Pi. Both white and IR LEDs cannot be controlled when 'Configure - Auto Lights' is on.\n\n\nID and Condition\n. These will be pre-pended to all saved file names. Leave them blank and nothing will be added. This is useful to organize your saved files with an animal ID and condition.\n\n\nStart Recording\n. Will start a video recording following 'Repeat Forever', 'Number of Repeats' and 'Repeat Duration'. These parameters can be set and saved in the \nConfigure\n section. \n\n\nStart Streaming\n. Will start streaming the camera to the web page. If the stream fails to start the first time, try turning it off and then on again. If it still does not work, refresh the page in the browser.\n\n\nArm\n. When checked, the PiE server will wait for an input trigger to start video recording. Arming is only available when 'Configure - Allow Arming' is on. Turning 'Arm' on will force 'Repeat Forever' off and 'Number of Repeats' to 1. When 'Arm' is on and an input trigger is received, video recording begins and a pre-trigger video recording will be saved. The duration of the pre-trigger video is set in 'Configure - Pre Trigger Buffer (sec)'.\n\n\nLast Action\n. Is updated with the last action the PiE server took. This is normally updated in response to clicking interface buttons.\n\n\n\n\nConfigure\n\n\n\n\n\n\n\n\n\nThe Configure section allows parameters of the PiE server to be set. Current parameters can be saved with 'Save Defaults' and will automatically be loaded the next time the PiE server is run. Make sure you save your changes with 'Save Defaults'.\n\n\nRepeat Forever\n. When checked, 'Start Recording' will record videos of 'Repeat Duration' over and over until 'Stop Recording' is pressed. When 'Arm' is on, this will be turned off.\n\n\nNumber of Repeats\n. The number of video files to record when 'Start Recording' is pressed. Each video file will have a duration set by 'Repeat Duration Sec)'. When 'Arm' is on, this will be set to 1.\n\n\nRepeat Duration (sec)\n. The length of each video file in seconds.\n\n\nAuto Lights\n. When checked, the White and IR lights will be turned on and off to simulate daytime and nighttime. The white light will be on between sunrise and sunset, the IR light will be on otherwise.\n\n\nSunrise (hour) and Sunset (hour)\n. When 'Auto Lights' is on, the White and IR lights will be turned on and off to simulate daytime and nighttime.\n\n\nFPS\n. Specifies the frames-per-second (FPS) or recorded video. Minimum is 1 and maximum is 90.\n\n\nResolution\n. Specifies the resolution of recorded video.\n\n\nStream Resolution\n. Specifies the resolution of streaming video.\n\n\nCapture Still and Still Interval (Sec)\n. If on, still images will be captured at 'Still Interval (Sec)'. These still images can be viewed in real-time in the 'Last Still Image' section.\n\n\nPre Trigger Buffer (sec)\n. Used for 'Armed' recording. Specifies the duration of video recording before an input trigger.\n\n\nVideo Annotation and Annotation Font Size\n. Annotate text on top of video recording. Select one of: none, date, time, date time, elapsed, or video frame.\n\n\nInclude Hostname\n. If checked, the hostname will be pre-pended to each saved video file.\n\n\nTrial Number\n. Allows the trial number to be manually set. The trial number is always automatically incremented each time 'Start Recording' or 'Start Trial' are initiated.\n\n\nAllow Arming\n. If on, will activate the 'Arm' interface. This assumes the PiE server has been wired to a 'trigger in' and optionally a microscope 'frame clock'.\n\n\nUse Serial\n. If on, will activate the 'Motor' interface. This assumes a Teensy microcontroller is attached via usb.\n\n\nLoad\n. Buttons to load presets of configuration parameters. This includes 'Defaults',  the last configuration saved with 'Save Defaults' as well as pre-defined configuration parameters. It is easy to set your own configuration parameters and use 'Save Defaults' exclusively.\n\n\n\n\nDefaults\n. Load the last configuration saved with 'Save Defaults'. These are also loaded when the PiE server is first run.\n\n\nHomecage\n. Auto lights on, arm off, serial off.\n\n\nScope\n. Arm on, serial off.\n\n\nTreadmill\n. Arm on, serial on.\n\n\nUser\n. Only for advanced users. User specified configuration file. \n\n\nFactory Defaults\n.  Reset the PiE server to its factory default configuration.\n\n\n\n\n\n\nPins\n\n\n\n\n\n\n\n\n\nThe Pins section allows GPIO pin parameters to be specified. All parameters in the 'Pins' section will be save with '\nConfigure - Save Defaults\n'. Each pin can be independenlty enabled/disabled, please disable pins you are not using.\n\n\nInput Pins\n. The \ntriggerIn\n and \nframe\n pins are used during armed recording and their parameters need to be set to match the signals coming off your particular hardware/scope. For example, if your scope outputs a \nrising\n trigger then \ntriggerIn\n should be set to Polarity \nrising\n and Pull Up/Down to \ndown\n.\n\n\nOutput Pins\n. The \ntriggerOut\n pin is set at the start of armed recording and can be used to trigger external devices when the PiE server is used as a slave. The \nwhiteLED\n and \nirLED\n pins are turned on/off when the white and IR toggles switches are set in the main web interface.\n\n\nTo change 'Pin' numbers, the configuration json files need to be manually edited. These can be found in \npie_app/config\n folder.\n\n\nDHT Temperature/Humidity\n. This assumes you have installed the Adafruit DHT temperature sensor driver with \n./install-dht\n. If 'enabled' is checked, temperature and humidity will be logged to a \ntrial file\n during video recording at the specified 'interval (sec)'. If 'continuous' is checked, temperature and humidity readings will still be looged to a \ntrial file\n during video recording but will also be continuosly logged at the specified 'interval (sec)' wether video is recording or not. The continuous log can be accessed on a separate page, named environment, using the thermometer icon. The temperature and humidity log file is in \nvideo/logs/environment.log\n. If you change these options and they do not take effect, try restarting the PiE server in the web interface 'Debug' section.\n\n\n\n\nMotor\n\n\n\n\n\n\n\n\n\nThe Motor section allows parameters to be uploaded to a Teensy microcontroller. This is only for advanced users. Activate this section by turning on 'Configure - Use Serial'.\n\n\nDebug\n\n\nThis section reports all parameters received from the PiE server. Use 'Restart Pie Server' to restart the PiE server. Note, this restarts the PiE server software, it does not reboot the machine.", 
            "title": "Web interface"
        }, 
        {
            "location": "/web-interface/#configure", 
            "text": "The Configure section allows parameters of the PiE server to be set. Current parameters can be saved with 'Save Defaults' and will automatically be loaded the next time the PiE server is run. Make sure you save your changes with 'Save Defaults'.  Repeat Forever . When checked, 'Start Recording' will record videos of 'Repeat Duration' over and over until 'Stop Recording' is pressed. When 'Arm' is on, this will be turned off.  Number of Repeats . The number of video files to record when 'Start Recording' is pressed. Each video file will have a duration set by 'Repeat Duration Sec)'. When 'Arm' is on, this will be set to 1.  Repeat Duration (sec) . The length of each video file in seconds.  Auto Lights . When checked, the White and IR lights will be turned on and off to simulate daytime and nighttime. The white light will be on between sunrise and sunset, the IR light will be on otherwise.  Sunrise (hour) and Sunset (hour) . When 'Auto Lights' is on, the White and IR lights will be turned on and off to simulate daytime and nighttime.  FPS . Specifies the frames-per-second (FPS) or recorded video. Minimum is 1 and maximum is 90.  Resolution . Specifies the resolution of recorded video.  Stream Resolution . Specifies the resolution of streaming video.  Capture Still and Still Interval (Sec) . If on, still images will be captured at 'Still Interval (Sec)'. These still images can be viewed in real-time in the 'Last Still Image' section.  Pre Trigger Buffer (sec) . Used for 'Armed' recording. Specifies the duration of video recording before an input trigger.  Video Annotation and Annotation Font Size . Annotate text on top of video recording. Select one of: none, date, time, date time, elapsed, or video frame.  Include Hostname . If checked, the hostname will be pre-pended to each saved video file.  Trial Number . Allows the trial number to be manually set. The trial number is always automatically incremented each time 'Start Recording' or 'Start Trial' are initiated.  Allow Arming . If on, will activate the 'Arm' interface. This assumes the PiE server has been wired to a 'trigger in' and optionally a microscope 'frame clock'.  Use Serial . If on, will activate the 'Motor' interface. This assumes a Teensy microcontroller is attached via usb.  Load . Buttons to load presets of configuration parameters. This includes 'Defaults',  the last configuration saved with 'Save Defaults' as well as pre-defined configuration parameters. It is easy to set your own configuration parameters and use 'Save Defaults' exclusively.   Defaults . Load the last configuration saved with 'Save Defaults'. These are also loaded when the PiE server is first run.  Homecage . Auto lights on, arm off, serial off.  Scope . Arm on, serial off.  Treadmill . Arm on, serial on.  User . Only for advanced users. User specified configuration file.   Factory Defaults .  Reset the PiE server to its factory default configuration.", 
            "title": "Configure"
        }, 
        {
            "location": "/web-interface/#pins", 
            "text": "The Pins section allows GPIO pin parameters to be specified. All parameters in the 'Pins' section will be save with ' Configure - Save Defaults '. Each pin can be independenlty enabled/disabled, please disable pins you are not using.  Input Pins . The  triggerIn  and  frame  pins are used during armed recording and their parameters need to be set to match the signals coming off your particular hardware/scope. For example, if your scope outputs a  rising  trigger then  triggerIn  should be set to Polarity  rising  and Pull Up/Down to  down .  Output Pins . The  triggerOut  pin is set at the start of armed recording and can be used to trigger external devices when the PiE server is used as a slave. The  whiteLED  and  irLED  pins are turned on/off when the white and IR toggles switches are set in the main web interface.  To change 'Pin' numbers, the configuration json files need to be manually edited. These can be found in  pie_app/config  folder.  DHT Temperature/Humidity . This assumes you have installed the Adafruit DHT temperature sensor driver with  ./install-dht . If 'enabled' is checked, temperature and humidity will be logged to a  trial file  during video recording at the specified 'interval (sec)'. If 'continuous' is checked, temperature and humidity readings will still be looged to a  trial file  during video recording but will also be continuosly logged at the specified 'interval (sec)' wether video is recording or not. The continuous log can be accessed on a separate page, named environment, using the thermometer icon. The temperature and humidity log file is in  video/logs/environment.log . If you change these options and they do not take effect, try restarting the PiE server in the web interface 'Debug' section.", 
            "title": "Pins"
        }, 
        {
            "location": "/web-interface/#motor", 
            "text": "The Motor section allows parameters to be uploaded to a Teensy microcontroller. This is only for advanced users. Activate this section by turning on 'Configure - Use Serial'.", 
            "title": "Motor"
        }, 
        {
            "location": "/web-interface/#debug", 
            "text": "This section reports all parameters received from the PiE server. Use 'Restart Pie Server' to restart the PiE server. Note, this restarts the PiE server software, it does not reboot the machine.", 
            "title": "Debug"
        }, 
        {
            "location": "/wiring-behavior-box/", 
            "text": "Wiring a behavior box\n\n\nWiring a behavior box is fairly simple. The Pi needs to be wired to one end of a relay/switch, the other end of the relay/switch is wired to 12V DC, IR and white LEDs, and the temperature/humidity sensor is wired to the Pi.\n\n\nRaspberry Pi 2/3 pin out\n\n\n\n\nThere are multiple power and ground pins, use these to connect to the relay switch and the temperature sensor. Conceptually, all the ground pins are the same, you can use a \nbread-board\n if you run out of ground pins or the wiring becomes too tangled.\n\n\nWiring the camera\n\n\nThe Raspberry Pi \nNoIR camera\n (and the \nnormal Pi camera\n) is connected to the Pi with a flat [ribbon cable][flat-camera-cable]. The length should not exceed 2 meters. The cable should have one side with a blue tab (one on each end). When connecting the cable to the camera and the Pi, the direction of the blue tab matters. If it is backwards, the camera will not function.\n\n\n\n\nThe blue side of the cable must go towards the back of the camera.\n\n\nThe blue side of the cable must go towards the ethernet and USB ports.\n\n\n\n\nFinally, the camera must be activated from the command line using \nsudo raspi-config\n and choosing '5 Interface Options' then 'P1 Camera' and answering 'Yes'.\n\n\nWiring diagram\n\n\n\n\nLights\n\n\nUse an external 12V AC/DC power supply.\n - Don't power the lights directly from the 5V pins on the Pi, the Pi does not have enough current. A \n1 Amp 12V adapter should be fine. Don't worry, if it is under-powered, the LED lights will be a little dim.\n\n\nUse a relay switch.\n - Never connect the 12V adapter directly to the Pi, instead use a relay switch. Only work with DC current coming out of the AC/DC adapter, \nDO NOT\n work with AC power coming from the wall as it can kill you.\n\n\nThe relay switch effectively separates the 5V, Ground, and GPIO on the Pi (left half of the relay) from the 12V power of the AC/DC adapter and the lights (right half of the relay). Here we will wire the system with the white LED on channel 1 and the IR LED on channel 2 of the relay switch. \n\n\nAll LEDs need resistors.\n - All LEDs need a resistor, these are called 'current limiting resistor'. If you directly connect an LED to power and ground without a resistor, you will burn the LED.\n\n\nThe value of the resistor (in Ohms) needs to be calculated using \nOhms law\n, V=I*R. Where:\n\n\n\n\nV (Volts) is determined by the power source\n\n\nI (Amps) depends on the properties of each LED and if they are wired in series or in parallel\n\n\nR (Ohms) is what needs to be calculated.\n\n\n\n\nFollow \nthis\n tutorial to get started calculating the required resistor value. \n\n\nUse IR LEDs \n900 nm.\n - These are within the sensitivity range of the Pi NoIR camera. A lot of IR LEDs are 940nm, these are not well suited for use with the Pi NoIR camera but are designed for IR sensors as is used in a TV remote.\n\n\nWiring the lights\n\n\n\n\nConnect a 12V AC/DC adapter, IR, and white lights to the two-channel relay switch.\n\n\n\n\n\n\nUsing a 12V AC/DC adapter (\n1 Amp), cut the wire and stick the positive 'hot' wire into the center 'common' pin' of channel 1 on the relay switch. The 'hot' end wire usually has a white line down the length of the wire. You can also determine the 'hot' end using a multi-meter, it is the one that gives a positive (+) voltage when attached to the positive (normally red) end of the multi-meter.\n\n\n\n\n\n\nCut a bit of wire and connect the center 'common pin' of channel 1 to the center 'common pin' of channel 2. This is the 'hot' end.\n\n\n\n\n\n\nStick the positive end of the white LED into the 'normally closed' port of channel 1. Attach the negative end of the white LED to the 'ground' wire of the 12V AC/DC adapter. Remember, all LEDs need resistors!\n\n\n\n\n\n\nDo the same for the IR LED. Stick the positive end into the 'normally closed' port of channel 2 on the relay switch. Attach the negative end of the IR LED to the 'ground' wire of the 12V AC/DC adapter. Remember, all LEDs need resistors!\n\n\n\n\n\n\nTie the three grounds together, this includes the ground from the 12V AC/DC adapter, the white LEDs and the IR LEDs.\n\n\n\n\n\n\nConnect the Pi to the relay switch switch\n\n\nConnect 4 wires from the Pi to the relay switch. All these wires go on the opposite end from the 12V wires. Look at your relay switch for the correct connects, they are usually clearly labelled but can be in a different order from the image shown.\n\n\n\n\nConnect a GPIO pin from the Pi to the 'In1=Digital Input' pin on the relay switch.\n\n\nConnect a second GPIO pin from the Pi to the 'In2=Digital Input' pin on the relay switch.\n\n\nConnect a 5V pin from the Pi to the 'Vcc' pin on the relay switch.\n\n\nConnect a ground pin from the Pi to the 'GND' pin on the relay switch.\n\n\n\n\nWiring a temperature and humidity sensor\n\n\nThe PiE server can log temperature and humidity using the DHT line of temperature sensors. To use these sensors, the \nAdafruit Python sensor library\n needs to to be installed.\n\n\ncd ~/pie\n./install-dht\n\n\n\n\nThere are additional troubleshooting tips in the \npie/testing/\n folder.\n\n\n\n\nAM2302\n\n\nRed is power, black is ground, and yellow is data.\n\n\n\n\nConnect a 5V pin from the Pi to the red wire on the sensor.\n\n\nConnect a ground pin from the Pi to the back wire on the sensor.\n\n\nConnect a GPIO pin from the Pi to the yellow (data) pin on the sensor.\n\n\n\n\n\n\nDHT22\n\n\n\n\nConnect a 5V pin from the Pi to the 'VCC' pin on the sensor.\n\n\nConnect a ground pin from the Pi to the 'GND' pin on the sensor.\n\n\nConnect a GPIO pin from the Pi to the 'DATA' pin on the sensor.", 
            "title": "Wiring a behavior box"
        }, 
        {
            "location": "/wiring-behavior-box/#wiring-a-behavior-box", 
            "text": "Wiring a behavior box is fairly simple. The Pi needs to be wired to one end of a relay/switch, the other end of the relay/switch is wired to 12V DC, IR and white LEDs, and the temperature/humidity sensor is wired to the Pi.", 
            "title": "Wiring a behavior box"
        }, 
        {
            "location": "/wiring-behavior-box/#raspberry-pi-23-pin-out", 
            "text": "There are multiple power and ground pins, use these to connect to the relay switch and the temperature sensor. Conceptually, all the ground pins are the same, you can use a  bread-board  if you run out of ground pins or the wiring becomes too tangled.", 
            "title": "Raspberry Pi 2/3 pin out"
        }, 
        {
            "location": "/wiring-behavior-box/#wiring-the-camera", 
            "text": "The Raspberry Pi  NoIR camera  (and the  normal Pi camera ) is connected to the Pi with a flat [ribbon cable][flat-camera-cable]. The length should not exceed 2 meters. The cable should have one side with a blue tab (one on each end). When connecting the cable to the camera and the Pi, the direction of the blue tab matters. If it is backwards, the camera will not function.   The blue side of the cable must go towards the back of the camera.  The blue side of the cable must go towards the ethernet and USB ports.   Finally, the camera must be activated from the command line using  sudo raspi-config  and choosing '5 Interface Options' then 'P1 Camera' and answering 'Yes'.", 
            "title": "Wiring the camera"
        }, 
        {
            "location": "/wiring-behavior-box/#wiring-diagram", 
            "text": "", 
            "title": "Wiring diagram"
        }, 
        {
            "location": "/wiring-behavior-box/#lights", 
            "text": "Use an external 12V AC/DC power supply.  - Don't power the lights directly from the 5V pins on the Pi, the Pi does not have enough current. A  1 Amp 12V adapter should be fine. Don't worry, if it is under-powered, the LED lights will be a little dim.  Use a relay switch.  - Never connect the 12V adapter directly to the Pi, instead use a relay switch. Only work with DC current coming out of the AC/DC adapter,  DO NOT  work with AC power coming from the wall as it can kill you.  The relay switch effectively separates the 5V, Ground, and GPIO on the Pi (left half of the relay) from the 12V power of the AC/DC adapter and the lights (right half of the relay). Here we will wire the system with the white LED on channel 1 and the IR LED on channel 2 of the relay switch.   All LEDs need resistors.  - All LEDs need a resistor, these are called 'current limiting resistor'. If you directly connect an LED to power and ground without a resistor, you will burn the LED.  The value of the resistor (in Ohms) needs to be calculated using  Ohms law , V=I*R. Where:   V (Volts) is determined by the power source  I (Amps) depends on the properties of each LED and if they are wired in series or in parallel  R (Ohms) is what needs to be calculated.   Follow  this  tutorial to get started calculating the required resistor value.   Use IR LEDs  900 nm.  - These are within the sensitivity range of the Pi NoIR camera. A lot of IR LEDs are 940nm, these are not well suited for use with the Pi NoIR camera but are designed for IR sensors as is used in a TV remote.", 
            "title": "Lights"
        }, 
        {
            "location": "/wiring-behavior-box/#wiring-the-lights", 
            "text": "", 
            "title": "Wiring the lights"
        }, 
        {
            "location": "/wiring-behavior-box/#connect-a-12v-acdc-adapter-ir-and-white-lights-to-the-two-channel-relay-switch", 
            "text": "Using a 12V AC/DC adapter ( 1 Amp), cut the wire and stick the positive 'hot' wire into the center 'common' pin' of channel 1 on the relay switch. The 'hot' end wire usually has a white line down the length of the wire. You can also determine the 'hot' end using a multi-meter, it is the one that gives a positive (+) voltage when attached to the positive (normally red) end of the multi-meter.    Cut a bit of wire and connect the center 'common pin' of channel 1 to the center 'common pin' of channel 2. This is the 'hot' end.    Stick the positive end of the white LED into the 'normally closed' port of channel 1. Attach the negative end of the white LED to the 'ground' wire of the 12V AC/DC adapter. Remember, all LEDs need resistors!    Do the same for the IR LED. Stick the positive end into the 'normally closed' port of channel 2 on the relay switch. Attach the negative end of the IR LED to the 'ground' wire of the 12V AC/DC adapter. Remember, all LEDs need resistors!    Tie the three grounds together, this includes the ground from the 12V AC/DC adapter, the white LEDs and the IR LEDs.", 
            "title": "Connect a 12V AC/DC adapter, IR, and white lights to the two-channel relay switch."
        }, 
        {
            "location": "/wiring-behavior-box/#connect-the-pi-to-the-relay-switch-switch", 
            "text": "Connect 4 wires from the Pi to the relay switch. All these wires go on the opposite end from the 12V wires. Look at your relay switch for the correct connects, they are usually clearly labelled but can be in a different order from the image shown.   Connect a GPIO pin from the Pi to the 'In1=Digital Input' pin on the relay switch.  Connect a second GPIO pin from the Pi to the 'In2=Digital Input' pin on the relay switch.  Connect a 5V pin from the Pi to the 'Vcc' pin on the relay switch.  Connect a ground pin from the Pi to the 'GND' pin on the relay switch.", 
            "title": "Connect the Pi to the relay switch switch"
        }, 
        {
            "location": "/wiring-behavior-box/#wiring-a-temperature-and-humidity-sensor", 
            "text": "The PiE server can log temperature and humidity using the DHT line of temperature sensors. To use these sensors, the  Adafruit Python sensor library  needs to to be installed.  cd ~/pie\n./install-dht  There are additional troubleshooting tips in the  pie/testing/  folder.", 
            "title": "Wiring a temperature and humidity sensor"
        }, 
        {
            "location": "/wiring-behavior-box/#am2302", 
            "text": "Red is power, black is ground, and yellow is data.   Connect a 5V pin from the Pi to the red wire on the sensor.  Connect a ground pin from the Pi to the back wire on the sensor.  Connect a GPIO pin from the Pi to the yellow (data) pin on the sensor.", 
            "title": "AM2302"
        }, 
        {
            "location": "/wiring-behavior-box/#dht22", 
            "text": "Connect a 5V pin from the Pi to the 'VCC' pin on the sensor.  Connect a ground pin from the Pi to the 'GND' pin on the sensor.  Connect a GPIO pin from the Pi to the 'DATA' pin on the sensor.", 
            "title": "DHT22"
        }, 
        {
            "location": "/wiring-scope/", 
            "text": "Wiring a scope\n\n\nThis is a tutorial for wiring tactile-push-buttons to trigger a \nframe\n and a \ntrigger-in\n in a PiE server.\n\n\nThis tutorial requires:\n\n\n\n\nA \nbreadboard\n.\n\n\nSome \njumper wires\n.\n\n\nTwo \ntactile push buttons\n.\n\n\nA functioning Raspberry Pi.\n\n\nA \nPiE server\n to be installed.\n\n\n\n\nRaspberry Pi 3 pin out\n\n\nHere is a schematic of the Raspberry Pi 2/3 pin outs. Red is 5V, orange is 3.3V, yellow are GPIO, black are Ground, and white should not be used.\n\n\n\n\nImportant: The Raspberry Pi GPIO pins are \nnot\n 5V tolerant. Never connect a 5V line to a Raspberry GPIO pin.\n\n\n1) Test the PiE server 'frame' pin with a tactile-button-switch\n\n\nHere, we will wire a tactile-button-switch to the the Raspberry Pi 3.3V line and the PiE \nframe\n pin (GPIO 18) to test that pushing the button registers a \nframe\n in the PiE server. This button will normally sit at \nLOW\n and take on a '3.3V ' level when pushed.\n\n\n\n\n\n\n1) Wire the Raspberry Pi 3.3V pin to the '+' rail on a breadboard (red).\n\n\n\n\n\n\n2) Insert a \nTactile-button-switch\n on the breadboard.\n\n\n\n\n\n\n3) Connect the \ntop-left\n pin of the Tactile-button-switch to the '+' rail on the breadboard (red).\n\n\n\n\n4) Connect the \ntop-right\n pin of the Tactile-button-switch to the Raspberry Pi \nGPIO 23\n.\n\n\n5) The remaining \nbottom-left\n and \nbottom-right\n pins on the tactile-button-switch should \nnot\n be connected to anything.\n\n\n\n\nMake sure the PiE server is running with \n./pie run\n so we can see the output in the terminal.\n\n\ncd ~/pie\n./pie stop # stop any background PiE servers\n./pie run # run the PiE server on the command line\n\n\n\n\nIn the 'Pins' section, configure the triggerIn pin to Polarity 'rising' and Pull Up/Down to 'down'. Do the same for the 'frame' pin.\n\n\n\n\nMake sure 'Allow arming' is checked in the Configure section.\n\n\nPush the \nframe\n tactile-button-switch and you should see see something like this on the command line:\n\n\n!!! received frame when not running\n\n\n\n\nIf you do see this\n\n\nGood. Your \nframe\n pin is working.\n\n\nIf you \ndo not\n see this\n\n\nSTOP\n your \nframe\n pin is \nnot\n working. Please check your wiring and try again.\n\n\n2) Test the PiE server 'trigger-in' pin with a tactile-button-switch\n\n\nHere, we will wire a tactile-button-switch to the Raspberry Pi 3.3V line and the PiE 'triggerIn' pin (GPIO 23) to test that pushing the button starts a 'trial' in the PiE server. This push-button will normally sit at \nLOW\n and take on a '3.3V' level when pushed.\n\n\n\n\n\n\n1) Wire the Raspberry Pi 3.3V pin to the '+' rail on a breadboard (red).\n\n\n\n\n\n\n2) Insert a \nTactile-button-switch\n on the breadboard.\n\n\n\n\n\n\n3) Connect the \ntop-left\n pin of the Tactile-button-switch to the '+' rail on the breadboard (red).\n\n\n\n\n4) Connect the \ntop-right\n pin of the Tactile-button-switch to the Raspberry Pi \nGPIO 24\n.\n\n\n5) The remaining \nbottom-left\n and \nbottom-right\n pins on the tactile-button-switch should \nnot\n be connected to anything.\n\n\n\n\nMake sure the PiE server is running with \n./pie run\n so we can see the output in the terminal.\n\n\ncd ~/pie\n./pie stop # stop any background PiE servers\n./pie run # run the PiE server on the command line\n\n\n\n\nMake sure 'Allow arming' is checked in the Configure section.\n\n\nPush the \ntrigger-in\n tactile-button-switch and you should see something like this on the command line:\n\n\n!!! received triggerIn_Callback() when camera is NOT armed\n\n\n\n\nIf you do see this\n\n\nGood. Your \ntrigger-in\n pin is working.\n\n\nIf you \ndo not\n see this\n\n\nSTOP\n your \ntrigger-in\n pin is \nnot\n working. Please check your wiring and try again.\n\n\nOnce your trigger-in pin and tactile-button-switch are working\n\n\nGo into the web interface and \narm\n the recording with the arm checkbox.\n\n\nPush the \ntrigger-in\n tactile-button-switch and video should start recording and you should see this in the command prompt:\n\n\n[2018-07-09 08:48:26,556] {bTrial.py startTrial:702} DEBUG - startTrial startArmVideo=True\n[2018-07-09 08:48:26,559] {bTrial.py startTrial:721} INFO - triggerOut pin:15 value:True\n\n\n\n\nThen, while the recording is still going, push the \nframe\n tactile-button-switch and you should see\n\n\n[2018-07-09 08:49:08,884] {bTrial.py eventIn_Callback:614} DEBUG - eventIn_Callback() frame 1\n[2018-07-09 08:49:09,027] {bTrial.py eventIn_Callback:614} DEBUG - eventIn_Callback() frame 2\n[2018-07-09 08:49:09,312] {bTrial.py eventIn_Callback:614} DEBUG - eventIn_Callback() frame 3\n\n\n\n\nOnce you done this for awhile, click the disk icon in the top tool-bar and view your videos and trial .txt files. Your videos should be watermarked with frame numbers and the .txt file should log the frame times. You will see two video files per trial, a before and after video. The after video is started when a trial is started, the before video is a 'pre-trigger' video whose length is set with 'Pre Trigger Buffer (sec)'. \n\n\n3) Connecting triggerIn, triggerOut, and frame pins to a scope.\n\n\nFollowing the same logic, we can connect the Raspberry Pi \ntriggerIn\n to the 'Scope Trigger Out', the Raspberry \ntriggerOut\n to the 'scope Trigger In', and the Raspberry Pi \nframe\n in pin to the 'Scope Frame Out'. Keep in mind that the definition of 'in' versus 'out' is with respect to the device you are talking about.\n\n\nImportant: The Raspberry Pi GPIO pins are \nnot\n 5V tolerant. Never connect a 5V line to a Raspberry GPIO pin. We use a level-shifter to convert high voltage 5V to 3V.\n\n\nIf your scope sends a rising \nhigh\n pulse for 'trigger out' and 'frame out' you can follow steps #1 and #2 above. If your scope sends a falling \nlow\n pulse for either of these, you need to configure the 'pins' section of the web interface as polarity \nfalling\n and Pull Up/Down as \nup\n.\n\n\nRaspberry Pi as the master (Scope is slave)\n\n\nTo have the PiE server trigger your scope (Raspberry Pi is master), use the Raspberry \ntriggerOut\n pin. In the web interface, if the 'Default Setting' for the \ntriggerOut\n pin is set to 'false' then the PiE server will hold this pin \nLOW\n and send a 'positive' \nHIGH\n pulse when you click 'Start Trial'. The opposite is also true, if the 'Default Setting' for the \ntriggerOut\n pin is set to 'true', the PiE server will hold this pin \nHIGH\n and send a \nLOW\n pulse when you click 'Start Trial'. You need to figure out what signal your scope is expecting for a trigger, it is either \nHIGH\n or \nLOW\n.\n\n\nRaspberry Pi as the slave (Scope is master)\n\n\nTo have your scope trigger the PiE server (Scope is master), use the Raspberry \ntriggerIn\n pin. In the web interface you 'arm' the Raspberry to 'wait for trigger' using the 'arm' checkbox.\n\n\nTroubleshooting\n\n\nIf you run into trouble it is best to independently test each component of the system. In this case, you would use a volt-meter to test the signals coming off your scope are what you expect.\n\n\nWiring diagram", 
            "title": "Wiring a scope"
        }, 
        {
            "location": "/wiring-scope/#wiring-a-scope", 
            "text": "This is a tutorial for wiring tactile-push-buttons to trigger a  frame  and a  trigger-in  in a PiE server.  This tutorial requires:   A  breadboard .  Some  jumper wires .  Two  tactile push buttons .  A functioning Raspberry Pi.  A  PiE server  to be installed.", 
            "title": "Wiring a scope"
        }, 
        {
            "location": "/wiring-scope/#raspberry-pi-3-pin-out", 
            "text": "Here is a schematic of the Raspberry Pi 2/3 pin outs. Red is 5V, orange is 3.3V, yellow are GPIO, black are Ground, and white should not be used.   Important: The Raspberry Pi GPIO pins are  not  5V tolerant. Never connect a 5V line to a Raspberry GPIO pin.", 
            "title": "Raspberry Pi 3 pin out"
        }, 
        {
            "location": "/wiring-scope/#1-test-the-pie-server-frame-pin-with-a-tactile-button-switch", 
            "text": "Here, we will wire a tactile-button-switch to the the Raspberry Pi 3.3V line and the PiE  frame  pin (GPIO 18) to test that pushing the button registers a  frame  in the PiE server. This button will normally sit at  LOW  and take on a '3.3V ' level when pushed.    1) Wire the Raspberry Pi 3.3V pin to the '+' rail on a breadboard (red).    2) Insert a  Tactile-button-switch  on the breadboard.    3) Connect the  top-left  pin of the Tactile-button-switch to the '+' rail on the breadboard (red).   4) Connect the  top-right  pin of the Tactile-button-switch to the Raspberry Pi  GPIO 23 .  5) The remaining  bottom-left  and  bottom-right  pins on the tactile-button-switch should  not  be connected to anything.   Make sure the PiE server is running with  ./pie run  so we can see the output in the terminal.  cd ~/pie\n./pie stop # stop any background PiE servers\n./pie run # run the PiE server on the command line  In the 'Pins' section, configure the triggerIn pin to Polarity 'rising' and Pull Up/Down to 'down'. Do the same for the 'frame' pin.   Make sure 'Allow arming' is checked in the Configure section.  Push the  frame  tactile-button-switch and you should see see something like this on the command line:  !!! received frame when not running", 
            "title": "1) Test the PiE server 'frame' pin with a tactile-button-switch"
        }, 
        {
            "location": "/wiring-scope/#if-you-do-see-this", 
            "text": "Good. Your  frame  pin is working.", 
            "title": "If you do see this"
        }, 
        {
            "location": "/wiring-scope/#if-you-do-not-see-this", 
            "text": "STOP  your  frame  pin is  not  working. Please check your wiring and try again.", 
            "title": "If you do not see this"
        }, 
        {
            "location": "/wiring-scope/#2-test-the-pie-server-trigger-in-pin-with-a-tactile-button-switch", 
            "text": "Here, we will wire a tactile-button-switch to the Raspberry Pi 3.3V line and the PiE 'triggerIn' pin (GPIO 23) to test that pushing the button starts a 'trial' in the PiE server. This push-button will normally sit at  LOW  and take on a '3.3V' level when pushed.    1) Wire the Raspberry Pi 3.3V pin to the '+' rail on a breadboard (red).    2) Insert a  Tactile-button-switch  on the breadboard.    3) Connect the  top-left  pin of the Tactile-button-switch to the '+' rail on the breadboard (red).   4) Connect the  top-right  pin of the Tactile-button-switch to the Raspberry Pi  GPIO 24 .  5) The remaining  bottom-left  and  bottom-right  pins on the tactile-button-switch should  not  be connected to anything.   Make sure the PiE server is running with  ./pie run  so we can see the output in the terminal.  cd ~/pie\n./pie stop # stop any background PiE servers\n./pie run # run the PiE server on the command line  Make sure 'Allow arming' is checked in the Configure section.  Push the  trigger-in  tactile-button-switch and you should see something like this on the command line:  !!! received triggerIn_Callback() when camera is NOT armed", 
            "title": "2) Test the PiE server 'trigger-in' pin with a tactile-button-switch"
        }, 
        {
            "location": "/wiring-scope/#if-you-do-see-this_1", 
            "text": "Good. Your  trigger-in  pin is working.", 
            "title": "If you do see this"
        }, 
        {
            "location": "/wiring-scope/#if-you-do-not-see-this_1", 
            "text": "STOP  your  trigger-in  pin is  not  working. Please check your wiring and try again.", 
            "title": "If you do not see this"
        }, 
        {
            "location": "/wiring-scope/#once-your-trigger-in-pin-and-tactile-button-switch-are-working", 
            "text": "Go into the web interface and  arm  the recording with the arm checkbox.  Push the  trigger-in  tactile-button-switch and video should start recording and you should see this in the command prompt:  [2018-07-09 08:48:26,556] {bTrial.py startTrial:702} DEBUG - startTrial startArmVideo=True\n[2018-07-09 08:48:26,559] {bTrial.py startTrial:721} INFO - triggerOut pin:15 value:True  Then, while the recording is still going, push the  frame  tactile-button-switch and you should see  [2018-07-09 08:49:08,884] {bTrial.py eventIn_Callback:614} DEBUG - eventIn_Callback() frame 1\n[2018-07-09 08:49:09,027] {bTrial.py eventIn_Callback:614} DEBUG - eventIn_Callback() frame 2\n[2018-07-09 08:49:09,312] {bTrial.py eventIn_Callback:614} DEBUG - eventIn_Callback() frame 3  Once you done this for awhile, click the disk icon in the top tool-bar and view your videos and trial .txt files. Your videos should be watermarked with frame numbers and the .txt file should log the frame times. You will see two video files per trial, a before and after video. The after video is started when a trial is started, the before video is a 'pre-trigger' video whose length is set with 'Pre Trigger Buffer (sec)'.", 
            "title": "Once your trigger-in pin and tactile-button-switch are working"
        }, 
        {
            "location": "/wiring-scope/#3-connecting-triggerin-triggerout-and-frame-pins-to-a-scope", 
            "text": "Following the same logic, we can connect the Raspberry Pi  triggerIn  to the 'Scope Trigger Out', the Raspberry  triggerOut  to the 'scope Trigger In', and the Raspberry Pi  frame  in pin to the 'Scope Frame Out'. Keep in mind that the definition of 'in' versus 'out' is with respect to the device you are talking about.  Important: The Raspberry Pi GPIO pins are  not  5V tolerant. Never connect a 5V line to a Raspberry GPIO pin. We use a level-shifter to convert high voltage 5V to 3V.  If your scope sends a rising  high  pulse for 'trigger out' and 'frame out' you can follow steps #1 and #2 above. If your scope sends a falling  low  pulse for either of these, you need to configure the 'pins' section of the web interface as polarity  falling  and Pull Up/Down as  up .", 
            "title": "3) Connecting triggerIn, triggerOut, and frame pins to a scope."
        }, 
        {
            "location": "/wiring-scope/#raspberry-pi-as-the-master-scope-is-slave", 
            "text": "To have the PiE server trigger your scope (Raspberry Pi is master), use the Raspberry  triggerOut  pin. In the web interface, if the 'Default Setting' for the  triggerOut  pin is set to 'false' then the PiE server will hold this pin  LOW  and send a 'positive'  HIGH  pulse when you click 'Start Trial'. The opposite is also true, if the 'Default Setting' for the  triggerOut  pin is set to 'true', the PiE server will hold this pin  HIGH  and send a  LOW  pulse when you click 'Start Trial'. You need to figure out what signal your scope is expecting for a trigger, it is either  HIGH  or  LOW .", 
            "title": "Raspberry Pi as the master (Scope is slave)"
        }, 
        {
            "location": "/wiring-scope/#raspberry-pi-as-the-slave-scope-is-master", 
            "text": "To have your scope trigger the PiE server (Scope is master), use the Raspberry  triggerIn  pin. In the web interface you 'arm' the Raspberry to 'wait for trigger' using the 'arm' checkbox.", 
            "title": "Raspberry Pi as the slave (Scope is master)"
        }, 
        {
            "location": "/wiring-scope/#troubleshooting", 
            "text": "If you run into trouble it is best to independently test each component of the system. In this case, you would use a volt-meter to test the signals coming off your scope are what you expect.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/wiring-scope/#wiring-diagram", 
            "text": "", 
            "title": "Wiring diagram"
        }, 
        {
            "location": "/wiring-treadmill/", 
            "text": "Wiring a treadmill\n\n\nOverview\n\n\nThe treadmill \nstepper motor\n is controlled with a \nmotor controller\n which is controlled by a \nTeensy\n. The Teensy is attached to the Pi via USB and code is uploaded using the command line program \nplatformio\n. Once the code is running on the Teensy, the PiE server (in pie/pie_app/bTrial.py) uses a serial connection to set treadmill motor parameters. The Teensy logs all events within a trial to memory. At the end of a trial, the PiE server (again in pie/pie_app/bTrial.py) downloads all the events and saves them to a file.\n\n\nThe Teensy code is in \npie/platformio/treadmill/src/treadmill2.cpp\n. \n\n\nAttaching a Teensy to the Raspberry Pi\n\n\nAttach a Teensy microcontroller to the Pi using a USB cable. Code is uploaded using a command line program called \nplatformio\n. For how to do this, please refer to the \npie/platformio\n readme. \n\n\nParts\n\n\nSee the main \nparts\n page, scroll down to the treadmill section.\n\n\nWiring\n\n\nThis is a full wiring diagram for microscope triggered video recording and using a Teensy and motor controller with a motorized treadmill. This wiring diagram is made with \nFritzing\n, download the original \npie.fzz\n file if you like.\n\n\nThere are lots of connections here, they can be conceptualized as 4 different subsystems.\n\n\n\n\nWiring the Teensy  to \nScope Trigger In\n, \nScope Trigger Out\n, and \nScope Frame out\n.\n\n\nWiring the Teensy to the Raspberry Pi\n\n\nWiring the stepper motor to the motor controller.\n\n\nWiring the motor controller to the Teensy\n\n\n\n\n\n\nImportant\n\n\n\n\n\n\nThe Raspberry Pi is \nNOT\n 5V tolerant. Connecting standard lab equipment using 5V TTL pulses can damage the Pi. These 5V lines can be converted to 3V with a \ndedicated level shifter\n. Or, if you are using a Teensy, these 5V lines can pass through the Teensy which \nIS\n 5V tolerant but then outputs 3V which can go into the Raspberry Pi. In this way, the Teensy can act as a programmable \nlevel shifter\n.\n\n\n\n\n\n\nThe \nEasy Driver\n Motor Driver has a nasty feature. If you connect the 12V line to the board, the Stepper motor \nmust\n be plugged in or else you will fry the driver board. Thus, check the stepper motor is connected before plugging in the 12V line and check the 12V line is not plugged in before disconnecting the stepper motor.\n\n\n\n\n\n\nPin table\n\n\nDownload \nthis\n pdf for a table of all pin connections between the Raspberry, motor controller, and Teensy.\n\n\nSerial interface\n\n\nThe treadmill2.cpp code sets up serial communication at 115200 baud.\n\n\nAll serial commands are a single line and must end in a carriage return (ascii 13). If a serial command is not understood by the treadmill code, it will return 'treadmill did not handle serial: ...'.\n\n\n\n\n\n\n\n\nCommand\n\n\nActions\n\n\nReturns\n\n\n\n\n\n\n\n\n\n\nh\n\n\nHelp\n\n\nA list of commands\n\n\n\n\n\n\nv\n\n\nGet version\n\n\nVersion\n\n\n\n\n\n\np\n\n\nGet state\n\n\nThe state of all parameters as name=value pairs\n\n\n\n\n\n\nd\n\n\nDump Trial\n\n\nAll events that occurred during the last trial, one line per event. Each event contains a comma separated list of (timestamp, event name, value).\n\n\n\n\n\n\nstart\n\n\nStart Trial\n\n\nNone\n\n\n\n\n\n\nstop\n\n\nStop Trial\n\n\nNone\n\n\n\n\n\n\nset,name,value\n\n\nSet a parameter (name) to a value (value). See table below.\n\n\nname=value\n\n\n\n\n\n\n\n\nThe command to 'set' a parameter (name) to a value (value) takes the following parameter 'names'. If a 'set' command is not understood, 'SetValue() did not handle ...' is returned.\n\n\n\n\n\n\n\n\nname\n\n\nmeaning\n\n\npossible values\n\n\n\n\n\n\n\n\n\n\nnumEpoch\n\n\nNumber of epochs\n\n\nUnsigned Integer\n\n\n\n\n\n\nepochDur\n\n\nEpoch duration (ms)\n\n\nUnsigned Integer\n\n\n\n\n\n\npreDur\n\n\nPre duration (ms). Specifies a duration before all epochs.\n\n\nUnsigned Integer\n\n\n\n\n\n\npostDur\n\n\nPost duration (ms). Specifies a duation after all epochs.\n\n\nUnsigned Integer\n\n\n\n\n\n\nuseMotor\n\n\nUse the motor during a trial\n\n\nString in (\"motorOn\", \"\")\n\n\n\n\n\n\nmotorDel\n\n\nDelay before turning the motor in an epoch (ms)\n\n\nUnsigned Integer\n\n\n\n\n\n\nmotorDur\n\n\nDuration to turn the motor in an epoch (ms)\n\n\nUnsigned Integer\n\n\n\n\n\n\nmotorSpeed\n\n\nSpeed to turn the motor(au)\n\n\nUnsigned Integer, 100...700 from slow to fast.\n\n\n\n\n\n\narm\n\n\nArm the treadmill to start a trial in response to changes in startTrialPin pin\n\n\nString in (\"True\", \"False\")\n\n\n\n\n\n\nduringPulse\n\n\nWhat to do with motor during motorDur\n\n\nString in (\"Rotate\", \"Locked\", \"Free\")\n\n\n\n\n\n\nbetweenPulse\n\n\nWhat to do with motor outside of motor dur\n\n\nString in (\"Locked\", \"Free\")\n\n\n\n\n\n\n\n\nSome examples, \n\n\n\n\nTo set the number of epochs to 5, use \nset,numEpoch,5\n.\n\n\nTo arm the treadmill, use \nset,arm,True\n\n\nTo have the treadmill free to turn between pulses, use \nset,betweenPulse,Free\n\n\n\n\nUsing the serial interface on the command line\n\n\nA simple yet esoteric command line program called \nscreen\n can be used to establish a serial connection with an Arduino/Teensy on the command line.\n\n\nInstall \nscreen\n\n\nsudo apt-get install screen\n\n\n\nUse \nscreen\n to connect to serial port. This assumes your Arduino/Teensy is at \n/dev/ttyACM0\n.\n\n\nscreen /dev/ttyACM0 115200\n\n\n\nEnter some serial commands manually\n\n\nh\nv\nset,numEpoch,5\nd\n\n\n\nYou might have to hit \nreturn\n to get it going. Quit screen with \nctrl+a\n then type \n:\n then type \nquit", 
            "title": "Wiring a treadmill"
        }, 
        {
            "location": "/wiring-treadmill/#wiring-a-treadmill", 
            "text": "", 
            "title": "Wiring a treadmill"
        }, 
        {
            "location": "/wiring-treadmill/#overview", 
            "text": "The treadmill  stepper motor  is controlled with a  motor controller  which is controlled by a  Teensy . The Teensy is attached to the Pi via USB and code is uploaded using the command line program  platformio . Once the code is running on the Teensy, the PiE server (in pie/pie_app/bTrial.py) uses a serial connection to set treadmill motor parameters. The Teensy logs all events within a trial to memory. At the end of a trial, the PiE server (again in pie/pie_app/bTrial.py) downloads all the events and saves them to a file.  The Teensy code is in  pie/platformio/treadmill/src/treadmill2.cpp .", 
            "title": "Overview"
        }, 
        {
            "location": "/wiring-treadmill/#attaching-a-teensy-to-the-raspberry-pi", 
            "text": "Attach a Teensy microcontroller to the Pi using a USB cable. Code is uploaded using a command line program called  platformio . For how to do this, please refer to the  pie/platformio  readme.", 
            "title": "Attaching a Teensy to the Raspberry Pi"
        }, 
        {
            "location": "/wiring-treadmill/#parts", 
            "text": "See the main  parts  page, scroll down to the treadmill section.", 
            "title": "Parts"
        }, 
        {
            "location": "/wiring-treadmill/#wiring", 
            "text": "This is a full wiring diagram for microscope triggered video recording and using a Teensy and motor controller with a motorized treadmill. This wiring diagram is made with  Fritzing , download the original  pie.fzz  file if you like.  There are lots of connections here, they can be conceptualized as 4 different subsystems.   Wiring the Teensy  to  Scope Trigger In ,  Scope Trigger Out , and  Scope Frame out .  Wiring the Teensy to the Raspberry Pi  Wiring the stepper motor to the motor controller.  Wiring the motor controller to the Teensy", 
            "title": "Wiring"
        }, 
        {
            "location": "/wiring-treadmill/#important", 
            "text": "The Raspberry Pi is  NOT  5V tolerant. Connecting standard lab equipment using 5V TTL pulses can damage the Pi. These 5V lines can be converted to 3V with a  dedicated level shifter . Or, if you are using a Teensy, these 5V lines can pass through the Teensy which  IS  5V tolerant but then outputs 3V which can go into the Raspberry Pi. In this way, the Teensy can act as a programmable  level shifter .    The  Easy Driver  Motor Driver has a nasty feature. If you connect the 12V line to the board, the Stepper motor  must  be plugged in or else you will fry the driver board. Thus, check the stepper motor is connected before plugging in the 12V line and check the 12V line is not plugged in before disconnecting the stepper motor.", 
            "title": "Important"
        }, 
        {
            "location": "/wiring-treadmill/#pin-table", 
            "text": "Download  this  pdf for a table of all pin connections between the Raspberry, motor controller, and Teensy.", 
            "title": "Pin table"
        }, 
        {
            "location": "/wiring-treadmill/#serial-interface", 
            "text": "The treadmill2.cpp code sets up serial communication at 115200 baud.  All serial commands are a single line and must end in a carriage return (ascii 13). If a serial command is not understood by the treadmill code, it will return 'treadmill did not handle serial: ...'.     Command  Actions  Returns      h  Help  A list of commands    v  Get version  Version    p  Get state  The state of all parameters as name=value pairs    d  Dump Trial  All events that occurred during the last trial, one line per event. Each event contains a comma separated list of (timestamp, event name, value).    start  Start Trial  None    stop  Stop Trial  None    set,name,value  Set a parameter (name) to a value (value). See table below.  name=value     The command to 'set' a parameter (name) to a value (value) takes the following parameter 'names'. If a 'set' command is not understood, 'SetValue() did not handle ...' is returned.     name  meaning  possible values      numEpoch  Number of epochs  Unsigned Integer    epochDur  Epoch duration (ms)  Unsigned Integer    preDur  Pre duration (ms). Specifies a duration before all epochs.  Unsigned Integer    postDur  Post duration (ms). Specifies a duation after all epochs.  Unsigned Integer    useMotor  Use the motor during a trial  String in (\"motorOn\", \"\")    motorDel  Delay before turning the motor in an epoch (ms)  Unsigned Integer    motorDur  Duration to turn the motor in an epoch (ms)  Unsigned Integer    motorSpeed  Speed to turn the motor(au)  Unsigned Integer, 100...700 from slow to fast.    arm  Arm the treadmill to start a trial in response to changes in startTrialPin pin  String in (\"True\", \"False\")    duringPulse  What to do with motor during motorDur  String in (\"Rotate\", \"Locked\", \"Free\")    betweenPulse  What to do with motor outside of motor dur  String in (\"Locked\", \"Free\")     Some examples,    To set the number of epochs to 5, use  set,numEpoch,5 .  To arm the treadmill, use  set,arm,True  To have the treadmill free to turn between pulses, use  set,betweenPulse,Free", 
            "title": "Serial interface"
        }, 
        {
            "location": "/wiring-treadmill/#using-the-serial-interface-on-the-command-line", 
            "text": "A simple yet esoteric command line program called  screen  can be used to establish a serial connection with an Arduino/Teensy on the command line.  Install  screen  sudo apt-get install screen  Use  screen  to connect to serial port. This assumes your Arduino/Teensy is at  /dev/ttyACM0 .  screen /dev/ttyACM0 115200  Enter some serial commands manually  h\nv\nset,numEpoch,5\nd  You might have to hit  return  to get it going. Quit screen with  ctrl+a  then type  :  then type  quit", 
            "title": "Using the serial interface on the command line"
        }
    ]
}