{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Raspberry Pi Controlled Experiment (PiE) Getting started Follow the install instruction and then control the PiE server with the web interface . Build Options Video recording. Use the PiE server to record video. All that is needed is a Raspberry Pi and a Pi camera. Behavior Box . Use the PiE server to record video, control IR and white lights, and log the temperature/humidity. On the scope video recording . Use the PiE server to trigger video recording from a microscope and to log eevents (including microscope frame) to a file . Full treadmill system . Use the PiE server to record synchronized video on a scope (option 3) while controlling a motorized treadmill. Disclaimer This repository is a work in progess. It is functioning in my hands and fingers but may not in yours. Please email robert.cudmore [at] gmail.com with questions or better yet, open an issue . If this code is used in any way, please be a good scientist/colleague and give me credit. If you see utility in this system and would like to see it customized for a particular experiment, contact me and we can collaborate.","title":"Home"},{"location":"#raspberry-pi-controlled-experiment-pie","text":"","title":"Raspberry Pi Controlled Experiment (PiE)"},{"location":"#getting-started","text":"Follow the install instruction and then control the PiE server with the web interface .","title":"Getting started"},{"location":"#build-options","text":"Video recording. Use the PiE server to record video. All that is needed is a Raspberry Pi and a Pi camera. Behavior Box . Use the PiE server to record video, control IR and white lights, and log the temperature/humidity. On the scope video recording . Use the PiE server to trigger video recording from a microscope and to log eevents (including microscope frame) to a file . Full treadmill system . Use the PiE server to record synchronized video on a scope (option 3) while controlling a motorized treadmill.","title":"Build Options"},{"location":"#disclaimer","text":"This repository is a work in progess. It is functioning in my hands and fingers but may not in yours. Please email robert.cudmore [at] gmail.com with questions or better yet, open an issue . If this code is used in any way, please be a good scientist/colleague and give me credit. If you see utility in this system and would like to see it customized for a particular experiment, contact me and we can collaborate.","title":"Disclaimer"},{"location":"about/","text":"The PiE server was designed, coded, and is maintained by Robert Cudmore . History This project is evolving from 2016 to present. It began as more than three different projects, one for video recording , one for the home-cage/behavior box , and another for the treadmill . The functionality of all these projects have been merged into the current PiE server. Open Source The PiE server only exists because of the massive amount of hard-work, creativity, and expertise that has been put in to creating and maintaining a multiplicity of open-source software projects. \"Genius is one percent inspiration, ninety-nine percent perspiration\" --- Thomas Edison \"Successful Projects Are The Result Of 99% Hard Work, 1% Innovation\u201d --- Linus Torvalds Raspberry Pi Raspberry Pi Foundation for making the hardware Raspian for making the operating system Raspberry GPIO Pigpio PiCamera Server Debian - Operating system NGINX - Web server for load balancing, microservices, and API gateways uwsgi - Web standard for NGINX to talk to Python Python (back-end) Flask - Web microframework Socketio - Bidirectional communication between web browser and Python SciPy - Scientific computing ecosystem NumPy - Scientific computing for Python Pandas - Data analysis library Matplotlib - Plotting Tifffile - General purpose Tiff file library Redis - Database Celery - Distributed task queue Javascript (front-end) Angular - Superheroic Javascript framework JQuery D3 - Data driven documents Leaflet - Interactive maps Plotly - Modern visualization for the data era Bootstrap - Worlds most popular HTML/CSS/JS Toolkit Containers Docker - Software containers are the future Documentation Jekyll - Static site generator (Main Map Manager documentation) mkDocs - Static site generator (This Website) Sphinx - To create documentation ( PyMapManager API Documentation ) Distribution Github - Software development platform for online storage/sharing/computation PyPi - Python package index for online distribution Travis - Test and Deploy with Confidence","title":"About"},{"location":"about/#history","text":"This project is evolving from 2016 to present. It began as more than three different projects, one for video recording , one for the home-cage/behavior box , and another for the treadmill . The functionality of all these projects have been merged into the current PiE server.","title":"History"},{"location":"about/#open-source","text":"The PiE server only exists because of the massive amount of hard-work, creativity, and expertise that has been put in to creating and maintaining a multiplicity of open-source software projects. \"Genius is one percent inspiration, ninety-nine percent perspiration\" --- Thomas Edison \"Successful Projects Are The Result Of 99% Hard Work, 1% Innovation\u201d --- Linus Torvalds","title":"Open Source"},{"location":"about/#raspberry-pi","text":"Raspberry Pi Foundation for making the hardware Raspian for making the operating system Raspberry GPIO Pigpio PiCamera","title":"Raspberry Pi"},{"location":"about/#server","text":"Debian - Operating system NGINX - Web server for load balancing, microservices, and API gateways uwsgi - Web standard for NGINX to talk to Python","title":"Server"},{"location":"about/#python-back-end","text":"Flask - Web microframework Socketio - Bidirectional communication between web browser and Python SciPy - Scientific computing ecosystem NumPy - Scientific computing for Python Pandas - Data analysis library Matplotlib - Plotting Tifffile - General purpose Tiff file library Redis - Database Celery - Distributed task queue","title":"Python (back-end)"},{"location":"about/#javascript-front-end","text":"Angular - Superheroic Javascript framework JQuery D3 - Data driven documents Leaflet - Interactive maps Plotly - Modern visualization for the data era Bootstrap - Worlds most popular HTML/CSS/JS Toolkit","title":"Javascript (front-end)"},{"location":"about/#containers","text":"Docker - Software containers are the future","title":"Containers"},{"location":"about/#documentation","text":"Jekyll - Static site generator (Main Map Manager documentation) mkDocs - Static site generator (This Website) Sphinx - To create documentation ( PyMapManager API Documentation )","title":"Documentation"},{"location":"about/#distribution","text":"Github - Software development platform for online storage/sharing/computation PyPi - Python package index for online distribution Travis - Test and Deploy with Confidence","title":"Distribution"},{"location":"commander/","text":"Commander is a web server (port 8000) to control any number of PiE servers running on different computers (port 5010). Install cd ~/pie/commander ./install-commander Browse http://[IP]:8000 Once install-commander is finished and assuming there are no errors, the commander interface can be browsed at http://[IP]:8000 where [IP] is the IP address of your Raspberry Pi. Starting and stopping commander server The commander server is designed to run in the background and can be controlled using the ~/pie/commander_app/commander command. cd ~/pie/commander_app ./commander start - start the background commander server ./commander stop - stop the backgorund commander server ./commander restart - restart the background commander server ./commander status - get the status of the background commander server ./commander enable - start the background commander server at boot ./commander disable - do not start the background commander server at boot ==================== ./commander run - run commander on command line If you run into trouble with the commander, run it on the command line to see the output with ./commander run . Web interface Editing IP addresses In the config section, turn on 'edit ip' checkbox. Enter a valid IP and hit enter. If the IP is for a running PiE server (no port number needed), the red (bad connection) will be replaced with the current status of the specified PiE server. Warnings and errors When a PiE server is connected, the corresponding row in 'Server Swarm' will be filled in and active. When there is a connection error, the first column will appear red and all other controls will be inactive. When the drive space remaining goes below 5 GB, the 'File' column will be displayed in red. Currently, there is no interface to set this trip-point, 5 GB is hard-coded in the commander index.html. Feel free to change it yourself. Troubleshooting Run the commander manually install-commander installs a python virtual env in ~/pie/commander_app/commander_env. The commander server needs to be run in this environment. # activate virtual environment in commander_env cd ~/pie/commander_app source commander_env/bin/activate # command prompt should now start with '(commander_env)'. # run the commander server manually python commander.py Example screen shot of the commander controlling 8 PiE servers.","title":"Commander"},{"location":"commander/#install","text":"cd ~/pie/commander ./install-commander","title":"Install"},{"location":"commander/#browse","text":"http://[IP]:8000 Once install-commander is finished and assuming there are no errors, the commander interface can be browsed at http://[IP]:8000 where [IP] is the IP address of your Raspberry Pi.","title":"Browse"},{"location":"commander/#starting-and-stopping-commander-server","text":"The commander server is designed to run in the background and can be controlled using the ~/pie/commander_app/commander command. cd ~/pie/commander_app ./commander start - start the background commander server ./commander stop - stop the backgorund commander server ./commander restart - restart the background commander server ./commander status - get the status of the background commander server ./commander enable - start the background commander server at boot ./commander disable - do not start the background commander server at boot ==================== ./commander run - run commander on command line If you run into trouble with the commander, run it on the command line to see the output with ./commander run .","title":"Starting and stopping commander server"},{"location":"commander/#web-interface","text":"","title":"Web interface"},{"location":"commander/#editing-ip-addresses","text":"In the config section, turn on 'edit ip' checkbox. Enter a valid IP and hit enter. If the IP is for a running PiE server (no port number needed), the red (bad connection) will be replaced with the current status of the specified PiE server.","title":"Editing IP addresses"},{"location":"commander/#warnings-and-errors","text":"When a PiE server is connected, the corresponding row in 'Server Swarm' will be filled in and active. When there is a connection error, the first column will appear red and all other controls will be inactive. When the drive space remaining goes below 5 GB, the 'File' column will be displayed in red. Currently, there is no interface to set this trip-point, 5 GB is hard-coded in the commander index.html. Feel free to change it yourself.","title":"Warnings and errors"},{"location":"commander/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"commander/#run-the-commander-manually","text":"install-commander installs a python virtual env in ~/pie/commander_app/commander_env. The commander server needs to be run in this environment. # activate virtual environment in commander_env cd ~/pie/commander_app source commander_env/bin/activate # command prompt should now start with '(commander_env)'. # run the commander server manually python commander.py","title":"Run the commander manually"},{"location":"commander/#example-screen-shot-of-the-commander-controlling-8-pie-servers","text":"","title":"Example screen shot of the commander controlling 8 PiE servers."},{"location":"file-server/","text":"This is a recipe for configuring a Raspberry Pi as a file-server. Once configured as a file-server, files on the Raspberry Pi can be easily opened/edited/copied from a remote computer. This is useful for copying recorded video off the Raspberry Pi to another (remote) computer for archiving and analysis. If you are working on a Windows machine, you need to use Samba . If you are working on macOS you want to use AFP but can also use Samba . Samba (SMB) This is a recipe to make a Raspberry Pi a Samba (SMB) file-server that can be accessed from both Windows and macOS. 1) Install Samba sudo apt-get install samba samba-common-bin 2) Edit /etc/samba/smb.conf sudo pico /etc/samba/smb.conf When using the pico editor, ctrl+x to save and quit, ctrl+w to search, ctrl+v to page down. Remember, the pico editor does not respond to mouse clicks, you need to move the cursor around with arrow keys. 3) Add the following to the end of the smb.conf file. In the Pico editor, move the cursor to the end of the file and copy and paste the following. [video] Comment = Pi video shared folder Path = /home/pi/video Browseable = yes Writeable = yes only guest = no create mask = 0777 directory mask = 0777 Public = yes Guest ok = no [home] Comment = Pi shared folder Path = /home/pi Browseable = yes Writeable = yes only guest = no create mask = 0777 directory mask = 0777 Public = yes Guest ok = no 4) Create a Samba password sudo smbpasswd -a pi 5) Restart Samba sudo /etc/init.d/samba restart 6) Test the server from another machine on the network. On a Windows machine, mount the Raspberry Pi Samba file-server with smb:\\\\[piIP] where [piIP] is the IP address of your pi. Do this by clicking the 'Start' menu and then typing smb:\\\\[piIP] . Apple-File-Protocol (AFP) This is a recipe to make a Raspberry Pi an Apple-File-Protocol (AFP) file-server that can be accessed from macOS. 1) Install netatalk sudo apt-get install netatalk Once netatalk is installed, the Raspberry Pi will show up in the macOS Finder 'Shared' section. The Pi can be mounted in the macOS Finder by going to Go - Connect To Server... and entering afp://[piIP] where [piIP] is the IP address of your Pi. 2) Changing the default name of a Pi in netatalk When a Pi is mounted in macOS using AFP, it will mount as Home Directory . If you have multiple Raspberry Pi computers they all mount with the same 'Home Directory' name which can be confusing. Thus, you want to change the 'mount point' name of each Raspberry Pi. For more information, see this blog post to change the name of the mount point from 'Home Directory'. Or just follow along ... Stop netatalk sudo /etc/init.d/netatalk stop Edit the netatalk config file sudo pico /etc/netatalk/AppleVolumes.default When using the pico editor, ctrl+x to save and quit, ctrl+w to search, ctrl+v to page down. Remember, the pico editor does not respond to mouse clicks, you need to move the cursor around with arrow keys. Scroll to the bottom of the file and change this one line where 'the_name_you_want' should be the name you want the given Raspberry Pi to mount as. The '#' is used as a comment and is ignored. # By default all users have access to their home directories. #~/ Home Directory ~/ the_name_you_want 3) Restart netatalk sudo /etc/init.d/netatalk start 4) Test the server from another machine on the network. In the macOS Finder, go to Go - Connect To Server... and enter afp://[piIP] where [piIP] is the IP address of your Pi.","title":"File Server"},{"location":"file-server/#samba-smb","text":"This is a recipe to make a Raspberry Pi a Samba (SMB) file-server that can be accessed from both Windows and macOS.","title":"Samba (SMB)"},{"location":"file-server/#1-install-samba","text":"sudo apt-get install samba samba-common-bin","title":"1) Install Samba"},{"location":"file-server/#2-edit-etcsambasmbconf","text":"sudo pico /etc/samba/smb.conf When using the pico editor, ctrl+x to save and quit, ctrl+w to search, ctrl+v to page down. Remember, the pico editor does not respond to mouse clicks, you need to move the cursor around with arrow keys.","title":"2) Edit /etc/samba/smb.conf"},{"location":"file-server/#3-add-the-following-to-the-end-of-the-smbconf-file","text":"In the Pico editor, move the cursor to the end of the file and copy and paste the following. [video] Comment = Pi video shared folder Path = /home/pi/video Browseable = yes Writeable = yes only guest = no create mask = 0777 directory mask = 0777 Public = yes Guest ok = no [home] Comment = Pi shared folder Path = /home/pi Browseable = yes Writeable = yes only guest = no create mask = 0777 directory mask = 0777 Public = yes Guest ok = no","title":"3) Add the following to the end of the smb.conf file."},{"location":"file-server/#4-create-a-samba-password","text":"sudo smbpasswd -a pi","title":"4) Create a Samba password"},{"location":"file-server/#5-restart-samba","text":"sudo /etc/init.d/samba restart","title":"5) Restart Samba"},{"location":"file-server/#6-test-the-server-from-another-machine-on-the-network","text":"On a Windows machine, mount the Raspberry Pi Samba file-server with smb:\\\\[piIP] where [piIP] is the IP address of your pi. Do this by clicking the 'Start' menu and then typing smb:\\\\[piIP] .","title":"6) Test the server from another machine on the network."},{"location":"file-server/#apple-file-protocol-afp","text":"This is a recipe to make a Raspberry Pi an Apple-File-Protocol (AFP) file-server that can be accessed from macOS.","title":"Apple-File-Protocol (AFP)"},{"location":"file-server/#1-install-netatalk","text":"sudo apt-get install netatalk Once netatalk is installed, the Raspberry Pi will show up in the macOS Finder 'Shared' section. The Pi can be mounted in the macOS Finder by going to Go - Connect To Server... and entering afp://[piIP] where [piIP] is the IP address of your Pi.","title":"1) Install netatalk"},{"location":"file-server/#2-changing-the-default-name-of-a-pi-in-netatalk","text":"When a Pi is mounted in macOS using AFP, it will mount as Home Directory . If you have multiple Raspberry Pi computers they all mount with the same 'Home Directory' name which can be confusing. Thus, you want to change the 'mount point' name of each Raspberry Pi. For more information, see this blog post to change the name of the mount point from 'Home Directory'. Or just follow along ... Stop netatalk sudo /etc/init.d/netatalk stop Edit the netatalk config file sudo pico /etc/netatalk/AppleVolumes.default When using the pico editor, ctrl+x to save and quit, ctrl+w to search, ctrl+v to page down. Remember, the pico editor does not respond to mouse clicks, you need to move the cursor around with arrow keys. Scroll to the bottom of the file and change this one line where 'the_name_you_want' should be the name you want the given Raspberry Pi to mount as. The '#' is used as a comment and is ignored. # By default all users have access to their home directories. #~/ Home Directory ~/ the_name_you_want","title":"2) Changing the default name of a Pi in netatalk"},{"location":"file-server/#3-restart-netatalk","text":"sudo /etc/init.d/netatalk start","title":"3) Restart netatalk"},{"location":"file-server/#4-test-the-server-from-another-machine-on-the-network","text":"In the macOS Finder, go to Go - Connect To Server... and enter afp://[piIP] where [piIP] is the IP address of your Pi.","title":"4) Test the server from another machine on the network."},{"location":"gpio-timing/","text":"The Raspberry Pi is running a fully functional operating system which provides many features including USB, ethernet, and HDMI. Thus, there will be unpredictable delays in receiving and generating general purpose input and output (GPIO). The PiE server uses the Raspberry GPIO python package by default and will use the pigpio daemon if it is installed and running. The GPIO package has a jitter of approximately +/- 2 ms for all DIO with occasional, 1%, events having absurd jitter on the order of 100-200 ms. This includes trigger in, frame in, and any output. If you are using the PiE server to record video this should be fine. If you want more precision, either offload your timing critical tasks on a Teensy or use the Raspberry pigpiod daemon. See the Jupyter notebooks in the pie/analysis/ folder for a comparising of frame arrival times using GPIO versus pigpio. Download and install pigpio cd rm pigpio.zip sudo rm -rf PIGPIO wget abyz.me.uk/rpi/pigpio/pigpio.zip unzip pigpio.zip cd PIGPIO make sudo make install To start the pigpio daemon sudo pigpiod To stop the pigpio daemon sudo killall pigpiod","title":"GPIO Timing"},{"location":"gpio-timing/#download-and-install-pigpio","text":"cd rm pigpio.zip sudo rm -rf PIGPIO wget abyz.me.uk/rpi/pigpio/pigpio.zip unzip pigpio.zip cd PIGPIO make sudo make install","title":"Download and install pigpio"},{"location":"gpio-timing/#to-start-the-pigpio-daemon","text":"sudo pigpiod","title":"To start the pigpio daemon"},{"location":"gpio-timing/#to-stop-the-pigpio-daemon","text":"sudo killall pigpiod","title":"To stop the pigpio daemon"},{"location":"images/","text":"table, td, th { border: 0px solid #ddd; text-align: left; } table { border-collapse: collapse; width: 100%; } th, td { padding: 15px; } These are images of the behavior box at different development stages. Behavior Box v0.0 Overview Lights and camera Rats nest v1.0 Coming soon... Treadmill Detailed view of circular treadmill including 10\" acrylic disk (top) Actobotics frame (horizontal aluminum arm) Stepper motor (bottom) Rotary encoder (left) Gears to couple the motor and disk to the rotary encoder Treadmill on the scope","title":"Images"},{"location":"images/#behavior-box","text":"","title":"Behavior Box"},{"location":"images/#v00","text":"","title":"v0.0"},{"location":"images/#overview","text":"","title":"Overview"},{"location":"images/#lights-and-camera","text":"","title":"Lights and camera"},{"location":"images/#rats-nest","text":"","title":"Rats nest"},{"location":"images/#v10","text":"Coming soon...","title":"v1.0"},{"location":"images/#treadmill","text":"Detailed view of circular treadmill including 10\" acrylic disk (top) Actobotics frame (horizontal aluminum arm) Stepper motor (bottom) Rotary encoder (left) Gears to couple the motor and disk to the rotary encoder","title":"Treadmill"},{"location":"images/#treadmill-on-the-scope","text":"","title":"Treadmill on the scope"},{"location":"install/","text":"Install the PiE server 1) Get a functioning Raspberry Pi We assume you have a functioning Raspberry Pi 2/3. To get started, see our installation recipe. 2) Download the code # update your system sudo apt-get update sudo apt-get upgrade # if you don't already have git sudo apt-get install git # clone the main PiE repository cd git clone https://github.com/cudmore/pie.git 3) Install the PiE server cd ~/pie ./install-pie Thats it, the PiE server should be running and you can use the web interface at http://[ip]:5010 . Where [ip] is the IP address of your Raspberry Pi. Make sure you specify port 5010 in the web address. By default, the PiE server will start when the Raspberry Pi is booted. 4) Install uv4l for video streaming. The uv4l software runs at the system level (not within the PiE folder) and only needs to be installed once per machine. cd ~/pie ./install-uv4l 5) Install the DHT temperature/humidity sensor Python package (optional) If you are using a DHT temperature/humidity sensor , the Adafruit DHT python package needs to be installed. cd ~/pie ./install-dht 6) Checking the status of the PiE server. If all goes well, the web interface is all this is needed. If the PiE server does not work as expected, it is useful to check its log file. Do this from the web interface or from the command line with: more ~/pie/pie_app/pie.log 7) Controlling the PiE server from the command line The pie/install-pie script installs a system service allowing the PiE server to run in the background. This background PiE server can be controlled as follows: cd ~/pie ./pie start - start background PiE server ./pie stop - stop background PiE server ./pie status - check the status of background PiE server ./pie enable - enable background PiE server at boot ./pie disable - disable background PiE server at boot ./pie run - run PiE server on command line For debugging, use ./pie run to print the PiE server log to the command line. The logs can also be viewed from the web interface or the command line using more ~/pie/pie_app/pie.log . Running the PiE server at boot By default, the PiE server will run when the Raspberry Pi is booted and this can be controlled as follows. # To make the background server run at boot cd ~/pie ./pie enable # To make the background server NOT run at boot cd ~/pie ./pie disable Manually running the PiE server Normally, the PiE server will run in the background after installation with './install-pie'. If there are errors during the install or the PiE server is not running, the pie server can be run manually as follows. # stop background pie server cd ~/pie ./pie stop # activate the pie server python virtual environment in pie_env/ # Once activated, the command prompt will start with (pie_env) cd ~/pie source pie_env/bin/activate # manually run the pie server cd ~/pie/pie_app python treadmill_app.py # don't forget to deactivate the python virtual environment with deactivate Uninstalling the PiE server Run the uninstall script ./uninstall-pie and remove the ~/pie folder with sudo -Rf ~/pie . # run the uninstall script cd ~/pie ./uninstall-pie # remove the pie folder sudo -Rf ~/pie Full reinstall of the PiE server Issue these commands to remove and reinstall the PiE server. # stop the PiE server cd ~/pie ./pie stop # remove existing ~/pie folder cd sudo rm -Rf ~/pie # download/clone a new copy of pie folder cd git clone https://github.com/cudmore/pie.git # install PiE server cd ~/pie ./install-pie # install dht sensor (optional) cd ~/pie ./install-dht","title":"Install"},{"location":"install/#install-the-pie-server","text":"","title":"Install the PiE server"},{"location":"install/#1-get-a-functioning-raspberry-pi","text":"We assume you have a functioning Raspberry Pi 2/3. To get started, see our installation recipe.","title":"1) Get a functioning Raspberry Pi"},{"location":"install/#2-download-the-code","text":"# update your system sudo apt-get update sudo apt-get upgrade # if you don't already have git sudo apt-get install git # clone the main PiE repository cd git clone https://github.com/cudmore/pie.git","title":"2) Download the code"},{"location":"install/#3-install-the-pie-server","text":"cd ~/pie ./install-pie Thats it, the PiE server should be running and you can use the web interface at http://[ip]:5010 . Where [ip] is the IP address of your Raspberry Pi. Make sure you specify port 5010 in the web address. By default, the PiE server will start when the Raspberry Pi is booted.","title":"3) Install the PiE server"},{"location":"install/#4-install-uv4l-for-video-streaming","text":"The uv4l software runs at the system level (not within the PiE folder) and only needs to be installed once per machine. cd ~/pie ./install-uv4l","title":"4) Install uv4l for video streaming."},{"location":"install/#5-install-the-dht-temperaturehumidity-sensor-python-package-optional","text":"If you are using a DHT temperature/humidity sensor , the Adafruit DHT python package needs to be installed. cd ~/pie ./install-dht","title":"5) Install the DHT temperature/humidity sensor Python package (optional)"},{"location":"install/#6-checking-the-status-of-the-pie-server","text":"If all goes well, the web interface is all this is needed. If the PiE server does not work as expected, it is useful to check its log file. Do this from the web interface or from the command line with: more ~/pie/pie_app/pie.log","title":"6) Checking the status of the PiE server."},{"location":"install/#7-controlling-the-pie-server-from-the-command-line","text":"The pie/install-pie script installs a system service allowing the PiE server to run in the background. This background PiE server can be controlled as follows: cd ~/pie ./pie start - start background PiE server ./pie stop - stop background PiE server ./pie status - check the status of background PiE server ./pie enable - enable background PiE server at boot ./pie disable - disable background PiE server at boot ./pie run - run PiE server on command line For debugging, use ./pie run to print the PiE server log to the command line. The logs can also be viewed from the web interface or the command line using more ~/pie/pie_app/pie.log .","title":"7) Controlling the PiE server from the command line"},{"location":"install/#running-the-pie-server-at-boot","text":"By default, the PiE server will run when the Raspberry Pi is booted and this can be controlled as follows. # To make the background server run at boot cd ~/pie ./pie enable # To make the background server NOT run at boot cd ~/pie ./pie disable","title":"Running the PiE server at boot"},{"location":"install/#manually-running-the-pie-server","text":"Normally, the PiE server will run in the background after installation with './install-pie'. If there are errors during the install or the PiE server is not running, the pie server can be run manually as follows. # stop background pie server cd ~/pie ./pie stop # activate the pie server python virtual environment in pie_env/ # Once activated, the command prompt will start with (pie_env) cd ~/pie source pie_env/bin/activate # manually run the pie server cd ~/pie/pie_app python treadmill_app.py # don't forget to deactivate the python virtual environment with deactivate","title":"Manually running the PiE server"},{"location":"install/#uninstalling-the-pie-server","text":"Run the uninstall script ./uninstall-pie and remove the ~/pie folder with sudo -Rf ~/pie . # run the uninstall script cd ~/pie ./uninstall-pie # remove the pie folder sudo -Rf ~/pie","title":"Uninstalling the PiE server"},{"location":"install/#full-reinstall-of-the-pie-server","text":"Issue these commands to remove and reinstall the PiE server. # stop the PiE server cd ~/pie ./pie stop # remove existing ~/pie folder cd sudo rm -Rf ~/pie # download/clone a new copy of pie folder cd git clone https://github.com/cudmore/pie.git # install PiE server cd ~/pie ./install-pie # install dht sensor (optional) cd ~/pie ./install-dht","title":"Full reinstall of the PiE server"},{"location":"mount-usb-drive/","text":"See this blog post for a recipe to mount a USB drive at boot.","title":"Mount USB Drive"},{"location":"parts/","text":"Jump to the actual parts list Raspberry Pi The Raspberry Pi is a complete computer system in an almost credit card size. It has ethernet, USB, general-purpose-input-output pins (GPIO), a dedicated camera port, and runs a version of Debian Linux called Rasbian . You can pick up the current model, a Raspberry Pi 3 Model B+ . Raspberry Pi Camera The Raspberry Pi has a dedicated camera port for the Raspberry Pi Camera. This is an 8 megapixel camera capable of frame rates as high as 90 frames-per-second and comes in two flavors, the Pi NOIR Camera which can capture images/video using infrared (IR) lights and the ' normal ' camera which can capture images/video using visible (white) light. We generally use the Pi NOIR version to record video in behavior boxes during both the daytime (white LEDs) and night-time (IR LEDs) as well as on the scope to record video during two-photon imaging in the dark using IR LEDs. Two channel relay A relay is a switch allowing you to turn higher voltage devices (usually LEDs connected to 12V power) on and off with 3V GPIO pins. We are using a sainsmart 2-channel relay . LEDs If you end up with lots of LEDs, you could try an IR LED strip and/or a white LED strip . Level shifter If you need to connect the Raspberry Pi directly to 5V TTL lab equipment you need a level shifter to convert the 5V signal to 3V as the Raspberry Pi is only 3V tolerant. We normally use Adafruit or Sparkfun level shifters. Teensy microcontroller We are using Teensy 3.2 or 3.5 microcontrollers. They are Arduino compatible but have a lot more features. These microcontrollers can be programmed from the command line using platformio , no need for the Arduino IDE. To use platformio, the Raspberry Pi needs a few simple system wide configurations, see the readme in pie/platformio . Stepper motor and driver Use a Bipolar stepper motor with the Easy Driver motor driver. Parts List Total cost for home-cage and/or on the scope video recording is around $200. For video recording Quatity Item Purpose Cost Vendor Link 1 Raspberry Pi 3 Model B Computer system including computer, SD card, power, case, etc. etc. $75 amazon 1 USB Flash Drive, 64GB To save recorded video $17 amazon 1 Pi NoIR Camera v2, 8MP IR video camera $30 adafruit 1 (either this) Pi Camera Ribbon cable (2 meters) Flat ribbon cable to connect camera to computer (not optimal) $6 adafruit 1 (or this 1/2) Pi Camera HDMI extension cable Allows camera to connect to computer using an HDMI cable $15 tindie 1 (and this 2/2) HDMI Cable of sufficient length Male/Male HDMI cable $7 - $15 amazon 1 SainSmart 2-Channel Relay Module Allow computer to switch LEDs on/off $9 amazon 4 IR LEDs, 840-850 nm Illuminate in light proof imaging box. Original v1 camera did not work well with 960nm LEDs, need to check v2 camera. $1 each sparkfun 1 Universal 4-LED Miniature Wedge Base PCB To mount 4x LEDs + required resistor $1 each super-bright-led 1 12V 2A LED Driver (does not come with wall plug) Power the IR LEDs $12 amazon 1 Ethernet cable of sufficient length Connect the computer to the network $5 - $20 amazon For video recording on a scope with triggering and frame clock Quatity Item Purpose Cost Vendor Link 1 4-channel Logic Level Converter (Bi-Directional) To connect 5V TTL lab equipment to 3V computer GPIO $4 Sparkfun , Adafruit 1 Tripod Swivel To mount the camera on an optical post and be able to angle it. $9 amazon Miscellaneous Quatity Item Purpose Cost Vendor Link 1 Breadboard and jumper cables A breadboard and a mixture of jumper cables: male/male, male/female, and female/female $11 amazon 1 Wire To wire LEDs into light proof box $17 sparkfun For controlling a motorized treadmill with a microcontroller Quatity Item Purpose Cost Vendor Link 1 Teensy 3.5 Arduino compatible microcontroller $25 teensy 1 EasyDriver - Stepper Motor Driver Motor controller for stepper motor $15 sparkfun 1 Stepper Motor Share 12V 2A LED Driver for power $15 sparkfun 1 Rotary encoder Honeywell-600-128-CBL $51 digi-key or this Building a treadmill These are Actobotics parts from ServoCity Quatity Item Cost Part # Link Aluminum channels link 4 1.50 inch Aluminum Channel 2.99 585440 4 6.00 inch Aluminum Channel 5.99 585446 1 9.00 inch Aluminum Channel 7.99 585450 1 15 inch Aluminum Channel 11.99 585458 Shafts and shaft couplers link 2 1/4 inch x12 inch Precision Shaft 3.59 634178 2 1/4 inch x4 inch Precision Shaft 1.49 634164 1 1/4 inch x6 inch Precision Shaft 2.09 634168 2 1/4 inch to 5mm Set Screw Shaft Coupler 4.99 625120 2 1/4 inch to 1/4 inch Set Screw Shaft Coupler 4.99 625104 Couplers and adapters link 8 1/4 inch Bore Clamping Hub (0.770 inch) 7.99 545588 4 1/4 inch Bore Set Screw Hub (0.770 inch) 4.99 545548 2 Stepper Motor Mount (NEMA 17) 7.49 555152 4 1/4-20 Round Screw Plate 3.99 545468 2 Large Square Screw Plate 2.69 585430 1 90 Degree Quad Hub Mount C 5.99 545360 1 90 Degree Quad Hub Mount D 5.99 545324 Ball bearings link 3 .250 inch ID x .500 inch OD Flanged Ball Bearing (Stainless Steel) 2 pack 1.99 535198 1 Dual Ball Bearing Hub A 6.99 545444 1 1/4 inch Shafting Tubing Spacers (12 pk) 1.69 633104 Gears link 1 16T, 0.250 inch Bore, 32P Bevel Gear 5.99 615442 1 32T, 0.250 inch Bore, 32P Bevel Gear 7.99 615444 1 16T, 5mm Bore, 32P Bevel Gear 5.99 615438 2 48 Tooth, 32 Pitch Hub Gear (3/16 inch Face) 5.20 RHA32-36-48 Fasteners link 24 6-32x3/8 inch Pan Head Phillips Machine Screws (Zinc-Plated) 0.06 90272A146 8 1/2 inch 1/4-20 Flat Head Phillips Machine Screws 0.38 90273A537 1 3/32 Hex Key 1.39 57185A11 6 .250 in L x 6-32 Zinc-Plated Alloy Steel Socket Head Cap Screw (25 pk) 1.69 632106","title":"Parts"},{"location":"parts/#raspberry-pi","text":"The Raspberry Pi is a complete computer system in an almost credit card size. It has ethernet, USB, general-purpose-input-output pins (GPIO), a dedicated camera port, and runs a version of Debian Linux called Rasbian . You can pick up the current model, a Raspberry Pi 3 Model B+ .","title":"Raspberry Pi"},{"location":"parts/#raspberry-pi-camera","text":"The Raspberry Pi has a dedicated camera port for the Raspberry Pi Camera. This is an 8 megapixel camera capable of frame rates as high as 90 frames-per-second and comes in two flavors, the Pi NOIR Camera which can capture images/video using infrared (IR) lights and the ' normal ' camera which can capture images/video using visible (white) light. We generally use the Pi NOIR version to record video in behavior boxes during both the daytime (white LEDs) and night-time (IR LEDs) as well as on the scope to record video during two-photon imaging in the dark using IR LEDs.","title":"Raspberry Pi Camera"},{"location":"parts/#two-channel-relay","text":"A relay is a switch allowing you to turn higher voltage devices (usually LEDs connected to 12V power) on and off with 3V GPIO pins. We are using a sainsmart 2-channel relay .","title":"Two channel relay"},{"location":"parts/#leds","text":"If you end up with lots of LEDs, you could try an IR LED strip and/or a white LED strip .","title":"LEDs"},{"location":"parts/#level-shifter","text":"If you need to connect the Raspberry Pi directly to 5V TTL lab equipment you need a level shifter to convert the 5V signal to 3V as the Raspberry Pi is only 3V tolerant. We normally use Adafruit or Sparkfun level shifters.","title":"Level shifter"},{"location":"parts/#teensy-microcontroller","text":"We are using Teensy 3.2 or 3.5 microcontrollers. They are Arduino compatible but have a lot more features. These microcontrollers can be programmed from the command line using platformio , no need for the Arduino IDE. To use platformio, the Raspberry Pi needs a few simple system wide configurations, see the readme in pie/platformio .","title":"Teensy microcontroller"},{"location":"parts/#stepper-motor-and-driver","text":"Use a Bipolar stepper motor with the Easy Driver motor driver.","title":"Stepper motor and  driver"},{"location":"parts/#parts-list","text":"Total cost for home-cage and/or on the scope video recording is around $200.","title":"Parts List"},{"location":"parts/#for-video-recording","text":"Quatity Item Purpose Cost Vendor Link 1 Raspberry Pi 3 Model B Computer system including computer, SD card, power, case, etc. etc. $75 amazon 1 USB Flash Drive, 64GB To save recorded video $17 amazon 1 Pi NoIR Camera v2, 8MP IR video camera $30 adafruit 1 (either this) Pi Camera Ribbon cable (2 meters) Flat ribbon cable to connect camera to computer (not optimal) $6 adafruit 1 (or this 1/2) Pi Camera HDMI extension cable Allows camera to connect to computer using an HDMI cable $15 tindie 1 (and this 2/2) HDMI Cable of sufficient length Male/Male HDMI cable $7 - $15 amazon 1 SainSmart 2-Channel Relay Module Allow computer to switch LEDs on/off $9 amazon 4 IR LEDs, 840-850 nm Illuminate in light proof imaging box. Original v1 camera did not work well with 960nm LEDs, need to check v2 camera. $1 each sparkfun 1 Universal 4-LED Miniature Wedge Base PCB To mount 4x LEDs + required resistor $1 each super-bright-led 1 12V 2A LED Driver (does not come with wall plug) Power the IR LEDs $12 amazon 1 Ethernet cable of sufficient length Connect the computer to the network $5 - $20 amazon","title":"For video recording"},{"location":"parts/#for-video-recording-on-a-scope-with-triggering-and-frame-clock","text":"Quatity Item Purpose Cost Vendor Link 1 4-channel Logic Level Converter (Bi-Directional) To connect 5V TTL lab equipment to 3V computer GPIO $4 Sparkfun , Adafruit 1 Tripod Swivel To mount the camera on an optical post and be able to angle it. $9 amazon","title":"For video recording on a scope with triggering and frame clock"},{"location":"parts/#miscellaneous","text":"Quatity Item Purpose Cost Vendor Link 1 Breadboard and jumper cables A breadboard and a mixture of jumper cables: male/male, male/female, and female/female $11 amazon 1 Wire To wire LEDs into light proof box $17 sparkfun","title":"Miscellaneous"},{"location":"parts/#for-controlling-a-motorized-treadmill-with-a-microcontroller","text":"Quatity Item Purpose Cost Vendor Link 1 Teensy 3.5 Arduino compatible microcontroller $25 teensy 1 EasyDriver - Stepper Motor Driver Motor controller for stepper motor $15 sparkfun 1 Stepper Motor Share 12V 2A LED Driver for power $15 sparkfun 1 Rotary encoder Honeywell-600-128-CBL $51 digi-key or this","title":"For controlling a motorized treadmill with a microcontroller"},{"location":"parts/#building-a-treadmill","text":"These are Actobotics parts from ServoCity Quatity Item Cost Part # Link Aluminum channels link 4 1.50 inch Aluminum Channel 2.99 585440 4 6.00 inch Aluminum Channel 5.99 585446 1 9.00 inch Aluminum Channel 7.99 585450 1 15 inch Aluminum Channel 11.99 585458 Shafts and shaft couplers link 2 1/4 inch x12 inch Precision Shaft 3.59 634178 2 1/4 inch x4 inch Precision Shaft 1.49 634164 1 1/4 inch x6 inch Precision Shaft 2.09 634168 2 1/4 inch to 5mm Set Screw Shaft Coupler 4.99 625120 2 1/4 inch to 1/4 inch Set Screw Shaft Coupler 4.99 625104 Couplers and adapters link 8 1/4 inch Bore Clamping Hub (0.770 inch) 7.99 545588 4 1/4 inch Bore Set Screw Hub (0.770 inch) 4.99 545548 2 Stepper Motor Mount (NEMA 17) 7.49 555152 4 1/4-20 Round Screw Plate 3.99 545468 2 Large Square Screw Plate 2.69 585430 1 90 Degree Quad Hub Mount C 5.99 545360 1 90 Degree Quad Hub Mount D 5.99 545324 Ball bearings link 3 .250 inch ID x .500 inch OD Flanged Ball Bearing (Stainless Steel) 2 pack 1.99 535198 1 Dual Ball Bearing Hub A 6.99 545444 1 1/4 inch Shafting Tubing Spacers (12 pk) 1.69 633104 Gears link 1 16T, 0.250 inch Bore, 32P Bevel Gear 5.99 615442 1 32T, 0.250 inch Bore, 32P Bevel Gear 7.99 615444 1 16T, 5mm Bore, 32P Bevel Gear 5.99 615438 2 48 Tooth, 32 Pitch Hub Gear (3/16 inch Face) 5.20 RHA32-36-48 Fasteners link 24 6-32x3/8 inch Pan Head Phillips Machine Screws (Zinc-Plated) 0.06 90272A146 8 1/2 inch 1/4-20 Flat Head Phillips Machine Screws 0.38 90273A537 1 3/32 Hex Key 1.39 57185A11 6 .250 in L x 6-32 Zinc-Plated Alloy Steel Socket Head Cap Screw (25 pk) 1.69 632106","title":"Building a treadmill"},{"location":"release-notes/","text":"Release Notes Current To Do Make sure streaming stops when browser tab is closed or browser is quit. Expand sunrise/sunset to fractional hour. [partially done 20180831] Add warning when video/ drive space remaining is less than 1 GB. Do this by updating status.trial.systemInfo.gbRemaining at the end of each recording (record video thread, and armed recording thread). I am doing this with hard-coded 5GB warning in index.html, see: ng-if=\"videoArray[$index].status.trial.systemInfo.gbRemaining 5\" Have some mechanism to roll-over or otherwise replace the continuous environment log file. [done 20181018] Add code to check the camera as PiE server starts. This way, user can look at logs to troubleshoot. Add popup to web interface for selecting supported DHT (AM2302, DHT11) sensors Major Changes 20181013 Moved environment logs to /home/pie/video/logs. This way they can be browsed and will not be trashed on full reinstall 20180801 Lots of changes 20180722 Lots of changes Development Notes 20180710 (1) motor interface make setup not engage motor add motor on, motor off to web interface pass to teensy with serial useMotor/motorOn, see trial.useMotor //When set LOW, all STEP commands are ignored and all FET functionality is turned off. Must be pulled HIGH to enable STEP control const int motorResetPin = 19; //Logic Input. Enables the FET functionality within the motor driver. If set to HIGH, the FETs will be disabled, and the IC will not drive the motor. If set to LOW, all FETs will be enabled, allowing motor control. const int motorEnabledPin = 20; //low to engage, high to dis-engage (2) [done]finish writing docs for 'scope' configuration. (3) [done] make sure all config files still load (4) [done] add 'last response' to interface - update self.lastResponse throughout code (6) look at starting ./pie at boot, make sure it catches the serial Reduce png file size see: https://www.cyberciti.biz/faq/linux-unix-optimize-lossless-png-images-with-optipng-command/ sudo apt-get install optipng Remember Pins GPIO2 and GPIO3 have fixed pull-up resistors, but for other pins this can be configured in software. Gunicorn source env/bin/activate cd ~/pie/pie_app /home/pi/pie/env/bin/gunicorn -w 1 --bind 192.168.1.15:5010 treadmill_app:app MkDocs Had to install with sudo pip install mkdocs Run on an external port cd ~/pie/docs mkdocs serve -a 192.168.1.4:8000 Push to github cd ~/pie/docs mkdocs gh-deploy","title":"Release Notes"},{"location":"release-notes/#release-notes","text":"","title":"Release Notes"},{"location":"release-notes/#current-to-do","text":"Make sure streaming stops when browser tab is closed or browser is quit. Expand sunrise/sunset to fractional hour. [partially done 20180831] Add warning when video/ drive space remaining is less than 1 GB. Do this by updating status.trial.systemInfo.gbRemaining at the end of each recording (record video thread, and armed recording thread). I am doing this with hard-coded 5GB warning in index.html, see: ng-if=\"videoArray[$index].status.trial.systemInfo.gbRemaining 5\" Have some mechanism to roll-over or otherwise replace the continuous environment log file. [done 20181018] Add code to check the camera as PiE server starts. This way, user can look at logs to troubleshoot. Add popup to web interface for selecting supported DHT (AM2302, DHT11) sensors","title":"Current To Do"},{"location":"release-notes/#major-changes","text":"20181013 Moved environment logs to /home/pie/video/logs. This way they can be browsed and will not be trashed on full reinstall 20180801 Lots of changes 20180722 Lots of changes","title":"Major Changes"},{"location":"release-notes/#development-notes","text":"","title":"Development Notes"},{"location":"release-notes/#20180710","text":"(1) motor interface make setup not engage motor add motor on, motor off to web interface pass to teensy with serial useMotor/motorOn, see trial.useMotor //When set LOW, all STEP commands are ignored and all FET functionality is turned off. Must be pulled HIGH to enable STEP control const int motorResetPin = 19; //Logic Input. Enables the FET functionality within the motor driver. If set to HIGH, the FETs will be disabled, and the IC will not drive the motor. If set to LOW, all FETs will be enabled, allowing motor control. const int motorEnabledPin = 20; //low to engage, high to dis-engage (2) [done]finish writing docs for 'scope' configuration. (3) [done] make sure all config files still load (4) [done] add 'last response' to interface - update self.lastResponse throughout code (6) look at starting ./pie at boot, make sure it catches the serial","title":"20180710"},{"location":"release-notes/#reduce-png-file-size","text":"see: https://www.cyberciti.biz/faq/linux-unix-optimize-lossless-png-images-with-optipng-command/ sudo apt-get install optipng","title":"Reduce png file size"},{"location":"release-notes/#remember","text":"Pins GPIO2 and GPIO3 have fixed pull-up resistors, but for other pins this can be configured in software.","title":"Remember"},{"location":"release-notes/#gunicorn","text":"source env/bin/activate cd ~/pie/pie_app /home/pi/pie/env/bin/gunicorn -w 1 --bind 192.168.1.15:5010 treadmill_app:app","title":"Gunicorn"},{"location":"release-notes/#mkdocs","text":"Had to install with sudo pip install mkdocs Run on an external port cd ~/pie/docs mkdocs serve -a 192.168.1.4:8000 Push to github cd ~/pie/docs mkdocs gh-deploy","title":"MkDocs"},{"location":"trial-file/","text":"Trial files are text files to log events that occur during a video recording. Trial file names are automatically generated with the date, time, and trial number as 'yyyymmdd_hhmmss_t[trial].txt' where [trial] is the trial number. Events are accumulated during each video recording, including 'record' and 'arm', and saved at the end of each recording into a trial file. Trial File Format All trial files begin with a one line header, followed by one line of column names and then any number of events (one line per event). Trial files are comma delimited except for the one line header. Here is an example trial file with 8 events: date=20180902;time=19:26:49;startTimeSeconds=1535930809.9245791;hostname= pi15 ;id= ;condition= ;trialNum=4;numRepeats=1;repeatDuration=301;numRepeatsRecorded=1;repeatInfinity= False ;scopeFilename ;video_fps=30;video_resolution= 640,480 ; date,time,linuxSeconds,secondsSinceStart,event,value,str,tick 20180902,19:26:49,1535930809.9245791,0.0,startTrial,4,,None 20180902,19:26:49,1535930809.95922,0.03464078903198242,newRepeat,1,,None 20180902,19:26:49,1535930809.9660773,0.04149818420410156,beforefilepath,1,/home/pi/video/20180902/20180902_192649_t4_r1_before.h264,None 20180902,19:26:49,1535930809.9661162,0.04153704643249512,afterfilepath,1,/home/pi/video/20180902/20180902_192649_t4_r1_after.h264,None 20180902,19:26:50,1535930810.1416507,0.217071533203125,frame,1,1654442841,710240.945 20180902,19:26:50,1535930810.1694624,0.24488329887390137,frame,2,1654476158,710270.944 20180902,19:26:51,1535930811.1701634,1.24558424949646,triggerIn,False,,711270.812 20180902,19:26:51,1535930811.252085,1.3275058269500732,stopTrial,4,,None Note that the date and start time of a trial (yyyymmdd and hh:mm:ss) appears in (i) the file name, (ii) the header, and (iii) the first 'startTrial' event. Trial File Header The trial file header is a single line with a semi-colon delimited list of token=value pairs. Tokens with a string or boolean type use double quotes (\"\") around their value. If there is no value for a string token, the double quotes are always included. Token Format Meaning date yyyymmdd time hh:mm:ss startTimeSeconds float hostname string The hostname of the Raspberry Pi. Useful to keep track of multiple machines. id string The id that is entered in the web, can be empty (e.g. \"\").interface. condition string The condition that is entered in the web interface, can be empty (e.g. \"\"). trialNum integer numRepeats integer repeatDuration float numRepeatsRecorded integer The number of repeats actually recorded. Can be different from numRepeats if the user stops the video recording before it is finished. repeatInfinity boolean scopeFilename string video_fps integer The frames-per-second of the recorded video, set in the web interface. video_resolution string The width and height of the video recording (in pixels). For example \"640,480\" or \"1024,768\" Trial File Events All events begin with date, time, linuxSeconds, and secondsSinceStart tokens. Token Value date yyyymmdd time hh:mm:ss linuxSeconds A long float representing the time since the linux epoch, this value comes from the Python time package time.time(). secondsSinceStart A long float representing the number of seconds (with fraciton) soince the 'start trigger was received'. All events end with a 'tick' token. Tick tokens are unsigned float that represents the micro-seconds since the startTrial event. These are only used if the pigpio daemon has been activated. If the pigpiod is not active, all ticks will be logged as 'None' (without the single-quotes). Using pigpio gives better precision for GPIO events compared to the standard Python time.time() function. Keep in mind, although events are more precise, they can still be missed! Event Class value str tick startTrial bTrial The trial number stopTrial bTrial The trial number newRepeat bTrial The repeat (epoch) number whiteLED bTrial 1 for on, 0 for off irLED bTrial 1 for on, 0 for off temperature bTrial The temperature in celcius (assumes using a DHT sensor) humidity bTrial The % relative humidity (assumes using a DHT sensor) triggerIn bPins frame bPins The frame number generic bPins user2 bPins beforefilepath bCamera n/a Full path to pre trigger video file. afterfilepath bCamera n/a Full path to main video file. The whole point of the PiE server. startArmedRecording bCamera Time armed recording was started. The code to retrieve this time is immediately after the code to start the camera. As such, it is a more precide time-stamp for the actual time the video was started. stopArmedRecording bCamera Same idea but at the stop of armed recording, see startArmedRecording. startVideoRecord bCamera See startArmedRecording. stopVideoRecord bCamera Same idea but at the stop of recording, see startArmedRecording","title":"Trial File"},{"location":"trial-file/#trial-file-format","text":"All trial files begin with a one line header, followed by one line of column names and then any number of events (one line per event). Trial files are comma delimited except for the one line header. Here is an example trial file with 8 events: date=20180902;time=19:26:49;startTimeSeconds=1535930809.9245791;hostname= pi15 ;id= ;condition= ;trialNum=4;numRepeats=1;repeatDuration=301;numRepeatsRecorded=1;repeatInfinity= False ;scopeFilename ;video_fps=30;video_resolution= 640,480 ; date,time,linuxSeconds,secondsSinceStart,event,value,str,tick 20180902,19:26:49,1535930809.9245791,0.0,startTrial,4,,None 20180902,19:26:49,1535930809.95922,0.03464078903198242,newRepeat,1,,None 20180902,19:26:49,1535930809.9660773,0.04149818420410156,beforefilepath,1,/home/pi/video/20180902/20180902_192649_t4_r1_before.h264,None 20180902,19:26:49,1535930809.9661162,0.04153704643249512,afterfilepath,1,/home/pi/video/20180902/20180902_192649_t4_r1_after.h264,None 20180902,19:26:50,1535930810.1416507,0.217071533203125,frame,1,1654442841,710240.945 20180902,19:26:50,1535930810.1694624,0.24488329887390137,frame,2,1654476158,710270.944 20180902,19:26:51,1535930811.1701634,1.24558424949646,triggerIn,False,,711270.812 20180902,19:26:51,1535930811.252085,1.3275058269500732,stopTrial,4,,None Note that the date and start time of a trial (yyyymmdd and hh:mm:ss) appears in (i) the file name, (ii) the header, and (iii) the first 'startTrial' event.","title":"Trial File Format"},{"location":"trial-file/#trial-file-header","text":"The trial file header is a single line with a semi-colon delimited list of token=value pairs. Tokens with a string or boolean type use double quotes (\"\") around their value. If there is no value for a string token, the double quotes are always included. Token Format Meaning date yyyymmdd time hh:mm:ss startTimeSeconds float hostname string The hostname of the Raspberry Pi. Useful to keep track of multiple machines. id string The id that is entered in the web, can be empty (e.g. \"\").interface. condition string The condition that is entered in the web interface, can be empty (e.g. \"\"). trialNum integer numRepeats integer repeatDuration float numRepeatsRecorded integer The number of repeats actually recorded. Can be different from numRepeats if the user stops the video recording before it is finished. repeatInfinity boolean scopeFilename string video_fps integer The frames-per-second of the recorded video, set in the web interface. video_resolution string The width and height of the video recording (in pixels). For example \"640,480\" or \"1024,768\"","title":"Trial File Header"},{"location":"trial-file/#trial-file-events","text":"All events begin with date, time, linuxSeconds, and secondsSinceStart tokens. Token Value date yyyymmdd time hh:mm:ss linuxSeconds A long float representing the time since the linux epoch, this value comes from the Python time package time.time(). secondsSinceStart A long float representing the number of seconds (with fraciton) soince the 'start trigger was received'. All events end with a 'tick' token. Tick tokens are unsigned float that represents the micro-seconds since the startTrial event. These are only used if the pigpio daemon has been activated. If the pigpiod is not active, all ticks will be logged as 'None' (without the single-quotes). Using pigpio gives better precision for GPIO events compared to the standard Python time.time() function. Keep in mind, although events are more precise, they can still be missed! Event Class value str tick startTrial bTrial The trial number stopTrial bTrial The trial number newRepeat bTrial The repeat (epoch) number whiteLED bTrial 1 for on, 0 for off irLED bTrial 1 for on, 0 for off temperature bTrial The temperature in celcius (assumes using a DHT sensor) humidity bTrial The % relative humidity (assumes using a DHT sensor) triggerIn bPins frame bPins The frame number generic bPins user2 bPins beforefilepath bCamera n/a Full path to pre trigger video file. afterfilepath bCamera n/a Full path to main video file. The whole point of the PiE server. startArmedRecording bCamera Time armed recording was started. The code to retrieve this time is immediately after the code to start the camera. As such, it is a more precide time-stamp for the actual time the video was started. stopArmedRecording bCamera Same idea but at the stop of armed recording, see startArmedRecording. startVideoRecord bCamera See startArmedRecording. stopVideoRecord bCamera Same idea but at the stop of recording, see startArmedRecording","title":"Trial File Events"},{"location":"troubleshooting/","text":"The first thing to check is the PiE server log. The log can be viewed in many ways, From the web interface By running the PiE server on the command line with ./pie run By directly viewing the log file with more ~/pie/pie_app/pie.log Common Errors OSError: [Errno 98] Address already in use This happens when you try and start the server but it is already running. Usually when it is running in the background and you run it again with ./pie run . Just stop the server with ./pie stop and then try again with ./pie run . Troubleshooting the camera Capture a still image with the Pi camera with: raspistill -o test.jpg If you get any errors then there is a problem with the Pi Camera. Make sure the Pi Camera is activated. # type this at a command prompt sudo raspi-config # select '5 Interface Options' # select 'P1 Camera' # Answer 'Yes' to question 'Would you like the camera interface to be enabled?' bCamera PiCameraMMALError: Failed to enable connection: Out of resources If you receive this error in the web interface or PiE server log, it means the camera is in use by some other process. The Raspberry camera can only do one thing at a time, it can stream or record but not both at the same time. In addition, the camera can not record (or stream) in two different programs simultaneously. Make sure other programs are not using the camera and try again. Rebooting with 'sudo reboot' usually does the trick unless these programs, like the PiE server, are set up to run at boot. Troubleshooting a DHT temperature/humidity sensor Run the simplified code in the testing/ folder. If you can't get a temperature/humidity reading with this code, it will not work within the PiE server. Check the PiE server log (see above) and make sure the Adafruit DHT driver is installed and run when the PiE server is started. You should see entries in the PiE server log like this: [2018-10-14 09:53:59,596] {bTrial.py module :51} DEBUG - Loaded Adafruit_DHT [2018-10-14 09:54:00,168] {bTrial.py __init__:178} DEBUG - starting temperature thread [2018-10-14 09:54:00,172] {bTrial.py tempThread:918} INFO - tempThread() sensorTypeStr:AM2302 sensorType:22 pin:4 If the DHT driver is not installed, install it with ./install-dht , restart the PiE server with ./pie restart , and check the PiE server log again. Converting video to mp4 The PiE server uses libav (avconv) to convert video from .h264 to .mp4. If libav (avconv) does not install during ~/pie/install-pie , this conversion will not work. Troubleshooting uv4l streaming In rare instances the uv4l streaming server does not stop properly. Streaming with uv4l runs at the system level and not in Python. As such, uv4l needs to be controlled via the command line. #list all uv4l processes ps -aux | grep uv4l # will yield something like root 23117 9.8 1.3 140796 12312 ? Ssl 20:34 0:02 uv4l --driver raspicam --auto-video_nr --encoding h264 --width 640 --height 480 --enable-server on pi 23262 0.0 0.1 6644 1316 pts/1 S+ 20:34 0:00 grep --color=auto uv4l # kill uv4l with its process id (PID) # '--' is needed to kill parent and child processes sudo kill -- 23117 #check the uv4l process is no longer running ps -aux | grep uv4l # should yield pi 674 0.0 0.1 6644 1320 pts/0 S+ 21:06 0:00 grep --color=auto uv4l uv4l will not go away Worst case senario is ps -aux | grep uvl4 yields something like this root 23117 17.2 0.0 0 0 ? Zsl 20:34 0:37 [uv4l] defunct If you see the defunct then restart the Pi with sudo reboot and it should be fixed. Manually editing user config (json) files The PiE server comes with three default sets of options: Homecage, Scope, and Treadmill. There is an additional User configuration that can be edited manually to configure the PiE server. To edit the User file, open pie/pie_app/config/config_user.json in the pie/pie_app/config/ folder. The format of the file is [json][json] and basically specifies key/value pairs. Do not add or remove any keys, just change their values. The json format is very strict, if there are any syntax errors, the file will not load and the PiE server will not run. To check your work, use cd ~/pie/pie_app/config cat config_user.json | python -m json.tool If your edits are syntatically correct, this command will output the contents of the file. If you have created an error, they will be reported on the command line. For example, if your forget a comma after \"enabled\": true like this triggerIn : { enabled : true pin : 23, polarity : rising , pull_up_down : down }, You will get an error Expecting , delimiter: line 27 column 13 (char 648) Working versions Here is a snapshot of versions for a working PiE server as of October 2018. As python packages are updated, things can potentially break. cd ~/pie source pie_env/bin/activate # activate the Python3 virtual environment pip freeze # print all the Phython packages and their versions # use 'deactivate' to deactivate the Python3 virtual environmnet and return to the normal command prompt # returns click==6.7 dnspython==1.15.0 eventlet==0.24.1 Flask==1.0.2 Flask-Cors==3.0.6 Flask-SocketIO==3.0.1 greenlet==0.4.14 itsdangerous==0.24 Jinja2==2.10 MarkupSafe==1.0 monotonic==1.5 picamera==1.13 pigpio==1.40.post1 pkg-resources==0.0.0 pyserial==3.4 python-engineio==2.2.0 python-socketio==2.0.0 RPi.GPIO==0.6.3 six==1.11.0 Werkzeug==0.14.1 python --version # returns Python 3.5.3 cat /etc/os-release # returns PRETTY_NAME= Raspbian GNU/Linux 9 (stretch) NAME= Raspbian GNU/Linux VERSION_ID= 9 VERSION= 9 (stretch) ID=raspbian ID_LIKE=debian uname -a # returns Linux pi15 4.14.52-v7+ #1123 SMP Wed Jun 27 17:35:49 BST 2018 armv7l GNU/Linux","title":"Troubleshooting"},{"location":"troubleshooting/#common-errors","text":"","title":"Common Errors"},{"location":"troubleshooting/#oserror-errno-98-address-already-in-use","text":"This happens when you try and start the server but it is already running. Usually when it is running in the background and you run it again with ./pie run . Just stop the server with ./pie stop and then try again with ./pie run .","title":"OSError: [Errno 98] Address already in use"},{"location":"troubleshooting/#troubleshooting-the-camera","text":"Capture a still image with the Pi camera with: raspistill -o test.jpg If you get any errors then there is a problem with the Pi Camera. Make sure the Pi Camera is activated. # type this at a command prompt sudo raspi-config # select '5 Interface Options' # select 'P1 Camera' # Answer 'Yes' to question 'Would you like the camera interface to be enabled?'","title":"Troubleshooting the camera"},{"location":"troubleshooting/#bcamera-picamerammalerror-failed-to-enable-connection-out-of-resources","text":"If you receive this error in the web interface or PiE server log, it means the camera is in use by some other process. The Raspberry camera can only do one thing at a time, it can stream or record but not both at the same time. In addition, the camera can not record (or stream) in two different programs simultaneously. Make sure other programs are not using the camera and try again. Rebooting with 'sudo reboot' usually does the trick unless these programs, like the PiE server, are set up to run at boot.","title":"bCamera PiCameraMMALError: Failed to enable connection: Out of resources"},{"location":"troubleshooting/#troubleshooting-a-dht-temperaturehumidity-sensor","text":"Run the simplified code in the testing/ folder. If you can't get a temperature/humidity reading with this code, it will not work within the PiE server. Check the PiE server log (see above) and make sure the Adafruit DHT driver is installed and run when the PiE server is started. You should see entries in the PiE server log like this: [2018-10-14 09:53:59,596] {bTrial.py module :51} DEBUG - Loaded Adafruit_DHT [2018-10-14 09:54:00,168] {bTrial.py __init__:178} DEBUG - starting temperature thread [2018-10-14 09:54:00,172] {bTrial.py tempThread:918} INFO - tempThread() sensorTypeStr:AM2302 sensorType:22 pin:4 If the DHT driver is not installed, install it with ./install-dht , restart the PiE server with ./pie restart , and check the PiE server log again.","title":"Troubleshooting a DHT temperature/humidity sensor"},{"location":"troubleshooting/#converting-video-to-mp4","text":"The PiE server uses libav (avconv) to convert video from .h264 to .mp4. If libav (avconv) does not install during ~/pie/install-pie , this conversion will not work.","title":"Converting video to mp4"},{"location":"troubleshooting/#troubleshooting-uv4l-streaming","text":"In rare instances the uv4l streaming server does not stop properly. Streaming with uv4l runs at the system level and not in Python. As such, uv4l needs to be controlled via the command line. #list all uv4l processes ps -aux | grep uv4l # will yield something like root 23117 9.8 1.3 140796 12312 ? Ssl 20:34 0:02 uv4l --driver raspicam --auto-video_nr --encoding h264 --width 640 --height 480 --enable-server on pi 23262 0.0 0.1 6644 1316 pts/1 S+ 20:34 0:00 grep --color=auto uv4l # kill uv4l with its process id (PID) # '--' is needed to kill parent and child processes sudo kill -- 23117 #check the uv4l process is no longer running ps -aux | grep uv4l # should yield pi 674 0.0 0.1 6644 1320 pts/0 S+ 21:06 0:00 grep --color=auto uv4l","title":"Troubleshooting uv4l streaming"},{"location":"troubleshooting/#uv4l-will-not-go-away","text":"Worst case senario is ps -aux | grep uvl4 yields something like this root 23117 17.2 0.0 0 0 ? Zsl 20:34 0:37 [uv4l] defunct If you see the defunct then restart the Pi with sudo reboot and it should be fixed.","title":"uv4l will not go away"},{"location":"troubleshooting/#manually-editing-user-config-json-files","text":"The PiE server comes with three default sets of options: Homecage, Scope, and Treadmill. There is an additional User configuration that can be edited manually to configure the PiE server. To edit the User file, open pie/pie_app/config/config_user.json in the pie/pie_app/config/ folder. The format of the file is [json][json] and basically specifies key/value pairs. Do not add or remove any keys, just change their values. The json format is very strict, if there are any syntax errors, the file will not load and the PiE server will not run. To check your work, use cd ~/pie/pie_app/config cat config_user.json | python -m json.tool If your edits are syntatically correct, this command will output the contents of the file. If you have created an error, they will be reported on the command line. For example, if your forget a comma after \"enabled\": true like this triggerIn : { enabled : true pin : 23, polarity : rising , pull_up_down : down }, You will get an error Expecting , delimiter: line 27 column 13 (char 648)","title":"Manually editing user config (json) files"},{"location":"troubleshooting/#working-versions","text":"Here is a snapshot of versions for a working PiE server as of October 2018. As python packages are updated, things can potentially break. cd ~/pie source pie_env/bin/activate # activate the Python3 virtual environment pip freeze # print all the Phython packages and their versions # use 'deactivate' to deactivate the Python3 virtual environmnet and return to the normal command prompt # returns click==6.7 dnspython==1.15.0 eventlet==0.24.1 Flask==1.0.2 Flask-Cors==3.0.6 Flask-SocketIO==3.0.1 greenlet==0.4.14 itsdangerous==0.24 Jinja2==2.10 MarkupSafe==1.0 monotonic==1.5 picamera==1.13 pigpio==1.40.post1 pkg-resources==0.0.0 pyserial==3.4 python-engineio==2.2.0 python-socketio==2.0.0 RPi.GPIO==0.6.3 six==1.11.0 Werkzeug==0.14.1 python --version # returns Python 3.5.3 cat /etc/os-release # returns PRETTY_NAME= Raspbian GNU/Linux 9 (stretch) NAME= Raspbian GNU/Linux VERSION_ID= 9 VERSION= 9 (stretch) ID=raspbian ID_LIKE=debian uname -a # returns Linux pi15 4.14.52-v7+ #1123 SMP Wed Jun 27 17:35:49 BST 2018 armv7l GNU/Linux","title":"Working versions"},{"location":"web-interface/","text":"When the PiE sever is running, the web interface is accesible at http:/[IP]:5010 where [IP] is the IP address of the Pi. The top row displays the Pi hostname, IP, and current date and time. When the PiE server is running, the time will be updated each second. In addition, there are links to recorded video files, PiE server logs, environmental sensors, and the full source code and documentation on Github. The 'Start Recording' and 'Start Trial' buttons start video recording to a file. All files are saved in the /video folder. At the end of each video file recording, a trial file is also saved. Trial files are plain text files with a record of 'events' that occurred during the video recording. See the trial file readme for more information. White and IR Switches . Will turn White and IR lights on and off. This assumes white and IR leds for the PiE server have been wired correctly to the Raspberry Pi. Both white and IR LEDs cannot be controlled when 'Configure - Auto Lights' is on. ID and Condition . These will be pre-pended to all saved file names. Leave them blank and nothing will be added. This is useful to organize your saved files with an animal ID and condition. Start Recording . Will start a video recording following 'Repeat Forever', 'Number of Repeats' and 'Repeat Duration'. These parameters can be set and saved in the Configure section. Start Streaming . Will start streaming the camera to the web page. If the stream fails to start the first time, try turning it off and then on again. If it still does not work, refresh the page in the browser. Arm . When checked, the PiE server will wait for an input trigger to start video recording. Arming is only available when 'Configure - Allow Arming' is on. Turning 'Arm' on will force 'Repeat Forever' off and 'Number of Repeats' to 1. When 'Arm' is on and an input trigger is received, video recording begins and a pre-trigger video recording will be saved. The duration of the pre-trigger video is set in 'Configure - Pre Trigger Buffer (sec)'. Last Action . Is updated with the last action the PiE server took. This is normally updated in response to clicking interface buttons. Configure The Configure section allows parameters of the PiE server to be set. Current parameters can be saved with 'Save Defaults' and will automatically be loaded the next time the PiE server is run. Make sure you save your changes with 'Save Defaults'. Repeat Forever . When checked, 'Start Recording' will record videos of 'Repeat Duration' over and over until 'Stop Recording' is pressed. When 'Arm' is on, this will be turned off. Number of Repeats . The number of video files to record when 'Start Recording' is pressed. Each video file will have a duration set by 'Repeat Duration Sec)'. When 'Arm' is on, this will be set to 1. Repeat Duration (sec) . The length of each video file in seconds. Auto Lights . When checked, the White and IR lights will be turned on and off to simulate daytime and nighttime. The white light will be on between sunrise and sunset, the IR light will be on otherwise. Sunrise (hour) and Sunset (hour) . When 'Auto Lights' is on, the White and IR lights will be turned on and off to simulate daytime and nighttime. FPS . Specifies the frames-per-second (FPS) or recorded video. Minimum is 1 and maximum is 90. Resolution . Specifies the resolution of recorded video. Stream Resolution . Specifies the resolution of streaming video. Capture Still and Still Interval (Sec) . If on, still images will be captured at 'Still Interval (Sec)'. These still images can be viewed in real-time in the 'Last Still Image' section. Pre Trigger Buffer (sec) . Used for 'Armed' recording. Specifies the duration of video recording before an input trigger. Video Annotation and Annotation Font Size . Annotate text on top of video recording. Select one of: none, date, time, date time, elapsed, or video frame. Include Hostname . If checked, the hostname will be pre-pended to each saved video file. Trial Number . Allows the trial number to be manually set. The trial number is always automatically incremented each time 'Start Recording' or 'Start Trial' are initiated. Allow Arming . If on, will activate the 'Arm' interface. This assumes the PiE server has been wired to a 'trigger in' and optionally a microscope 'frame clock'. Use Serial . If on, will activate the 'Motor' interface. This assumes a Teensy microcontroller is attached via usb. Load . Buttons to load presets of configuration parameters. This includes 'Defaults', the last configuration saved with 'Save Defaults' as well as pre-defined configuration parameters. It is easy to set your own configuration parameters and use 'Save Defaults' exclusively. Defaults . Load the last configuration saved with 'Save Defaults'. These are also loaded when the PiE server is first run. Homecage . Auto lights on, arm off, serial off. Scope . Arm on, serial off. Treadmill . Arm on, serial on. User . Only for advanced users. User specified configuration file. Factory Defaults . Reset the PiE server to its factory default configuration. Pins The Pins section allows GPIO pin parameters to be specified. All parameters in the 'Pins' section will be save with ' Configure - Save Defaults '. Each pin can be independenlty enabled/disabled, please disable pins you are not using. Input Pins . The triggerIn and frame pins are used during armed recording and their parameters need to be set to match the signals coming off your particular hardware/scope. For example, if your scope outputs a rising trigger then triggerIn should be set to Polarity rising and Pull Up/Down to down . Output Pins . The triggerOut pin is set at the start of armed recording and can be used to trigger external devices when the PiE server is used as a slave. The whiteLED and irLED pins are turned on/off when the white and IR toggles switches are set in the main web interface. To change 'Pin' numbers, the configuration json files need to be manually edited. These can be found in pie_app/config folder. DHT Temperature/Humidity . This assumes you have installed the Adafruit DHT temperature sensor driver with ./install-dht . If 'enabled' is checked, temperature and humidity will be logged to a trial file during video recording at the specified 'interval (sec)'. If 'continuous' is checked, temperature and humidity readings will still be looged to a trial file during video recording but will also be continuosly logged at the specified 'interval (sec)' wether video is recording or not. The continuous log can be accessed on a separate page, named environment, using the thermometer icon. The temperature and humidity log file is in video/logs/environment.log . If you change these options and they do not take effect, try restarting the PiE server in the web interface 'Debug' section. Motor The Motor section allows parameters to be uploaded to a Teensy microcontroller. This is only for advanced users. Activate this section by turning on 'Configure - Use Serial'. Debug This section reports all parameters received from the PiE server. Use 'Restart Pie Server' to restart the PiE server. Note, this restarts the PiE server software, it does not reboot the machine.","title":"Web Interface"},{"location":"web-interface/#configure","text":"The Configure section allows parameters of the PiE server to be set. Current parameters can be saved with 'Save Defaults' and will automatically be loaded the next time the PiE server is run. Make sure you save your changes with 'Save Defaults'. Repeat Forever . When checked, 'Start Recording' will record videos of 'Repeat Duration' over and over until 'Stop Recording' is pressed. When 'Arm' is on, this will be turned off. Number of Repeats . The number of video files to record when 'Start Recording' is pressed. Each video file will have a duration set by 'Repeat Duration Sec)'. When 'Arm' is on, this will be set to 1. Repeat Duration (sec) . The length of each video file in seconds. Auto Lights . When checked, the White and IR lights will be turned on and off to simulate daytime and nighttime. The white light will be on between sunrise and sunset, the IR light will be on otherwise. Sunrise (hour) and Sunset (hour) . When 'Auto Lights' is on, the White and IR lights will be turned on and off to simulate daytime and nighttime. FPS . Specifies the frames-per-second (FPS) or recorded video. Minimum is 1 and maximum is 90. Resolution . Specifies the resolution of recorded video. Stream Resolution . Specifies the resolution of streaming video. Capture Still and Still Interval (Sec) . If on, still images will be captured at 'Still Interval (Sec)'. These still images can be viewed in real-time in the 'Last Still Image' section. Pre Trigger Buffer (sec) . Used for 'Armed' recording. Specifies the duration of video recording before an input trigger. Video Annotation and Annotation Font Size . Annotate text on top of video recording. Select one of: none, date, time, date time, elapsed, or video frame. Include Hostname . If checked, the hostname will be pre-pended to each saved video file. Trial Number . Allows the trial number to be manually set. The trial number is always automatically incremented each time 'Start Recording' or 'Start Trial' are initiated. Allow Arming . If on, will activate the 'Arm' interface. This assumes the PiE server has been wired to a 'trigger in' and optionally a microscope 'frame clock'. Use Serial . If on, will activate the 'Motor' interface. This assumes a Teensy microcontroller is attached via usb. Load . Buttons to load presets of configuration parameters. This includes 'Defaults', the last configuration saved with 'Save Defaults' as well as pre-defined configuration parameters. It is easy to set your own configuration parameters and use 'Save Defaults' exclusively. Defaults . Load the last configuration saved with 'Save Defaults'. These are also loaded when the PiE server is first run. Homecage . Auto lights on, arm off, serial off. Scope . Arm on, serial off. Treadmill . Arm on, serial on. User . Only for advanced users. User specified configuration file. Factory Defaults . Reset the PiE server to its factory default configuration.","title":"Configure"},{"location":"web-interface/#pins","text":"The Pins section allows GPIO pin parameters to be specified. All parameters in the 'Pins' section will be save with ' Configure - Save Defaults '. Each pin can be independenlty enabled/disabled, please disable pins you are not using. Input Pins . The triggerIn and frame pins are used during armed recording and their parameters need to be set to match the signals coming off your particular hardware/scope. For example, if your scope outputs a rising trigger then triggerIn should be set to Polarity rising and Pull Up/Down to down . Output Pins . The triggerOut pin is set at the start of armed recording and can be used to trigger external devices when the PiE server is used as a slave. The whiteLED and irLED pins are turned on/off when the white and IR toggles switches are set in the main web interface. To change 'Pin' numbers, the configuration json files need to be manually edited. These can be found in pie_app/config folder. DHT Temperature/Humidity . This assumes you have installed the Adafruit DHT temperature sensor driver with ./install-dht . If 'enabled' is checked, temperature and humidity will be logged to a trial file during video recording at the specified 'interval (sec)'. If 'continuous' is checked, temperature and humidity readings will still be looged to a trial file during video recording but will also be continuosly logged at the specified 'interval (sec)' wether video is recording or not. The continuous log can be accessed on a separate page, named environment, using the thermometer icon. The temperature and humidity log file is in video/logs/environment.log . If you change these options and they do not take effect, try restarting the PiE server in the web interface 'Debug' section.","title":"Pins"},{"location":"web-interface/#motor","text":"The Motor section allows parameters to be uploaded to a Teensy microcontroller. This is only for advanced users. Activate this section by turning on 'Configure - Use Serial'.","title":"Motor"},{"location":"web-interface/#debug","text":"This section reports all parameters received from the PiE server. Use 'Restart Pie Server' to restart the PiE server. Note, this restarts the PiE server software, it does not reboot the machine.","title":"Debug"},{"location":"wiring-behavior-box/","text":"Wiring a behavior box Wiring a behavior box is fairly simple. The Pi needs to be wired to one end of a relay/switch, the other end of the relay/switch is wired to 12V DC, IR and white LEDs, and the temperature/humidity sensor is wired to the Pi. Raspberry Pi 2/3 pin out There are multiple power and ground pins, use these to connect to the relay switch and the temperature sensor. Conceptually, all the ground pins are the same, you can use a bread-board if you run out of ground pins or the wiring becomes too tangled. Wiring the camera The Raspberry Pi NoIR camera (and the normal Pi camera ) is connected to the Pi with a flat [ribbon cable][flat-camera-cable]. The length should not exceed 2 meters. The cable should have one side with a blue tab (one on each end). When connecting the cable to the camera and the Pi, the direction of the blue tab matters. If it is backwards, the camera will not function. The blue side of the cable must go towards the back of the camera. The blue side of the cable must go towards the ethernet and USB ports. Finally, the camera must be activated from the command line using sudo raspi-config and choosing '5 Interface Options' then 'P1 Camera' and answering 'Yes'. Wiring diagram Lights Use an external 12V AC/DC power supply. - Don't power the lights directly from the 5V pins on the Pi, the Pi does not have enough current. A 1 Amp 12V adapter should be fine. Don't worry, if it is under-powered, the LED lights will be a little dim. Use a relay switch. - Never connect the 12V adapter directly to the Pi, instead use a relay switch. Only work with DC current coming out of the AC/DC adapter, DO NOT work with AC power coming from the wall as it can kill you. The relay switch effectively separates the 5V, Ground, and GPIO on the Pi (left half of the relay) from the 12V power of the AC/DC adapter and the lights (right half of the relay). Here we will wire the system with the white LED on channel 1 and the IR LED on channel 2 of the relay switch. All LEDs need resistors. - All LEDs need a resistor, these are called 'current limiting resistor'. If you directly connect an LED to power and ground without a resistor, you will burn the LED. The value of the resistor (in Ohms) needs to be calculated using Ohms law , V=I*R. Where: V (Volts) is determined by the power source I (Amps) depends on the properties of each LED and if they are wired in series or in parallel R (Ohms) is what needs to be calculated. Follow this tutorial to get started calculating the required resistor value. Use IR LEDs 900 nm. - These are within the sensitivity range of the Pi NoIR camera. A lot of IR LEDs are 940nm, these are not well suited for use with the Pi NoIR camera but are designed for IR sensors as is used in a TV remote. Wiring the lights Connect a 12V AC/DC adapter, IR, and white lights to the two-channel relay switch. Using a 12V AC/DC adapter ( 1 Amp), cut the wire and stick the positive 'hot' wire into the center 'common' pin' of channel 1 on the relay switch. The 'hot' end wire usually has a white line down the length of the wire. You can also determine the 'hot' end using a multi-meter, it is the one that gives a positive (+) voltage when attached to the positive (normally red) end of the multi-meter. Cut a bit of wire and connect the center 'common pin' of channel 1 to the center 'common pin' of channel 2. This is the 'hot' end. Stick the positive end of the white LED into the 'normally closed' port of channel 1. Attach the negative end of the white LED to the 'ground' wire of the 12V AC/DC adapter. Remember, all LEDs need resistors! Do the same for the IR LED. Stick the positive end into the 'normally closed' port of channel 2 on the relay switch. Attach the negative end of the IR LED to the 'ground' wire of the 12V AC/DC adapter. Remember, all LEDs need resistors! Tie the three grounds together, this includes the ground from the 12V AC/DC adapter, the white LEDs and the IR LEDs. Connect the Pi to the relay switch switch Connect 4 wires from the Pi to the relay switch. All these wires go on the opposite end from the 12V wires. Look at your relay switch for the correct connects, they are usually clearly labelled but can be in a different order from the image shown. Connect a GPIO pin from the Pi to the 'In1=Digital Input' pin on the relay switch. Connect a second GPIO pin from the Pi to the 'In2=Digital Input' pin on the relay switch. Connect a 5V pin from the Pi to the 'Vcc' pin on the relay switch. Connect a ground pin from the Pi to the 'GND' pin on the relay switch. Wiring a temperature and humidity sensor The PiE server can log temperature and humidity using the DHT line of temperature sensors. To use these sensors, the Adafruit Python sensor library needs to to be installed. cd ~/pie ./install-dht There are additional troubleshooting tips in the pie/testing/ folder. AM2302 Red is power, black is ground, and yellow is data. Connect a 5V pin from the Pi to the red wire on the sensor. Connect a ground pin from the Pi to the back wire on the sensor. Connect a GPIO pin from the Pi to the yellow (data) pin on the sensor. DHT22 Connect a 5V pin from the Pi to the 'VCC' pin on the sensor. Connect a ground pin from the Pi to the 'GND' pin on the sensor. Connect a GPIO pin from the Pi to the 'DATA' pin on the sensor.","title":"Wiring - Behavior Box"},{"location":"wiring-behavior-box/#wiring-a-behavior-box","text":"Wiring a behavior box is fairly simple. The Pi needs to be wired to one end of a relay/switch, the other end of the relay/switch is wired to 12V DC, IR and white LEDs, and the temperature/humidity sensor is wired to the Pi.","title":"Wiring a behavior box"},{"location":"wiring-behavior-box/#raspberry-pi-23-pin-out","text":"There are multiple power and ground pins, use these to connect to the relay switch and the temperature sensor. Conceptually, all the ground pins are the same, you can use a bread-board if you run out of ground pins or the wiring becomes too tangled.","title":"Raspberry Pi 2/3 pin out"},{"location":"wiring-behavior-box/#wiring-the-camera","text":"The Raspberry Pi NoIR camera (and the normal Pi camera ) is connected to the Pi with a flat [ribbon cable][flat-camera-cable]. The length should not exceed 2 meters. The cable should have one side with a blue tab (one on each end). When connecting the cable to the camera and the Pi, the direction of the blue tab matters. If it is backwards, the camera will not function. The blue side of the cable must go towards the back of the camera. The blue side of the cable must go towards the ethernet and USB ports. Finally, the camera must be activated from the command line using sudo raspi-config and choosing '5 Interface Options' then 'P1 Camera' and answering 'Yes'.","title":"Wiring the camera"},{"location":"wiring-behavior-box/#wiring-diagram","text":"","title":"Wiring diagram"},{"location":"wiring-behavior-box/#lights","text":"Use an external 12V AC/DC power supply. - Don't power the lights directly from the 5V pins on the Pi, the Pi does not have enough current. A 1 Amp 12V adapter should be fine. Don't worry, if it is under-powered, the LED lights will be a little dim. Use a relay switch. - Never connect the 12V adapter directly to the Pi, instead use a relay switch. Only work with DC current coming out of the AC/DC adapter, DO NOT work with AC power coming from the wall as it can kill you. The relay switch effectively separates the 5V, Ground, and GPIO on the Pi (left half of the relay) from the 12V power of the AC/DC adapter and the lights (right half of the relay). Here we will wire the system with the white LED on channel 1 and the IR LED on channel 2 of the relay switch. All LEDs need resistors. - All LEDs need a resistor, these are called 'current limiting resistor'. If you directly connect an LED to power and ground without a resistor, you will burn the LED. The value of the resistor (in Ohms) needs to be calculated using Ohms law , V=I*R. Where: V (Volts) is determined by the power source I (Amps) depends on the properties of each LED and if they are wired in series or in parallel R (Ohms) is what needs to be calculated. Follow this tutorial to get started calculating the required resistor value. Use IR LEDs 900 nm. - These are within the sensitivity range of the Pi NoIR camera. A lot of IR LEDs are 940nm, these are not well suited for use with the Pi NoIR camera but are designed for IR sensors as is used in a TV remote.","title":"Lights"},{"location":"wiring-behavior-box/#wiring-the-lights","text":"","title":"Wiring the lights"},{"location":"wiring-behavior-box/#connect-a-12v-acdc-adapter-ir-and-white-lights-to-the-two-channel-relay-switch","text":"Using a 12V AC/DC adapter ( 1 Amp), cut the wire and stick the positive 'hot' wire into the center 'common' pin' of channel 1 on the relay switch. The 'hot' end wire usually has a white line down the length of the wire. You can also determine the 'hot' end using a multi-meter, it is the one that gives a positive (+) voltage when attached to the positive (normally red) end of the multi-meter. Cut a bit of wire and connect the center 'common pin' of channel 1 to the center 'common pin' of channel 2. This is the 'hot' end. Stick the positive end of the white LED into the 'normally closed' port of channel 1. Attach the negative end of the white LED to the 'ground' wire of the 12V AC/DC adapter. Remember, all LEDs need resistors! Do the same for the IR LED. Stick the positive end into the 'normally closed' port of channel 2 on the relay switch. Attach the negative end of the IR LED to the 'ground' wire of the 12V AC/DC adapter. Remember, all LEDs need resistors! Tie the three grounds together, this includes the ground from the 12V AC/DC adapter, the white LEDs and the IR LEDs.","title":"Connect a 12V AC/DC adapter, IR, and white lights to the two-channel relay switch."},{"location":"wiring-behavior-box/#connect-the-pi-to-the-relay-switch-switch","text":"Connect 4 wires from the Pi to the relay switch. All these wires go on the opposite end from the 12V wires. Look at your relay switch for the correct connects, they are usually clearly labelled but can be in a different order from the image shown. Connect a GPIO pin from the Pi to the 'In1=Digital Input' pin on the relay switch. Connect a second GPIO pin from the Pi to the 'In2=Digital Input' pin on the relay switch. Connect a 5V pin from the Pi to the 'Vcc' pin on the relay switch. Connect a ground pin from the Pi to the 'GND' pin on the relay switch.","title":"Connect the Pi to the relay switch switch"},{"location":"wiring-behavior-box/#wiring-a-temperature-and-humidity-sensor","text":"The PiE server can log temperature and humidity using the DHT line of temperature sensors. To use these sensors, the Adafruit Python sensor library needs to to be installed. cd ~/pie ./install-dht There are additional troubleshooting tips in the pie/testing/ folder.","title":"Wiring a temperature and humidity sensor"},{"location":"wiring-behavior-box/#am2302","text":"Red is power, black is ground, and yellow is data. Connect a 5V pin from the Pi to the red wire on the sensor. Connect a ground pin from the Pi to the back wire on the sensor. Connect a GPIO pin from the Pi to the yellow (data) pin on the sensor.","title":"AM2302"},{"location":"wiring-behavior-box/#dht22","text":"Connect a 5V pin from the Pi to the 'VCC' pin on the sensor. Connect a ground pin from the Pi to the 'GND' pin on the sensor. Connect a GPIO pin from the Pi to the 'DATA' pin on the sensor.","title":"DHT22"},{"location":"wiring-scope/","text":"Wiring a scope This is a tutorial for wiring tactile-push-buttons to trigger a frame and a trigger-in in a PiE server. This tutorial requires: A breadboard . Some jumper wires . Two tactile push buttons . A functioning Raspberry Pi. A PiE server to be installed. Raspberry Pi 3 pin out Here is a schematic of the Raspberry Pi 2/3 pin outs. Red is 5V, orange is 3.3V, yellow are GPIO, black are Ground, and white should not be used. Important: The Raspberry Pi GPIO pins are not 5V tolerant. Never connect a 5V line to a Raspberry GPIO pin. 1) Test the PiE server 'frame' pin with a tactile-button-switch Here, we will wire a tactile-button-switch to the the Raspberry Pi 3.3V line and the PiE frame pin (GPIO 18) to test that pushing the button registers a frame in the PiE server. This button will normally sit at LOW and take on a '3.3V ' level when pushed. 1) Wire the Raspberry Pi 3.3V pin to the '+' rail on a breadboard (red). 2) Insert a Tactile-button-switch on the breadboard. 3) Connect the top-left pin of the Tactile-button-switch to the '+' rail on the breadboard (red). 4) Connect the top-right pin of the Tactile-button-switch to the Raspberry Pi GPIO 23 . 5) The remaining bottom-left and bottom-right pins on the tactile-button-switch should not be connected to anything. Make sure the PiE server is running with ./pie run so we can see the output in the terminal. cd ~/pie ./pie stop # stop any background PiE servers ./pie run # run the PiE server on the command line In the 'Pins' section, configure the triggerIn pin to Polarity 'rising' and Pull Up/Down to 'down'. Do the same for the 'frame' pin. Make sure 'Allow arming' is checked in the Configure section. Push the frame tactile-button-switch and you should see see something like this on the command line: !!! received frame when not running If you do see this Good. Your frame pin is working. If you do not see this STOP your frame pin is not working. Please check your wiring and try again. 2) Test the PiE server 'trigger-in' pin with a tactile-button-switch Here, we will wire a tactile-button-switch to the Raspberry Pi 3.3V line and the PiE 'triggerIn' pin (GPIO 23) to test that pushing the button starts a 'trial' in the PiE server. This push-button will normally sit at LOW and take on a '3.3V' level when pushed. 1) Wire the Raspberry Pi 3.3V pin to the '+' rail on a breadboard (red). 2) Insert a Tactile-button-switch on the breadboard. 3) Connect the top-left pin of the Tactile-button-switch to the '+' rail on the breadboard (red). 4) Connect the top-right pin of the Tactile-button-switch to the Raspberry Pi GPIO 24 . 5) The remaining bottom-left and bottom-right pins on the tactile-button-switch should not be connected to anything. Make sure the PiE server is running with ./pie run so we can see the output in the terminal. cd ~/pie ./pie stop # stop any background PiE servers ./pie run # run the PiE server on the command line Make sure 'Allow arming' is checked in the Configure section. Push the trigger-in tactile-button-switch and you should see something like this on the command line: !!! received triggerIn_Callback() when camera is NOT armed If you do see this Good. Your trigger-in pin is working. If you do not see this STOP your trigger-in pin is not working. Please check your wiring and try again. Once your trigger-in pin and tactile-button-switch are working Go into the web interface and arm the recording with the arm checkbox. Push the trigger-in tactile-button-switch and video should start recording and you should see this in the command prompt: [2018-07-09 08:48:26,556] {bTrial.py startTrial:702} DEBUG - startTrial startArmVideo=True [2018-07-09 08:48:26,559] {bTrial.py startTrial:721} INFO - triggerOut pin:15 value:True Then, while the recording is still going, push the frame tactile-button-switch and you should see [2018-07-09 08:49:08,884] {bTrial.py eventIn_Callback:614} DEBUG - eventIn_Callback() frame 1 [2018-07-09 08:49:09,027] {bTrial.py eventIn_Callback:614} DEBUG - eventIn_Callback() frame 2 [2018-07-09 08:49:09,312] {bTrial.py eventIn_Callback:614} DEBUG - eventIn_Callback() frame 3 Once you done this for awhile, click the disk icon in the top tool-bar and view your videos and trial .txt files. Your videos should be watermarked with frame numbers and the .txt file should log the frame times. You will see two video files per trial, a before and after video. The after video is started when a trial is started, the before video is a 'pre-trigger' video whose length is set with 'Pre Trigger Buffer (sec)'. 3) Connecting triggerIn, triggerOut, and frame pins to a scope. Following the same logic, we can connect the Raspberry Pi triggerIn to the 'Scope Trigger Out', the Raspberry triggerOut to the 'scope Trigger In', and the Raspberry Pi frame in pin to the 'Scope Frame Out'. Keep in mind that the definition of 'in' versus 'out' is with respect to the device you are talking about. Important: The Raspberry Pi GPIO pins are not 5V tolerant. Never connect a 5V line to a Raspberry GPIO pin. We use a level-shifter to convert high voltage 5V to 3V. If your scope sends a rising high pulse for 'trigger out' and 'frame out' you can follow steps #1 and #2 above. If your scope sends a falling low pulse for either of these, you need to configure the 'pins' section of the web interface as polarity falling and Pull Up/Down as up . Raspberry Pi as the master (Scope is slave) To have the PiE server trigger your scope (Raspberry Pi is master), use the Raspberry triggerOut pin. In the web interface, if the 'Default Setting' for the triggerOut pin is set to 'false' then the PiE server will hold this pin LOW and send a 'positive' HIGH pulse when you click 'Start Trial'. The opposite is also true, if the 'Default Setting' for the triggerOut pin is set to 'true', the PiE server will hold this pin HIGH and send a LOW pulse when you click 'Start Trial'. You need to figure out what signal your scope is expecting for a trigger, it is either HIGH or LOW . Raspberry Pi as the slave (Scope is master) To have your scope trigger the PiE server (Scope is master), use the Raspberry triggerIn pin. In the web interface you 'arm' the Raspberry to 'wait for trigger' using the 'arm' checkbox. Troubleshooting If you run into trouble it is best to independently test each component of the system. In this case, you would use a volt-meter to test the signals coming off your scope are what you expect. Wiring diagram","title":"Wiring - Scope"},{"location":"wiring-scope/#wiring-a-scope","text":"This is a tutorial for wiring tactile-push-buttons to trigger a frame and a trigger-in in a PiE server. This tutorial requires: A breadboard . Some jumper wires . Two tactile push buttons . A functioning Raspberry Pi. A PiE server to be installed.","title":"Wiring a scope"},{"location":"wiring-scope/#raspberry-pi-3-pin-out","text":"Here is a schematic of the Raspberry Pi 2/3 pin outs. Red is 5V, orange is 3.3V, yellow are GPIO, black are Ground, and white should not be used. Important: The Raspberry Pi GPIO pins are not 5V tolerant. Never connect a 5V line to a Raspberry GPIO pin.","title":"Raspberry Pi 3 pin out"},{"location":"wiring-scope/#1-test-the-pie-server-frame-pin-with-a-tactile-button-switch","text":"Here, we will wire a tactile-button-switch to the the Raspberry Pi 3.3V line and the PiE frame pin (GPIO 18) to test that pushing the button registers a frame in the PiE server. This button will normally sit at LOW and take on a '3.3V ' level when pushed. 1) Wire the Raspberry Pi 3.3V pin to the '+' rail on a breadboard (red). 2) Insert a Tactile-button-switch on the breadboard. 3) Connect the top-left pin of the Tactile-button-switch to the '+' rail on the breadboard (red). 4) Connect the top-right pin of the Tactile-button-switch to the Raspberry Pi GPIO 23 . 5) The remaining bottom-left and bottom-right pins on the tactile-button-switch should not be connected to anything. Make sure the PiE server is running with ./pie run so we can see the output in the terminal. cd ~/pie ./pie stop # stop any background PiE servers ./pie run # run the PiE server on the command line In the 'Pins' section, configure the triggerIn pin to Polarity 'rising' and Pull Up/Down to 'down'. Do the same for the 'frame' pin. Make sure 'Allow arming' is checked in the Configure section. Push the frame tactile-button-switch and you should see see something like this on the command line: !!! received frame when not running","title":"1) Test the PiE server 'frame' pin with a tactile-button-switch"},{"location":"wiring-scope/#if-you-do-see-this","text":"Good. Your frame pin is working.","title":"If you do see this"},{"location":"wiring-scope/#if-you-do-not-see-this","text":"STOP your frame pin is not working. Please check your wiring and try again.","title":"If you do not see this"},{"location":"wiring-scope/#2-test-the-pie-server-trigger-in-pin-with-a-tactile-button-switch","text":"Here, we will wire a tactile-button-switch to the Raspberry Pi 3.3V line and the PiE 'triggerIn' pin (GPIO 23) to test that pushing the button starts a 'trial' in the PiE server. This push-button will normally sit at LOW and take on a '3.3V' level when pushed. 1) Wire the Raspberry Pi 3.3V pin to the '+' rail on a breadboard (red). 2) Insert a Tactile-button-switch on the breadboard. 3) Connect the top-left pin of the Tactile-button-switch to the '+' rail on the breadboard (red). 4) Connect the top-right pin of the Tactile-button-switch to the Raspberry Pi GPIO 24 . 5) The remaining bottom-left and bottom-right pins on the tactile-button-switch should not be connected to anything. Make sure the PiE server is running with ./pie run so we can see the output in the terminal. cd ~/pie ./pie stop # stop any background PiE servers ./pie run # run the PiE server on the command line Make sure 'Allow arming' is checked in the Configure section. Push the trigger-in tactile-button-switch and you should see something like this on the command line: !!! received triggerIn_Callback() when camera is NOT armed","title":"2) Test the PiE server 'trigger-in' pin with a tactile-button-switch"},{"location":"wiring-scope/#if-you-do-see-this_1","text":"Good. Your trigger-in pin is working.","title":"If you do see this"},{"location":"wiring-scope/#if-you-do-not-see-this_1","text":"STOP your trigger-in pin is not working. Please check your wiring and try again.","title":"If you do not see this"},{"location":"wiring-scope/#once-your-trigger-in-pin-and-tactile-button-switch-are-working","text":"Go into the web interface and arm the recording with the arm checkbox. Push the trigger-in tactile-button-switch and video should start recording and you should see this in the command prompt: [2018-07-09 08:48:26,556] {bTrial.py startTrial:702} DEBUG - startTrial startArmVideo=True [2018-07-09 08:48:26,559] {bTrial.py startTrial:721} INFO - triggerOut pin:15 value:True Then, while the recording is still going, push the frame tactile-button-switch and you should see [2018-07-09 08:49:08,884] {bTrial.py eventIn_Callback:614} DEBUG - eventIn_Callback() frame 1 [2018-07-09 08:49:09,027] {bTrial.py eventIn_Callback:614} DEBUG - eventIn_Callback() frame 2 [2018-07-09 08:49:09,312] {bTrial.py eventIn_Callback:614} DEBUG - eventIn_Callback() frame 3 Once you done this for awhile, click the disk icon in the top tool-bar and view your videos and trial .txt files. Your videos should be watermarked with frame numbers and the .txt file should log the frame times. You will see two video files per trial, a before and after video. The after video is started when a trial is started, the before video is a 'pre-trigger' video whose length is set with 'Pre Trigger Buffer (sec)'.","title":"Once your trigger-in pin and tactile-button-switch are working"},{"location":"wiring-scope/#3-connecting-triggerin-triggerout-and-frame-pins-to-a-scope","text":"Following the same logic, we can connect the Raspberry Pi triggerIn to the 'Scope Trigger Out', the Raspberry triggerOut to the 'scope Trigger In', and the Raspberry Pi frame in pin to the 'Scope Frame Out'. Keep in mind that the definition of 'in' versus 'out' is with respect to the device you are talking about. Important: The Raspberry Pi GPIO pins are not 5V tolerant. Never connect a 5V line to a Raspberry GPIO pin. We use a level-shifter to convert high voltage 5V to 3V. If your scope sends a rising high pulse for 'trigger out' and 'frame out' you can follow steps #1 and #2 above. If your scope sends a falling low pulse for either of these, you need to configure the 'pins' section of the web interface as polarity falling and Pull Up/Down as up .","title":"3) Connecting triggerIn, triggerOut, and frame pins to a scope."},{"location":"wiring-scope/#raspberry-pi-as-the-master-scope-is-slave","text":"To have the PiE server trigger your scope (Raspberry Pi is master), use the Raspberry triggerOut pin. In the web interface, if the 'Default Setting' for the triggerOut pin is set to 'false' then the PiE server will hold this pin LOW and send a 'positive' HIGH pulse when you click 'Start Trial'. The opposite is also true, if the 'Default Setting' for the triggerOut pin is set to 'true', the PiE server will hold this pin HIGH and send a LOW pulse when you click 'Start Trial'. You need to figure out what signal your scope is expecting for a trigger, it is either HIGH or LOW .","title":"Raspberry Pi as the master (Scope is slave)"},{"location":"wiring-scope/#raspberry-pi-as-the-slave-scope-is-master","text":"To have your scope trigger the PiE server (Scope is master), use the Raspberry triggerIn pin. In the web interface you 'arm' the Raspberry to 'wait for trigger' using the 'arm' checkbox.","title":"Raspberry Pi as the slave (Scope is master)"},{"location":"wiring-scope/#troubleshooting","text":"If you run into trouble it is best to independently test each component of the system. In this case, you would use a volt-meter to test the signals coming off your scope are what you expect.","title":"Troubleshooting"},{"location":"wiring-scope/#wiring-diagram","text":"","title":"Wiring diagram"},{"location":"wiring-treadmill/","text":"Wiring a treadmill Overview The treadmill stepper motor is controlled with a motor controller which is controlled by a Teensy . The Teensy is attached to the Pi via USB and code is uploaded using the command line program platformio . Once the code is running on the Teensy, the PiE server (in pie/pie_app/bTrial.py) uses a serial connection to set treadmill motor parameters. The Teensy logs all events within a trial to memory. At the end of a trial, the PiE server (again in pie/pie_app/bTrial.py) downloads all the events and saves them to a file. The Teensy code is in pie/platformio/treadmill/src/treadmill2.cpp . Attaching a Teensy to the Raspberry Pi Attach a Teensy microcontroller to the Pi using a USB cable. Code is uploaded using a command line program called platformio . For how to do this, please refer to the pie/platformio readme. Parts See the main parts page, scroll down to the treadmill section. Wiring This is a full wiring diagram for microscope triggered video recording and using a Teensy and motor controller with a motorized treadmill. This wiring diagram is made with Fritzing , download the original pie.fzz file if you like. There are lots of connections here, they can be conceptualized as 4 different subsystems. Wiring the Teensy to Scope Trigger In , Scope Trigger Out , and Scope Frame out . Wiring the Teensy to the Raspberry Pi Wiring the stepper motor to the motor controller. Wiring the motor controller to the Teensy Important The Raspberry Pi is NOT 5V tolerant. Connecting standard lab equipment using 5V TTL pulses can damage the Pi. These 5V lines can be converted to 3V with a dedicated level shifter . Or, if you are using a Teensy, these 5V lines can pass through the Teensy which IS 5V tolerant but then outputs 3V which can go into the Raspberry Pi. In this way, the Teensy can act as a programmable level shifter . The Easy Driver Motor Driver has a nasty feature. If you connect the 12V line to the board, the Stepper motor must be plugged in or else you will fry the driver board. Thus, check the stepper motor is connected before plugging in the 12V line and check the 12V line is not plugged in before disconnecting the stepper motor. Pin table Download this pdf for a table of all pin connections between the Raspberry, motor controller, and Teensy. Serial interface The treadmill2.cpp code sets up serial communication at 115200 baud. All serial commands are a single line and must end in a carriage return (ascii 13). If a serial command is not understood by the treadmill code, it will return 'treadmill did not handle serial: ...'. Command Actions Returns h Help A list of commands v Get version Version p Get state The state of all parameters as name=value pairs d Dump Trial All events that occurred during the last trial, one line per event. Each event contains a comma separated list of (timestamp, event name, value). start Start Trial None stop Stop Trial None set,name,value Set a parameter (name) to a value (value). See table below. name=value The command to 'set' a parameter (name) to a value (value) takes the following parameter 'names'. If a 'set' command is not understood, 'SetValue() did not handle ...' is returned. name meaning possible values numEpoch Number of epochs Unsigned Integer epochDur Epoch duration (ms) Unsigned Integer preDur Pre duration (ms). Specifies a duration before all epochs. Unsigned Integer postDur Post duration (ms). Specifies a duation after all epochs. Unsigned Integer useMotor Use the motor during a trial String in (\"motorOn\", \"\") motorDel Delay before turning the motor in an epoch (ms) Unsigned Integer motorDur Duration to turn the motor in an epoch (ms) Unsigned Integer motorSpeed Speed to turn the motor(au) Unsigned Integer, 100...700 from slow to fast. arm Arm the treadmill to start a trial in response to changes in startTrialPin pin String in (\"True\", \"False\") duringPulse What to do with motor during motorDur String in (\"Rotate\", \"Locked\", \"Free\") betweenPulse What to do with motor outside of motor dur String in (\"Locked\", \"Free\") Some examples, To set the number of epochs to 5, use set,numEpoch,5 . To arm the treadmill, use set,arm,True To have the treadmill free to turn between pulses, use set,betweenPulse,Free Using the serial interface on the command line A simple yet esoteric command line program called screen can be used to establish a serial connection with an Arduino/Teensy on the command line. Install screen sudo apt-get install screen Use screen to connect to serial port. This assumes your Arduino/Teensy is at /dev/ttyACM0 . screen /dev/ttyACM0 115200 Enter some serial commands manually h v set,numEpoch,5 d You might have to hit return to get it going. Quit screen with ctrl+a then type : then type quit","title":"Wiring - Treadmill"},{"location":"wiring-treadmill/#wiring-a-treadmill","text":"","title":"Wiring a treadmill"},{"location":"wiring-treadmill/#overview","text":"The treadmill stepper motor is controlled with a motor controller which is controlled by a Teensy . The Teensy is attached to the Pi via USB and code is uploaded using the command line program platformio . Once the code is running on the Teensy, the PiE server (in pie/pie_app/bTrial.py) uses a serial connection to set treadmill motor parameters. The Teensy logs all events within a trial to memory. At the end of a trial, the PiE server (again in pie/pie_app/bTrial.py) downloads all the events and saves them to a file. The Teensy code is in pie/platformio/treadmill/src/treadmill2.cpp .","title":"Overview"},{"location":"wiring-treadmill/#attaching-a-teensy-to-the-raspberry-pi","text":"Attach a Teensy microcontroller to the Pi using a USB cable. Code is uploaded using a command line program called platformio . For how to do this, please refer to the pie/platformio readme.","title":"Attaching a Teensy to the Raspberry Pi"},{"location":"wiring-treadmill/#parts","text":"See the main parts page, scroll down to the treadmill section.","title":"Parts"},{"location":"wiring-treadmill/#wiring","text":"This is a full wiring diagram for microscope triggered video recording and using a Teensy and motor controller with a motorized treadmill. This wiring diagram is made with Fritzing , download the original pie.fzz file if you like. There are lots of connections here, they can be conceptualized as 4 different subsystems. Wiring the Teensy to Scope Trigger In , Scope Trigger Out , and Scope Frame out . Wiring the Teensy to the Raspberry Pi Wiring the stepper motor to the motor controller. Wiring the motor controller to the Teensy","title":"Wiring"},{"location":"wiring-treadmill/#important","text":"The Raspberry Pi is NOT 5V tolerant. Connecting standard lab equipment using 5V TTL pulses can damage the Pi. These 5V lines can be converted to 3V with a dedicated level shifter . Or, if you are using a Teensy, these 5V lines can pass through the Teensy which IS 5V tolerant but then outputs 3V which can go into the Raspberry Pi. In this way, the Teensy can act as a programmable level shifter . The Easy Driver Motor Driver has a nasty feature. If you connect the 12V line to the board, the Stepper motor must be plugged in or else you will fry the driver board. Thus, check the stepper motor is connected before plugging in the 12V line and check the 12V line is not plugged in before disconnecting the stepper motor.","title":"Important"},{"location":"wiring-treadmill/#pin-table","text":"Download this pdf for a table of all pin connections between the Raspberry, motor controller, and Teensy.","title":"Pin table"},{"location":"wiring-treadmill/#serial-interface","text":"The treadmill2.cpp code sets up serial communication at 115200 baud. All serial commands are a single line and must end in a carriage return (ascii 13). If a serial command is not understood by the treadmill code, it will return 'treadmill did not handle serial: ...'. Command Actions Returns h Help A list of commands v Get version Version p Get state The state of all parameters as name=value pairs d Dump Trial All events that occurred during the last trial, one line per event. Each event contains a comma separated list of (timestamp, event name, value). start Start Trial None stop Stop Trial None set,name,value Set a parameter (name) to a value (value). See table below. name=value The command to 'set' a parameter (name) to a value (value) takes the following parameter 'names'. If a 'set' command is not understood, 'SetValue() did not handle ...' is returned. name meaning possible values numEpoch Number of epochs Unsigned Integer epochDur Epoch duration (ms) Unsigned Integer preDur Pre duration (ms). Specifies a duration before all epochs. Unsigned Integer postDur Post duration (ms). Specifies a duation after all epochs. Unsigned Integer useMotor Use the motor during a trial String in (\"motorOn\", \"\") motorDel Delay before turning the motor in an epoch (ms) Unsigned Integer motorDur Duration to turn the motor in an epoch (ms) Unsigned Integer motorSpeed Speed to turn the motor(au) Unsigned Integer, 100...700 from slow to fast. arm Arm the treadmill to start a trial in response to changes in startTrialPin pin String in (\"True\", \"False\") duringPulse What to do with motor during motorDur String in (\"Rotate\", \"Locked\", \"Free\") betweenPulse What to do with motor outside of motor dur String in (\"Locked\", \"Free\") Some examples, To set the number of epochs to 5, use set,numEpoch,5 . To arm the treadmill, use set,arm,True To have the treadmill free to turn between pulses, use set,betweenPulse,Free","title":"Serial interface"},{"location":"wiring-treadmill/#using-the-serial-interface-on-the-command-line","text":"A simple yet esoteric command line program called screen can be used to establish a serial connection with an Arduino/Teensy on the command line. Install screen sudo apt-get install screen Use screen to connect to serial port. This assumes your Arduino/Teensy is at /dev/ttyACM0 . screen /dev/ttyACM0 115200 Enter some serial commands manually h v set,numEpoch,5 d You might have to hit return to get it going. Quit screen with ctrl+a then type : then type quit","title":"Using the serial interface on the command line"}]}